
USBF4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001cec  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000174  08001e9c  08001e9c  00011e9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002010  08002010  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  08002010  08002010  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002010  08002010  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002010  08002010  00012010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002014  08002014  00012014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08002018  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000064  20000080  08002098  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000e4  08002098  000200e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   000027f4  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000918  00000000  00000000  000228a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000001d8  00000000  00000000  000231c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000180  00000000  00000000  00023398  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00001503  00000000  00000000  00023518  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00002041  00000000  00000000  00024a1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00097fa3  00000000  00000000  00026a5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000be9ff  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000eb4  00000000  00000000  000bea7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stab         00000084  00000000  00000000  000bf930  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000117  00000000  00000000  000bf9b4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000080 	.word	0x20000080
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08001e84 	.word	0x08001e84

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000084 	.word	0x20000084
 80001ec:	08001e84 	.word	0x08001e84

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <IN_ENDPOINT>:
#define USB_OTG_HS_PCGCCTL ((uint32_t *)(USB_OTG_HS_PERIPH_BASE + USB_OTG_PCGCCTL_BASE))

#define ENDPOINT_COUNT 6

inline static USB_OTG_INEndpointTypeDef * IN_ENDPOINT(uint8_t endpoint_num)
{
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
 8000296:	4603      	mov	r3, r0
 8000298:	71fb      	strb	r3, [r7, #7]
	return (USB_OTG_INEndpointTypeDef *)(USB_OTG_HS_PERIPH_BASE + USB_OTG_IN_ENDPOINT_BASE + (endpoint_num));
 800029a:	79fa      	ldrb	r2, [r7, #7]
 800029c:	4b03      	ldr	r3, [pc, #12]	; (80002ac <IN_ENDPOINT+0x1c>)
 800029e:	4413      	add	r3, r2
}
 80002a0:	4618      	mov	r0, r3
 80002a2:	370c      	adds	r7, #12
 80002a4:	46bd      	mov	sp, r7
 80002a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002aa:	4770      	bx	lr
 80002ac:	40040900 	.word	0x40040900

080002b0 <OUT_ENDPOINT>:

inline static USB_OTG_OUTEndpointTypeDef * OUT_ENDPOINT(uint8_t endpoint_num)
{
 80002b0:	b480      	push	{r7}
 80002b2:	b083      	sub	sp, #12
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	4603      	mov	r3, r0
 80002b8:	71fb      	strb	r3, [r7, #7]
	return (USB_OTG_OUTEndpointTypeDef *)(USB_OTG_HS_PERIPH_BASE + USB_OTG_OUT_ENDPOINT_BASE + (endpoint_num));
 80002ba:	79fa      	ldrb	r2, [r7, #7]
 80002bc:	4b03      	ldr	r3, [pc, #12]	; (80002cc <OUT_ENDPOINT+0x1c>)
 80002be:	4413      	add	r3, r2
}
 80002c0:	4618      	mov	r0, r3
 80002c2:	370c      	adds	r7, #12
 80002c4:	46bd      	mov	sp, r7
 80002c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ca:	4770      	bx	lr
 80002cc:	40040b00 	.word	0x40040b00

080002d0 <FIFO>:

inline static __IO uint32_t *FIFO (uint8_t endpoint_num)
{
 80002d0:	b480      	push	{r7}
 80002d2:	b083      	sub	sp, #12
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	4603      	mov	r3, r0
 80002d8:	71fb      	strb	r3, [r7, #7]
	return (__IO uint32_t *)(USB_OTG_HS_PERIPH_BASE + USB_OTG_FIFO_BASE + (endpoint_num * 0x1000));
 80002da:	79fb      	ldrb	r3, [r7, #7]
 80002dc:	031b      	lsls	r3, r3, #12
 80002de:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80002e2:	f503 2382 	add.w	r3, r3, #266240	; 0x41000
}
 80002e6:	4618      	mov	r0, r3
 80002e8:	370c      	adds	r7, #12
 80002ea:	46bd      	mov	sp, r7
 80002ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f0:	4770      	bx	lr
	...

080002f4 <USB_Gpio_Init>:
 * @return			- none
 * @note			- none
 */

static void USB_Gpio_Init()
{
 80002f4:	b480      	push	{r7}
 80002f6:	af00      	add	r7, sp, #0
	//Enable clock for GPIOB
	SET_BIT(RCC->AHB1ENR, RCC_AHB1ENR_GPIOBEN);
 80002f8:	4b0d      	ldr	r3, [pc, #52]	; (8000330 <USB_Gpio_Init+0x3c>)
 80002fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002fc:	4a0c      	ldr	r2, [pc, #48]	; (8000330 <USB_Gpio_Init+0x3c>)
 80002fe:	f043 0302 	orr.w	r3, r3, #2
 8000302:	6313      	str	r3, [r2, #48]	; 0x30


	//Configure Alternate function for pin 14 and 15
	MODIFY_REG(GPIOB->AFR[1],
 8000304:	4b0b      	ldr	r3, [pc, #44]	; (8000334 <USB_Gpio_Init+0x40>)
 8000306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000308:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800030c:	4a09      	ldr	r2, [pc, #36]	; (8000334 <USB_Gpio_Init+0x40>)
 800030e:	f043 434c 	orr.w	r3, r3, #3422552064	; 0xcc000000
 8000312:	6253      	str	r3, [r2, #36]	; 0x24
			GPIO_AFRH_AFSEL14 | GPIO_AFRH_AFSEL15,
			_VAL2FLD(GPIO_AFRH_AFSEL14, 0xC) | _VAL2FLD(GPIO_AFRH_AFSEL15, 0xC));


	//Configure pin as alternate mode
	MODIFY_REG(GPIOB->MODER,
 8000314:	4b07      	ldr	r3, [pc, #28]	; (8000334 <USB_Gpio_Init+0x40>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800031c:	4a05      	ldr	r2, [pc, #20]	; (8000334 <USB_Gpio_Init+0x40>)
 800031e:	f043 4320 	orr.w	r3, r3, #2684354560	; 0xa0000000
 8000322:	6013      	str	r3, [r2, #0]
			GPIO_MODER_MODER14 | GPIO_MODER_MODER15,
			_VAL2FLD(GPIO_MODER_MODER14, 2) | _VAL2FLD(GPIO_MODER_MODER15, 2));

}
 8000324:	bf00      	nop
 8000326:	46bd      	mov	sp, r7
 8000328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop
 8000330:	40023800 	.word	0x40023800
 8000334:	40020400 	.word	0x40020400

08000338 <USB_Core_Init>:
 * @parem[in]		- none
 * @return			- none
 * @note			- none
 */
static void USB_Core_Init()
{
 8000338:	b480      	push	{r7}
 800033a:	af00      	add	r7, sp, #0
	 //Enable peripheral clock to USB module
	 SET_BIT(RCC->AHB1ENR, RCC_AHB1ENR_OTGHSEN);
 800033c:	4b1f      	ldr	r3, [pc, #124]	; (80003bc <USB_Core_Init+0x84>)
 800033e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000340:	4a1e      	ldr	r2, [pc, #120]	; (80003bc <USB_Core_Init+0x84>)
 8000342:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000346:	6313      	str	r3, [r2, #48]	; 0x30

	 //Initialize the core to run in device mode
	 MODIFY_REG(USB_OTG_HS->GUSBCFG,
 8000348:	4b1d      	ldr	r3, [pc, #116]	; (80003c0 <USB_Core_Init+0x88>)
 800034a:	68db      	ldr	r3, [r3, #12]
 800034c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8000350:	f423 5371 	bic.w	r3, r3, #15424	; 0x3c40
 8000354:	4a1a      	ldr	r2, [pc, #104]	; (80003c0 <USB_Core_Init+0x88>)
 8000356:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800035a:	f443 5311 	orr.w	r3, r3, #9280	; 0x2440
 800035e:	60d3      	str	r3, [r2, #12]
	 		USB_OTG_GUSBCFG_FDMOD | USB_OTG_GUSBCFG_PHYSEL | USB_OTG_GUSBCFG_TRDT,
	 		USB_OTG_GUSBCFG_FDMOD | USB_OTG_GUSBCFG_PHYSEL | _VAL2FLD(USB_OTG_GUSBCFG_TRDT, 0x09));


	 //Initialize USB Speed to run at Full Speed
	 MODIFY_REG(USB_OTG_HS_DEVICE->DCFG,
 8000360:	4b18      	ldr	r3, [pc, #96]	; (80003c4 <USB_Core_Init+0x8c>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	4a17      	ldr	r2, [pc, #92]	; (80003c4 <USB_Core_Init+0x8c>)
 8000366:	f043 0303 	orr.w	r3, r3, #3
 800036a:	6013      	str	r3, [r2, #0]
	 		USB_OTG_DCFG_DSPD,
	 		_VAL2FLD(USB_OTG_DCFG_DSPD, 0x03));


	 //Enable VBUS sensing device
	 SET_BIT(USB_OTG_HS->GCCFG, USB_OTG_GCCFG_VBUSBSEN);
 800036c:	4b14      	ldr	r3, [pc, #80]	; (80003c0 <USB_Core_Init+0x88>)
 800036e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000370:	4a13      	ldr	r2, [pc, #76]	; (80003c0 <USB_Core_Init+0x88>)
 8000372:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000376:	6393      	str	r3, [r2, #56]	; 0x38
	 *SOFM: Start of frame mask
	 *USBSUSPM: USB suspend mask
	 *WUIM: Resume/remote wakeup detected interrupt mask
	 *IEPINT: IN endpoints interrupt mask
	 *RXFLVLM: Receive FIFO non-empty mask*/
	 SET_BIT(USB_OTG_HS->GINTMSK,
 8000378:	4b11      	ldr	r3, [pc, #68]	; (80003c0 <USB_Core_Init+0x88>)
 800037a:	699a      	ldr	r2, [r3, #24]
 800037c:	4910      	ldr	r1, [pc, #64]	; (80003c0 <USB_Core_Init+0x88>)
 800037e:	4b12      	ldr	r3, [pc, #72]	; (80003c8 <USB_Core_Init+0x90>)
 8000380:	4313      	orrs	r3, r2
 8000382:	618b      	str	r3, [r1, #24]
	 		USB_OTG_GINTMSK_USBRST | USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_SOFM |
	 		USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_WUIM | USB_OTG_GINTMSK_IEPINT |
	 		USB_OTG_GINTSTS_OEPINT | USB_OTG_GINTMSK_RXFLVLM);

	 	// Clears all pending core interrupts.
	 WRITE_REG(USB_OTG_HS->GINTSTS, 0xFFFFFFFF);
 8000384:	4b0e      	ldr	r3, [pc, #56]	; (80003c0 <USB_Core_Init+0x88>)
 8000386:	f04f 32ff 	mov.w	r2, #4294967295
 800038a:	615a      	str	r2, [r3, #20]

	 // Unmasks USB global interrupt.
	 SET_BIT(USB_OTG_HS->GAHBCFG, USB_OTG_GAHBCFG_GINT);
 800038c:	4b0c      	ldr	r3, [pc, #48]	; (80003c0 <USB_Core_Init+0x88>)
 800038e:	689b      	ldr	r3, [r3, #8]
 8000390:	4a0b      	ldr	r2, [pc, #44]	; (80003c0 <USB_Core_Init+0x88>)
 8000392:	f043 0301 	orr.w	r3, r3, #1
 8000396:	6093      	str	r3, [r2, #8]

	 //Enable USB global interrupt
	 SET_BIT(USB_OTG_HS->GAHBCFG,USB_OTG_GAHBCFG_GINT);*/

	 // Unmasks transfer completed interrupts for all endpoints.
	 SET_BIT(USB_OTG_HS_DEVICE->DOEPMSK, USB_OTG_DOEPMSK_XFRCM);
 8000398:	4b0a      	ldr	r3, [pc, #40]	; (80003c4 <USB_Core_Init+0x8c>)
 800039a:	695b      	ldr	r3, [r3, #20]
 800039c:	4a09      	ldr	r2, [pc, #36]	; (80003c4 <USB_Core_Init+0x8c>)
 800039e:	f043 0301 	orr.w	r3, r3, #1
 80003a2:	6153      	str	r3, [r2, #20]
	 SET_BIT(USB_OTG_HS_DEVICE->DIEPMSK, USB_OTG_DIEPMSK_XFRCM);
 80003a4:	4b07      	ldr	r3, [pc, #28]	; (80003c4 <USB_Core_Init+0x8c>)
 80003a6:	691b      	ldr	r3, [r3, #16]
 80003a8:	4a06      	ldr	r2, [pc, #24]	; (80003c4 <USB_Core_Init+0x8c>)
 80003aa:	f043 0301 	orr.w	r3, r3, #1
 80003ae:	6113      	str	r3, [r2, #16]
}
 80003b0:	bf00      	nop
 80003b2:	46bd      	mov	sp, r7
 80003b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b8:	4770      	bx	lr
 80003ba:	bf00      	nop
 80003bc:	40023800 	.word	0x40023800
 80003c0:	40040000 	.word	0x40040000
 80003c4:	40040800 	.word	0x40040800
 80003c8:	800c3818 	.word	0x800c3818

080003cc <set_device_addr>:
 * @parem[in]		- address
 * @return			- none
 * @note			- none
 */
static void set_device_addr(uint8_t addr)
{
 80003cc:	b480      	push	{r7}
 80003ce:	b083      	sub	sp, #12
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	4603      	mov	r3, r0
 80003d4:	71fb      	strb	r3, [r7, #7]
	MODIFY_REG(USB_OTG_HS_DEVICE->DCFG,USB_OTG_DCFG_DAD,_VAL2FLD(USB_OTG_DCFG_DAD,addr));
 80003d6:	4b08      	ldr	r3, [pc, #32]	; (80003f8 <set_device_addr+0x2c>)
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	f423 62fe 	bic.w	r2, r3, #2032	; 0x7f0
 80003de:	79fb      	ldrb	r3, [r7, #7]
 80003e0:	011b      	lsls	r3, r3, #4
 80003e2:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80003e6:	4904      	ldr	r1, [pc, #16]	; (80003f8 <set_device_addr+0x2c>)
 80003e8:	4313      	orrs	r3, r2
 80003ea:	600b      	str	r3, [r1, #0]
}
 80003ec:	bf00      	nop
 80003ee:	370c      	adds	r7, #12
 80003f0:	46bd      	mov	sp, r7
 80003f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f6:	4770      	bx	lr
 80003f8:	40040800 	.word	0x40040800

080003fc <connect>:
 * @parem[in]		- none
 * @return			- none
 * @note			- none
 */
static void connect()
{
 80003fc:	b480      	push	{r7}
 80003fe:	af00      	add	r7, sp, #0
	//Power the transceiver on
	SET_BIT(USB_OTG_HS->GCCFG,USB_OTG_GCCFG_PWRDWN);
 8000400:	4b08      	ldr	r3, [pc, #32]	; (8000424 <connect+0x28>)
 8000402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000404:	4a07      	ldr	r2, [pc, #28]	; (8000424 <connect+0x28>)
 8000406:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800040a:	6393      	str	r3, [r2, #56]	; 0x38

	//Connect the device to the bus
	CLEAR_BIT(USB_OTG_HS_DEVICE->DCTL,USB_OTG_DCTL_SDIS);
 800040c:	4b06      	ldr	r3, [pc, #24]	; (8000428 <connect+0x2c>)
 800040e:	685b      	ldr	r3, [r3, #4]
 8000410:	4a05      	ldr	r2, [pc, #20]	; (8000428 <connect+0x2c>)
 8000412:	f023 0302 	bic.w	r3, r3, #2
 8000416:	6053      	str	r3, [r2, #4]
}
 8000418:	bf00      	nop
 800041a:	46bd      	mov	sp, r7
 800041c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000420:	4770      	bx	lr
 8000422:	bf00      	nop
 8000424:	40040000 	.word	0x40040000
 8000428:	40040800 	.word	0x40040800

0800042c <disconnect>:
 * @parem[in]		- none
 * @return			- none
 * @note			- none
 */
static void disconnect()
{
 800042c:	b480      	push	{r7}
 800042e:	af00      	add	r7, sp, #0
	//Disconnect the the device from the bus
	SET_BIT(USB_OTG_HS_DEVICE->DCTL,USB_OTG_DCTL_SDIS);
 8000430:	4b08      	ldr	r3, [pc, #32]	; (8000454 <disconnect+0x28>)
 8000432:	685b      	ldr	r3, [r3, #4]
 8000434:	4a07      	ldr	r2, [pc, #28]	; (8000454 <disconnect+0x28>)
 8000436:	f043 0302 	orr.w	r3, r3, #2
 800043a:	6053      	str	r3, [r2, #4]

	//Power the transceiver off
	CLEAR_BIT(USB_OTG_HS->GCCFG,USB_OTG_GCCFG_PWRDWN);
 800043c:	4b06      	ldr	r3, [pc, #24]	; (8000458 <disconnect+0x2c>)
 800043e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000440:	4a05      	ldr	r2, [pc, #20]	; (8000458 <disconnect+0x2c>)
 8000442:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000446:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000448:	bf00      	nop
 800044a:	46bd      	mov	sp, r7
 800044c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000450:	4770      	bx	lr
 8000452:	bf00      	nop
 8000454:	40040800 	.word	0x40040800
 8000458:	40040000 	.word	0x40040000

0800045c <flush_rxfifo>:
 * @parem[in]		- none
 * @return			- none
 * @note			- none
 */
static void flush_rxfifo()
{
 800045c:	b480      	push	{r7}
 800045e:	af00      	add	r7, sp, #0
	SET_BIT(USB_OTG_HS->GRSTCTL, USB_OTG_GRSTCTL_RXFFLSH);
 8000460:	4b05      	ldr	r3, [pc, #20]	; (8000478 <flush_rxfifo+0x1c>)
 8000462:	691b      	ldr	r3, [r3, #16]
 8000464:	4a04      	ldr	r2, [pc, #16]	; (8000478 <flush_rxfifo+0x1c>)
 8000466:	f043 0310 	orr.w	r3, r3, #16
 800046a:	6113      	str	r3, [r2, #16]
}
 800046c:	bf00      	nop
 800046e:	46bd      	mov	sp, r7
 8000470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000474:	4770      	bx	lr
 8000476:	bf00      	nop
 8000478:	40040000 	.word	0x40040000

0800047c <flush_txfifo>:
 * @parem[in]		- IN endpoint
 * @return			- none
 * @note			- none
 */
static void flush_txfifo(uint8_t endpoint_num)
{
 800047c:	b480      	push	{r7}
 800047e:	b083      	sub	sp, #12
 8000480:	af00      	add	r7, sp, #0
 8000482:	4603      	mov	r3, r0
 8000484:	71fb      	strb	r3, [r7, #7]
	//Select specific tx fifo to flush
	MODIFY_REG(USB_OTG_HS->GRSTCTL,USB_OTG_GRSTCTL_TXFNUM,_VAL2FLD(USB_OTG_GRSTCTL_TXFNUM, endpoint_num));
 8000486:	4b0b      	ldr	r3, [pc, #44]	; (80004b4 <flush_txfifo+0x38>)
 8000488:	691b      	ldr	r3, [r3, #16]
 800048a:	f423 62f8 	bic.w	r2, r3, #1984	; 0x7c0
 800048e:	79fb      	ldrb	r3, [r7, #7]
 8000490:	019b      	lsls	r3, r3, #6
 8000492:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8000496:	4907      	ldr	r1, [pc, #28]	; (80004b4 <flush_txfifo+0x38>)
 8000498:	4313      	orrs	r3, r2
 800049a:	610b      	str	r3, [r1, #16]

	//Trigger flush
	SET_BIT(USB_OTG_HS->GRSTCTL,USB_OTG_GRSTCTL_TXFFLSH);
 800049c:	4b05      	ldr	r3, [pc, #20]	; (80004b4 <flush_txfifo+0x38>)
 800049e:	691b      	ldr	r3, [r3, #16]
 80004a0:	4a04      	ldr	r2, [pc, #16]	; (80004b4 <flush_txfifo+0x38>)
 80004a2:	f043 0320 	orr.w	r3, r3, #32
 80004a6:	6113      	str	r3, [r2, #16]
}
 80004a8:	bf00      	nop
 80004aa:	370c      	adds	r7, #12
 80004ac:	46bd      	mov	sp, r7
 80004ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b2:	4770      	bx	lr
 80004b4:	40040000 	.word	0x40040000

080004b8 <config_endpoint0>:
 * @parem[in]		- none
 * @return			- none
 * @note			- none
 */
static void config_endpoint0(uint16_t endpoint_size)
{
 80004b8:	b5b0      	push	{r4, r5, r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
 80004be:	4603      	mov	r3, r0
 80004c0:	80fb      	strh	r3, [r7, #6]
	//Unmasks interrupts of endpoint0 IN (bit 0) /OUT (bit 16)
	SET_BIT(USB_OTG_HS_DEVICE->DAINTMSK,(1 << 0| 1 << 16));
 80004c2:	4b1b      	ldr	r3, [pc, #108]	; (8000530 <config_endpoint0+0x78>)
 80004c4:	69db      	ldr	r3, [r3, #28]
 80004c6:	4a1a      	ldr	r2, [pc, #104]	; (8000530 <config_endpoint0+0x78>)
 80004c8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80004cc:	61d3      	str	r3, [r2, #28]

	//Config max packet size,
	MODIFY_REG(IN_ENDPOINT(0)->DIEPCTL,USB_OTG_DIEPCTL_MPSIZ,_VAL2FLD(USB_OTG_DIEPCTL_MPSIZ,endpoint_size));
 80004ce:	2000      	movs	r0, #0
 80004d0:	f7ff fede 	bl	8000290 <IN_ENDPOINT>
 80004d4:	4603      	mov	r3, r0
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	f423 64ff 	bic.w	r4, r3, #2040	; 0x7f8
 80004dc:	f024 0407 	bic.w	r4, r4, #7
 80004e0:	88fb      	ldrh	r3, [r7, #6]
 80004e2:	f3c3 050a 	ubfx	r5, r3, #0, #11
 80004e6:	2000      	movs	r0, #0
 80004e8:	f7ff fed2 	bl	8000290 <IN_ENDPOINT>
 80004ec:	4602      	mov	r2, r0
 80004ee:	ea44 0305 	orr.w	r3, r4, r5
 80004f2:	6013      	str	r3, [r2, #0]

	//activate endpoint configuration and sets endpoint handshake to NAK (not ready to send data)
	SET_BIT(IN_ENDPOINT(0)->DIEPCTL,USB_OTG_DIEPCTL_USBAEP|USB_OTG_DIEPCTL_SNAK);
 80004f4:	2000      	movs	r0, #0
 80004f6:	f7ff fecb 	bl	8000290 <IN_ENDPOINT>
 80004fa:	4602      	mov	r2, r0
 80004fc:	6813      	ldr	r3, [r2, #0]
 80004fe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000502:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000506:	6013      	str	r3, [r2, #0]

	//Clear NAK and enables endpoint data transmission
	SET_BIT(OUT_ENDPOINT(0)->DOEPCTL,USB_OTG_DOEPCTL_EPENA|USB_OTG_DOEPCTL_CNAK);
 8000508:	2000      	movs	r0, #0
 800050a:	f7ff fed1 	bl	80002b0 <OUT_ENDPOINT>
 800050e:	4603      	mov	r3, r0
 8000510:	681a      	ldr	r2, [r3, #0]
 8000512:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8000516:	601a      	str	r2, [r3, #0]

	//USB Full speed devices has maximum packet size of 64 Bytes
	configure_rxfifo_size(64);
 8000518:	2040      	movs	r0, #64	; 0x40
 800051a:	f000 f9c3 	bl	80008a4 <configure_rxfifo_size>
	configure_txfifo_size(0,endpoint_size);
 800051e:	88fb      	ldrh	r3, [r7, #6]
 8000520:	4619      	mov	r1, r3
 8000522:	2000      	movs	r0, #0
 8000524:	f000 f988 	bl	8000838 <configure_txfifo_size>

}
 8000528:	bf00      	nop
 800052a:	3708      	adds	r7, #8
 800052c:	46bd      	mov	sp, r7
 800052e:	bdb0      	pop	{r4, r5, r7, pc}
 8000530:	40040800 	.word	0x40040800

08000534 <USBReset_handler>:
 * @parem[in]		- none
 * @return			- none
 * @note			- none
 */
static void USBReset_handler()
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
	log_info("USB reset signal was detected.");
 800053a:	480a      	ldr	r0, [pc, #40]	; (8000564 <USBReset_handler+0x30>)
 800053c:	f000 fba6 	bl	8000c8c <log_info>
	for(uint8_t i = 0 ; i <=ENDPOINT_COUNT; i++)
 8000540:	2300      	movs	r3, #0
 8000542:	71fb      	strb	r3, [r7, #7]
 8000544:	e006      	b.n	8000554 <USBReset_handler+0x20>
	{
		deconfigure_in_endpoint(i);
 8000546:	79fb      	ldrb	r3, [r7, #7]
 8000548:	4618      	mov	r0, r3
 800054a:	f000 f8d5 	bl	80006f8 <deconfigure_in_endpoint>
	for(uint8_t i = 0 ; i <=ENDPOINT_COUNT; i++)
 800054e:	79fb      	ldrb	r3, [r7, #7]
 8000550:	3301      	adds	r3, #1
 8000552:	71fb      	strb	r3, [r7, #7]
 8000554:	79fb      	ldrb	r3, [r7, #7]
 8000556:	2b06      	cmp	r3, #6
 8000558:	d9f5      	bls.n	8000546 <USBReset_handler+0x12>
	}
}
 800055a:	bf00      	nop
 800055c:	3708      	adds	r7, #8
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	08001e9c 	.word	0x08001e9c

08000568 <EnumerationDone_handler>:
 * @parem[in]		- none
 * @return			- none
 * @note			- none
 */
static void EnumerationDone_handler()
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
	log_info("USB device speed enumeration done.");
 800056c:	4803      	ldr	r0, [pc, #12]	; (800057c <EnumerationDone_handler+0x14>)
 800056e:	f000 fb8d 	bl	8000c8c <log_info>
	//temp value used of 8
	config_endpoint0(8);
 8000572:	2008      	movs	r0, #8
 8000574:	f7ff ffa0 	bl	80004b8 <config_endpoint0>
}
 8000578:	bf00      	nop
 800057a:	bd80      	pop	{r7, pc}
 800057c:	08001ebc 	.word	0x08001ebc

08000580 <RxFifoNonEmpty_handler>:
 * @parem[in]		- none
 * @return			- none
 * @note			- none
 */
static void RxFifoNonEmpty_handler()
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
	//Pop the metadata info from the RxFIFO
	uint32_t recieve_status = USB_OTG_HS_GLOBAL->GRXSTSP;
 8000586:	4b22      	ldr	r3, [pc, #136]	; (8000610 <RxFifoNonEmpty_handler+0x90>)
 8000588:	6a1b      	ldr	r3, [r3, #32]
 800058a:	607b      	str	r3, [r7, #4]

	//extract which end point received the data
	uint8_t endpoint_num= _FLD2VAL(USB_OTG_GRXSTSP_EPNUM,recieve_status);
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	b2db      	uxtb	r3, r3
 8000590:	f003 030f 	and.w	r3, r3, #15
 8000594:	70fb      	strb	r3, [r7, #3]
	//extract number of bytes received
	uint8_t bcnt = _FLD2VAL(USB_OTG_GRXSTSP_BCNT,recieve_status);
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	091b      	lsrs	r3, r3, #4
 800059a:	70bb      	strb	r3, [r7, #2]
	//extract the status of received packet
	uint8_t pckstats = _FLD2VAL(USB_OTG_GRXSTSP_PKTSTS,recieve_status);
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	0c5b      	lsrs	r3, r3, #17
 80005a0:	b2db      	uxtb	r3, r3
 80005a2:	f003 030f 	and.w	r3, r3, #15
 80005a6:	707b      	strb	r3, [r7, #1]

	switch(pckstats)
 80005a8:	787b      	ldrb	r3, [r7, #1]
 80005aa:	3b02      	subs	r3, #2
 80005ac:	2b04      	cmp	r3, #4
 80005ae:	d82a      	bhi.n	8000606 <RxFifoNonEmpty_handler+0x86>
 80005b0:	a201      	add	r2, pc, #4	; (adr r2, 80005b8 <RxFifoNonEmpty_handler+0x38>)
 80005b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005b6:	bf00      	nop
 80005b8:	08000605 	.word	0x08000605
 80005bc:	080005f1 	.word	0x080005f1
 80005c0:	080005dd 	.word	0x080005dd
 80005c4:	08000607 	.word	0x08000607
 80005c8:	080005cd 	.word	0x080005cd
	{
		//Setup packet (include data)
		case 0x06:
			usb_events.on_setup_data_received(endpoint_num,bcnt);
 80005cc:	4b11      	ldr	r3, [pc, #68]	; (8000614 <RxFifoNonEmpty_handler+0x94>)
 80005ce:	685b      	ldr	r3, [r3, #4]
 80005d0:	78ba      	ldrb	r2, [r7, #2]
 80005d2:	b291      	uxth	r1, r2
 80005d4:	78fa      	ldrb	r2, [r7, #3]
 80005d6:	4610      	mov	r0, r2
 80005d8:	4798      	blx	r3
			break;
 80005da:	e014      	b.n	8000606 <RxFifoNonEmpty_handler+0x86>
		case 0x02:
			break;
		//SETUP stage has completed
		case 0x04:
			//Re-enable the transmission on endpoint
			SET_BIT(OUT_ENDPOINT(endpoint_num)->DOEPCTL,USB_OTG_DOEPCTL_CNAK|USB_OTG_DOEPCTL_EPENA);
 80005dc:	78fb      	ldrb	r3, [r7, #3]
 80005de:	4618      	mov	r0, r3
 80005e0:	f7ff fe66 	bl	80002b0 <OUT_ENDPOINT>
 80005e4:	4603      	mov	r3, r0
 80005e6:	681a      	ldr	r2, [r3, #0]
 80005e8:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 80005ec:	601a      	str	r2, [r3, #0]
			break;
 80005ee:	e00a      	b.n	8000606 <RxFifoNonEmpty_handler+0x86>
		//OUT transfer has completed
		case 0x03:
			//Re-enable the transmission on endpoint
			SET_BIT(OUT_ENDPOINT(endpoint_num)->DOEPCTL,USB_OTG_DOEPCTL_CNAK|USB_OTG_DOEPCTL_EPENA);
 80005f0:	78fb      	ldrb	r3, [r7, #3]
 80005f2:	4618      	mov	r0, r3
 80005f4:	f7ff fe5c 	bl	80002b0 <OUT_ENDPOINT>
 80005f8:	4603      	mov	r3, r0
 80005fa:	681a      	ldr	r2, [r3, #0]
 80005fc:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8000600:	601a      	str	r2, [r3, #0]
			break;
 8000602:	e000      	b.n	8000606 <RxFifoNonEmpty_handler+0x86>
			break;
 8000604:	bf00      	nop

	}
}
 8000606:	bf00      	nop
 8000608:	3708      	adds	r7, #8
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	40040000 	.word	0x40040000
 8000614:	20000000 	.word	0x20000000

08000618 <configure_in_endpoint>:
 * @parem[in]		- none
 * @return			- none
 * @note			- none
 */
static void configure_in_endpoint(uint8_t endpoint_num,UsbEndpointType endpoint_type, uint16_t endpoint_size)
{
 8000618:	b5b0      	push	{r4, r5, r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	4603      	mov	r3, r0
 8000620:	71fb      	strb	r3, [r7, #7]
 8000622:	460b      	mov	r3, r1
 8000624:	71bb      	strb	r3, [r7, #6]
 8000626:	4613      	mov	r3, r2
 8000628:	80bb      	strh	r3, [r7, #4]
	//Unmasks IN endpoint interrupts
	SET_BIT(USB_OTG_HS_DEVICE->DAINTMSK,1 << endpoint_num);
 800062a:	4b32      	ldr	r3, [pc, #200]	; (80006f4 <configure_in_endpoint+0xdc>)
 800062c:	69db      	ldr	r3, [r3, #28]
 800062e:	79fa      	ldrb	r2, [r7, #7]
 8000630:	2101      	movs	r1, #1
 8000632:	fa01 f202 	lsl.w	r2, r1, r2
 8000636:	4611      	mov	r1, r2
 8000638:	4a2e      	ldr	r2, [pc, #184]	; (80006f4 <configure_in_endpoint+0xdc>)
 800063a:	430b      	orrs	r3, r1
 800063c:	61d3      	str	r3, [r2, #28]

	//Config max packet size
	MODIFY_REG(IN_ENDPOINT(endpoint_num)->DIEPCTL,USB_OTG_DIEPCTL_MPSIZ,_VAL2FLD(USB_OTG_DIEPCTL_MPSIZ,endpoint_size));
 800063e:	79fb      	ldrb	r3, [r7, #7]
 8000640:	4618      	mov	r0, r3
 8000642:	f7ff fe25 	bl	8000290 <IN_ENDPOINT>
 8000646:	4603      	mov	r3, r0
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	f423 64ff 	bic.w	r4, r3, #2040	; 0x7f8
 800064e:	f024 0407 	bic.w	r4, r4, #7
 8000652:	88bb      	ldrh	r3, [r7, #4]
 8000654:	f3c3 050a 	ubfx	r5, r3, #0, #11
 8000658:	79fb      	ldrb	r3, [r7, #7]
 800065a:	4618      	mov	r0, r3
 800065c:	f7ff fe18 	bl	8000290 <IN_ENDPOINT>
 8000660:	4602      	mov	r2, r0
 8000662:	ea44 0305 	orr.w	r3, r4, r5
 8000666:	6013      	str	r3, [r2, #0]

	//Config endpoint type
	MODIFY_REG(IN_ENDPOINT(endpoint_num)->DIEPCTL,USB_OTG_DIEPCTL_EPTYP,_VAL2FLD(USB_OTG_DIEPCTL_EPTYP,endpoint_type));
 8000668:	79fb      	ldrb	r3, [r7, #7]
 800066a:	4618      	mov	r0, r3
 800066c:	f7ff fe10 	bl	8000290 <IN_ENDPOINT>
 8000670:	4603      	mov	r3, r0
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	f423 2540 	bic.w	r5, r3, #786432	; 0xc0000
 8000678:	79bb      	ldrb	r3, [r7, #6]
 800067a:	049b      	lsls	r3, r3, #18
 800067c:	f403 2440 	and.w	r4, r3, #786432	; 0xc0000
 8000680:	79fb      	ldrb	r3, [r7, #7]
 8000682:	4618      	mov	r0, r3
 8000684:	f7ff fe04 	bl	8000290 <IN_ENDPOINT>
 8000688:	4602      	mov	r2, r0
 800068a:	ea45 0304 	orr.w	r3, r5, r4
 800068e:	6013      	str	r3, [r2, #0]

	//set the endpoint data PID
	SET_BIT(IN_ENDPOINT(endpoint_num)->DIEPCTL,USB_OTG_DIEPCTL_SD0PID_SEVNFRM);
 8000690:	79fb      	ldrb	r3, [r7, #7]
 8000692:	4618      	mov	r0, r3
 8000694:	f7ff fdfc 	bl	8000290 <IN_ENDPOINT>
 8000698:	4603      	mov	r3, r0
 800069a:	681a      	ldr	r2, [r3, #0]
 800069c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80006a0:	601a      	str	r2, [r3, #0]

	//Assign fifo number to same endpoint number
	MODIFY_REG(IN_ENDPOINT(endpoint_num)->DIEPCTL,USB_OTG_DIEPCTL_TXFNUM,_VAL2FLD(USB_OTG_DIEPCTL_TXFNUM,endpoint_num));
 80006a2:	79fb      	ldrb	r3, [r7, #7]
 80006a4:	4618      	mov	r0, r3
 80006a6:	f7ff fdf3 	bl	8000290 <IN_ENDPOINT>
 80006aa:	4603      	mov	r3, r0
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	f023 7570 	bic.w	r5, r3, #62914560	; 0x3c00000
 80006b2:	79fb      	ldrb	r3, [r7, #7]
 80006b4:	059b      	lsls	r3, r3, #22
 80006b6:	f003 7470 	and.w	r4, r3, #62914560	; 0x3c00000
 80006ba:	79fb      	ldrb	r3, [r7, #7]
 80006bc:	4618      	mov	r0, r3
 80006be:	f7ff fde7 	bl	8000290 <IN_ENDPOINT>
 80006c2:	4602      	mov	r2, r0
 80006c4:	ea45 0304 	orr.w	r3, r5, r4
 80006c8:	6013      	str	r3, [r2, #0]

	//activate endpoint configuration and sets endpoint handshake to NAK (not ready to send data)
	SET_BIT(IN_ENDPOINT(endpoint_num)->DIEPCTL,USB_OTG_DIEPCTL_USBAEP|USB_OTG_DIEPCTL_SNAK);
 80006ca:	79fb      	ldrb	r3, [r7, #7]
 80006cc:	4618      	mov	r0, r3
 80006ce:	f7ff fddf 	bl	8000290 <IN_ENDPOINT>
 80006d2:	4602      	mov	r2, r0
 80006d4:	6813      	ldr	r3, [r2, #0]
 80006d6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80006da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006de:	6013      	str	r3, [r2, #0]

	configure_txfifo_size(endpoint_num,endpoint_size);
 80006e0:	88ba      	ldrh	r2, [r7, #4]
 80006e2:	79fb      	ldrb	r3, [r7, #7]
 80006e4:	4611      	mov	r1, r2
 80006e6:	4618      	mov	r0, r3
 80006e8:	f000 f8a6 	bl	8000838 <configure_txfifo_size>
}
 80006ec:	bf00      	nop
 80006ee:	3708      	adds	r7, #8
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bdb0      	pop	{r4, r5, r7, pc}
 80006f4:	40040800 	.word	0x40040800

080006f8 <deconfigure_in_endpoint>:
 * @parem[in]		- none
 * @return			- none
 * @note			- none
 */
static void deconfigure_in_endpoint(uint8_t endpoint_num)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b084      	sub	sp, #16
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	4603      	mov	r3, r0
 8000700:	71fb      	strb	r3, [r7, #7]
	USB_OTG_INEndpointTypeDef *in_endpoint = IN_ENDPOINT(endpoint_num);
 8000702:	79fb      	ldrb	r3, [r7, #7]
 8000704:	4618      	mov	r0, r3
 8000706:	f7ff fdc3 	bl	8000290 <IN_ENDPOINT>
 800070a:	60f8      	str	r0, [r7, #12]
	USB_OTG_OUTEndpointTypeDef *out_endpoint = OUT_ENDPOINT(endpoint_num);
 800070c:	79fb      	ldrb	r3, [r7, #7]
 800070e:	4618      	mov	r0, r3
 8000710:	f7ff fdce 	bl	80002b0 <OUT_ENDPOINT>
 8000714:	60b8      	str	r0, [r7, #8]

	//masks interrupts of IN/OUT endpoint
	CLEAR_BIT(USB_OTG_HS_DEVICE->DAINTMSK,(1 << endpoint_num| 1 << (16 << endpoint_num)));
 8000716:	4b27      	ldr	r3, [pc, #156]	; (80007b4 <deconfigure_in_endpoint+0xbc>)
 8000718:	69db      	ldr	r3, [r3, #28]
 800071a:	79fa      	ldrb	r2, [r7, #7]
 800071c:	2101      	movs	r1, #1
 800071e:	4091      	lsls	r1, r2
 8000720:	79fa      	ldrb	r2, [r7, #7]
 8000722:	2010      	movs	r0, #16
 8000724:	fa00 f202 	lsl.w	r2, r0, r2
 8000728:	2001      	movs	r0, #1
 800072a:	fa00 f202 	lsl.w	r2, r0, r2
 800072e:	430a      	orrs	r2, r1
 8000730:	43d2      	mvns	r2, r2
 8000732:	4611      	mov	r1, r2
 8000734:	4a1f      	ldr	r2, [pc, #124]	; (80007b4 <deconfigure_in_endpoint+0xbc>)
 8000736:	400b      	ands	r3, r1
 8000738:	61d3      	str	r3, [r2, #28]

	//Clear pending endpoint interrupts
	SET_BIT(in_endpoint->DIEPINT, 0x29FF);
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	689b      	ldr	r3, [r3, #8]
 800073e:	f443 5327 	orr.w	r3, r3, #10688	; 0x29c0
 8000742:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8000746:	68fa      	ldr	r2, [r7, #12]
 8000748:	6093      	str	r3, [r2, #8]
	SET_BIT(out_endpoint->DOEPINT, 0x715F);
 800074a:	68bb      	ldr	r3, [r7, #8]
 800074c:	689b      	ldr	r3, [r3, #8]
 800074e:	f443 43e2 	orr.w	r3, r3, #28928	; 0x7100
 8000752:	f043 035f 	orr.w	r3, r3, #95	; 0x5f
 8000756:	68ba      	ldr	r2, [r7, #8]
 8000758:	6093      	str	r3, [r2, #8]

	//Check if transmission is enabled
	if(in_endpoint->DIEPCTL & USB_OTG_DIEPCTL_EPENA)
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	2b00      	cmp	r3, #0
 8000760:	da05      	bge.n	800076e <deconfigure_in_endpoint+0x76>
	{
		//Disable endpoint transmission
		SET_BIT(in_endpoint->DIEPCTL,USB_OTG_DIEPCTL_EPDIS);
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	601a      	str	r2, [r3, #0]
	}

	//Disable IN endpoints
	CLEAR_BIT(in_endpoint->DIEPCTL,USB_OTG_DIEPCTL_USBAEP);
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000776:	68fb      	ldr	r3, [r7, #12]
 8000778:	601a      	str	r2, [r3, #0]

	if(endpoint_num != 0)
 800077a:	79fb      	ldrb	r3, [r7, #7]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d009      	beq.n	8000794 <deconfigure_in_endpoint+0x9c>
	{
		//Check if transmission is enabled
		if(out_endpoint->DOEPCTL & USB_OTG_DOEPCTL_EPENA)
 8000780:	68bb      	ldr	r3, [r7, #8]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	2b00      	cmp	r3, #0
 8000786:	da05      	bge.n	8000794 <deconfigure_in_endpoint+0x9c>
		{
			//Disable endpoint transmission
			SET_BIT(out_endpoint->DOEPCTL,USB_OTG_DOEPCTL_EPDIS);
 8000788:	68bb      	ldr	r3, [r7, #8]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8000790:	68bb      	ldr	r3, [r7, #8]
 8000792:	601a      	str	r2, [r3, #0]
		}
	}
	//Disable OUT endpoints
	CLEAR_BIT(out_endpoint->DOEPCTL,USB_OTG_DOEPCTL_USBAEP);
 8000794:	68bb      	ldr	r3, [r7, #8]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800079c:	68bb      	ldr	r3, [r7, #8]
 800079e:	601a      	str	r2, [r3, #0]

	//Flush the FIFOS.
	flush_txfifo(endpoint_num);
 80007a0:	79fb      	ldrb	r3, [r7, #7]
 80007a2:	4618      	mov	r0, r3
 80007a4:	f7ff fe6a 	bl	800047c <flush_txfifo>
	flush_rxfifo();
 80007a8:	f7ff fe58 	bl	800045c <flush_rxfifo>
}
 80007ac:	bf00      	nop
 80007ae:	3710      	adds	r7, #16
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	40040800 	.word	0x40040800

080007b8 <refresh_fifo_start_addr>:
 * @parem[in]		- none
 * @return			- none
 * @note			- none
 */
static void refresh_fifo_start_addr(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
	//starting address begins after the region of RxFIFO
	uint32_t start_addr = _FLD2VAL(USB_OTG_GRXFSIZ_RXFD,USB_OTG_HS->GRXFSIZ)*4;
 80007be:	4b1d      	ldr	r3, [pc, #116]	; (8000834 <refresh_fifo_start_addr+0x7c>)
 80007c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007c2:	b29b      	uxth	r3, r3
 80007c4:	009b      	lsls	r3, r3, #2
 80007c6:	607b      	str	r3, [r7, #4]

	//Update the start address of TxFIFO0.
	MODIFY_REG(USB_OTG_HS->DIEPTXF0_HNPTXFSIZ,USB_OTG_TX0FSA,_VAL2FLD(USB_OTG_TX0FSA,start_addr));
 80007c8:	4b1a      	ldr	r3, [pc, #104]	; (8000834 <refresh_fifo_start_addr+0x7c>)
 80007ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007cc:	0c1b      	lsrs	r3, r3, #16
 80007ce:	041b      	lsls	r3, r3, #16
 80007d0:	687a      	ldr	r2, [r7, #4]
 80007d2:	b292      	uxth	r2, r2
 80007d4:	4917      	ldr	r1, [pc, #92]	; (8000834 <refresh_fifo_start_addr+0x7c>)
 80007d6:	4313      	orrs	r3, r2
 80007d8:	628b      	str	r3, [r1, #40]	; 0x28

	// Updates the start addresses of the rest TxFIFOs.
	for (uint8_t txfifo_number = 0; txfifo_number < ENDPOINT_COUNT - 1; txfifo_number++)
 80007da:	2300      	movs	r3, #0
 80007dc:	70fb      	strb	r3, [r7, #3]
 80007de:	e020      	b.n	8000822 <refresh_fifo_start_addr+0x6a>
	{
		MODIFY_REG(USB_OTG_HS->DIEPTXF[txfifo_number],USB_OTG_NPTXFSA,_VAL2FLD(USB_OTG_NPTXFSA, start_addr));
 80007e0:	4a14      	ldr	r2, [pc, #80]	; (8000834 <refresh_fifo_start_addr+0x7c>)
 80007e2:	78fb      	ldrb	r3, [r7, #3]
 80007e4:	3340      	adds	r3, #64	; 0x40
 80007e6:	009b      	lsls	r3, r3, #2
 80007e8:	4413      	add	r3, r2
 80007ea:	685b      	ldr	r3, [r3, #4]
 80007ec:	0c1b      	lsrs	r3, r3, #16
 80007ee:	041b      	lsls	r3, r3, #16
 80007f0:	687a      	ldr	r2, [r7, #4]
 80007f2:	b292      	uxth	r2, r2
 80007f4:	480f      	ldr	r0, [pc, #60]	; (8000834 <refresh_fifo_start_addr+0x7c>)
 80007f6:	78f9      	ldrb	r1, [r7, #3]
 80007f8:	431a      	orrs	r2, r3
 80007fa:	f101 0340 	add.w	r3, r1, #64	; 0x40
 80007fe:	009b      	lsls	r3, r3, #2
 8000800:	4403      	add	r3, r0
 8000802:	605a      	str	r2, [r3, #4]
		start_addr += _FLD2VAL(USB_OTG_NPTXFD, USB_OTG_HS->DIEPTXF[txfifo_number]) * 4;
 8000804:	4a0b      	ldr	r2, [pc, #44]	; (8000834 <refresh_fifo_start_addr+0x7c>)
 8000806:	78fb      	ldrb	r3, [r7, #3]
 8000808:	3340      	adds	r3, #64	; 0x40
 800080a:	009b      	lsls	r3, r3, #2
 800080c:	4413      	add	r3, r2
 800080e:	685b      	ldr	r3, [r3, #4]
 8000810:	0c1b      	lsrs	r3, r3, #16
 8000812:	b29b      	uxth	r3, r3
 8000814:	009b      	lsls	r3, r3, #2
 8000816:	687a      	ldr	r2, [r7, #4]
 8000818:	4413      	add	r3, r2
 800081a:	607b      	str	r3, [r7, #4]
	for (uint8_t txfifo_number = 0; txfifo_number < ENDPOINT_COUNT - 1; txfifo_number++)
 800081c:	78fb      	ldrb	r3, [r7, #3]
 800081e:	3301      	adds	r3, #1
 8000820:	70fb      	strb	r3, [r7, #3]
 8000822:	78fb      	ldrb	r3, [r7, #3]
 8000824:	2b04      	cmp	r3, #4
 8000826:	d9db      	bls.n	80007e0 <refresh_fifo_start_addr+0x28>
	}
}
 8000828:	bf00      	nop
 800082a:	370c      	adds	r7, #12
 800082c:	46bd      	mov	sp, r7
 800082e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000832:	4770      	bx	lr
 8000834:	40040000 	.word	0x40040000

08000838 <configure_txfifo_size>:
 * @parem[in]		- none
 * @return			- none
 * @note			- none
 */
static void configure_txfifo_size(uint8_t endpoint_num,uint16_t size)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	4603      	mov	r3, r0
 8000840:	460a      	mov	r2, r1
 8000842:	71fb      	strb	r3, [r7, #7]
 8000844:	4613      	mov	r3, r2
 8000846:	80bb      	strh	r3, [r7, #4]
	//Get the fifo size in terms of 32bit words
	size = (size + 3) / 4;
 8000848:	88bb      	ldrh	r3, [r7, #4]
 800084a:	3303      	adds	r3, #3
 800084c:	2b00      	cmp	r3, #0
 800084e:	da00      	bge.n	8000852 <configure_txfifo_size+0x1a>
 8000850:	3303      	adds	r3, #3
 8000852:	109b      	asrs	r3, r3, #2
 8000854:	80bb      	strh	r3, [r7, #4]

	//Configure the depth of the fifo
	if(endpoint_num == 0)
 8000856:	79fb      	ldrb	r3, [r7, #7]
 8000858:	2b00      	cmp	r3, #0
 800085a:	d108      	bne.n	800086e <configure_txfifo_size+0x36>
	{
		MODIFY_REG(USB_OTG_HS->DIEPTXF0_HNPTXFSIZ,USB_OTG_TX0FD,_VAL2FLD(USB_OTG_TX0FD,size));
 800085c:	4b10      	ldr	r3, [pc, #64]	; (80008a0 <configure_txfifo_size+0x68>)
 800085e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000860:	b29a      	uxth	r2, r3
 8000862:	88bb      	ldrh	r3, [r7, #4]
 8000864:	041b      	lsls	r3, r3, #16
 8000866:	490e      	ldr	r1, [pc, #56]	; (80008a0 <configure_txfifo_size+0x68>)
 8000868:	4313      	orrs	r3, r2
 800086a:	628b      	str	r3, [r1, #40]	; 0x28
 800086c:	e011      	b.n	8000892 <configure_txfifo_size+0x5a>
	}
	else
	{
		MODIFY_REG(USB_OTG_HS->DIEPTXF[endpoint_num -1],USB_OTG_NPTXFD,_VAL2FLD(USB_OTG_NPTXFD,size));
 800086e:	4a0c      	ldr	r2, [pc, #48]	; (80008a0 <configure_txfifo_size+0x68>)
 8000870:	79fb      	ldrb	r3, [r7, #7]
 8000872:	3b01      	subs	r3, #1
 8000874:	3340      	adds	r3, #64	; 0x40
 8000876:	009b      	lsls	r3, r3, #2
 8000878:	4413      	add	r3, r2
 800087a:	685b      	ldr	r3, [r3, #4]
 800087c:	b299      	uxth	r1, r3
 800087e:	88bb      	ldrh	r3, [r7, #4]
 8000880:	041a      	lsls	r2, r3, #16
 8000882:	4807      	ldr	r0, [pc, #28]	; (80008a0 <configure_txfifo_size+0x68>)
 8000884:	79fb      	ldrb	r3, [r7, #7]
 8000886:	3b01      	subs	r3, #1
 8000888:	430a      	orrs	r2, r1
 800088a:	3340      	adds	r3, #64	; 0x40
 800088c:	009b      	lsls	r3, r3, #2
 800088e:	4403      	add	r3, r0
 8000890:	605a      	str	r2, [r3, #4]
	}
	refresh_fifo_start_addr();
 8000892:	f7ff ff91 	bl	80007b8 <refresh_fifo_start_addr>
}
 8000896:	bf00      	nop
 8000898:	3708      	adds	r7, #8
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	40040000 	.word	0x40040000

080008a4 <configure_rxfifo_size>:
 * @parem[in]		- none
 * @return			- none
 * @note			- none
 */
static void configure_rxfifo_size(uint16_t size)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	4603      	mov	r3, r0
 80008ac:	80fb      	strh	r3, [r7, #6]
	size = 10 + (2* ((size/4) + 1 ));
 80008ae:	88fb      	ldrh	r3, [r7, #6]
 80008b0:	089b      	lsrs	r3, r3, #2
 80008b2:	b29b      	uxth	r3, r3
 80008b4:	3306      	adds	r3, #6
 80008b6:	b29b      	uxth	r3, r3
 80008b8:	005b      	lsls	r3, r3, #1
 80008ba:	80fb      	strh	r3, [r7, #6]

	//Configure the depth of the fifo
	MODIFY_REG(USB_OTG_HS->GRXFSIZ,USB_OTG_GRXFSIZ_RXFD,_VAL2FLD(USB_OTG_GRXFSIZ_RXFD,size));
 80008bc:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <configure_rxfifo_size+0x34>)
 80008be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008c0:	0c1b      	lsrs	r3, r3, #16
 80008c2:	041b      	lsls	r3, r3, #16
 80008c4:	88fa      	ldrh	r2, [r7, #6]
 80008c6:	4904      	ldr	r1, [pc, #16]	; (80008d8 <configure_rxfifo_size+0x34>)
 80008c8:	4313      	orrs	r3, r2
 80008ca:	624b      	str	r3, [r1, #36]	; 0x24
	refresh_fifo_start_addr();
 80008cc:	f7ff ff74 	bl	80007b8 <refresh_fifo_start_addr>
}
 80008d0:	bf00      	nop
 80008d2:	3708      	adds	r7, #8
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	40040000 	.word	0x40040000

080008dc <read_packet>:
 * @parem[in]		- none
 * @return			- none
 * @note			- none
 */
static void read_packet(void *buffer, uint16_t size)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b084      	sub	sp, #16
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
 80008e4:	460b      	mov	r3, r1
 80008e6:	807b      	strh	r3, [r7, #2]
	//Only one RxFIFO
	volatile uint32_t *fifo = FIFO(0);
 80008e8:	2000      	movs	r0, #0
 80008ea:	f7ff fcf1 	bl	80002d0 <FIFO>
 80008ee:	60b8      	str	r0, [r7, #8]
	uint32_t data;

	for(;size >=4; size-=4, buffer +=4)
 80008f0:	e00b      	b.n	800090a <read_packet+0x2e>
	{
		//Pop 32bit word from the que
		data = *(fifo);
 80008f2:	68bb      	ldr	r3, [r7, #8]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	60fb      	str	r3, [r7, #12]
		//Store the data in the buffer
		*((uint32_t*)buffer) = data;
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	68fa      	ldr	r2, [r7, #12]
 80008fc:	601a      	str	r2, [r3, #0]
	for(;size >=4; size-=4, buffer +=4)
 80008fe:	887b      	ldrh	r3, [r7, #2]
 8000900:	3b04      	subs	r3, #4
 8000902:	807b      	strh	r3, [r7, #2]
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	3304      	adds	r3, #4
 8000908:	607b      	str	r3, [r7, #4]
 800090a:	887b      	ldrh	r3, [r7, #2]
 800090c:	2b03      	cmp	r3, #3
 800090e:	d8f0      	bhi.n	80008f2 <read_packet+0x16>
	}

	if(size > 0)
 8000910:	887b      	ldrh	r3, [r7, #2]
 8000912:	2b00      	cmp	r3, #0
 8000914:	d010      	beq.n	8000938 <read_packet+0x5c>
	{
		data = *(fifo);
 8000916:	68bb      	ldr	r3, [r7, #8]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	60fb      	str	r3, [r7, #12]
		for(;size >= 0; size--, buffer++, data >>= 8)
		{
			//Store the remaining data in the buffer with correct alignment
			*((uint8_t*)buffer) = 0xFF & data;//?? Wrong aligment?
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	b2da      	uxtb	r2, r3
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	701a      	strb	r2, [r3, #0]
		for(;size >= 0; size--, buffer++, data >>= 8)
 8000924:	887b      	ldrh	r3, [r7, #2]
 8000926:	3b01      	subs	r3, #1
 8000928:	807b      	strh	r3, [r7, #2]
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	3301      	adds	r3, #1
 800092e:	607b      	str	r3, [r7, #4]
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	0a1b      	lsrs	r3, r3, #8
 8000934:	60fb      	str	r3, [r7, #12]
			*((uint8_t*)buffer) = 0xFF & data;//?? Wrong aligment?
 8000936:	e7f1      	b.n	800091c <read_packet+0x40>
		}
	}
}
 8000938:	bf00      	nop
 800093a:	3710      	adds	r7, #16
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}

08000940 <write_packet>:
 * @parem[in]		- none
 * @return			- none
 * @note			- none
 */
static void write_packet(uint8_t endpoint_num, void const *buffer, uint16_t size)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b084      	sub	sp, #16
 8000944:	af00      	add	r7, sp, #0
 8000946:	4603      	mov	r3, r0
 8000948:	6039      	str	r1, [r7, #0]
 800094a:	71fb      	strb	r3, [r7, #7]
 800094c:	4613      	mov	r3, r2
 800094e:	80bb      	strh	r3, [r7, #4]
	volatile uint32_t *fifo = FIFO(endpoint_num);
 8000950:	79fb      	ldrb	r3, [r7, #7]
 8000952:	4618      	mov	r0, r3
 8000954:	f7ff fcbc 	bl	80002d0 <FIFO>
 8000958:	60f8      	str	r0, [r7, #12]
	USB_OTG_INEndpointTypeDef *in_endpoint = IN_ENDPOINT(endpoint_num);
 800095a:	79fb      	ldrb	r3, [r7, #7]
 800095c:	4618      	mov	r0, r3
 800095e:	f7ff fc97 	bl	8000290 <IN_ENDPOINT>
 8000962:	60b8      	str	r0, [r7, #8]


	// Configures the number of packets to 1
	MODIFY_REG(in_endpoint->DIEPTSIZ,USB_OTG_DIEPTSIZ_PKTCNT,_VAL2FLD(USB_OTG_DIEPTSIZ_PKTCNT, 1));
 8000964:	68bb      	ldr	r3, [r7, #8]
 8000966:	691b      	ldr	r3, [r3, #16]
 8000968:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800096c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8000970:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000974:	68bb      	ldr	r3, [r7, #8]
 8000976:	611a      	str	r2, [r3, #16]
	//Configure number of bytes in the packet
	MODIFY_REG(in_endpoint->DIEPTSIZ,USB_OTG_DIEPTSIZ_XFRSIZ,_VAL2FLD(USB_OTG_DIEPTSIZ_XFRSIZ, size));
 8000978:	68bb      	ldr	r3, [r7, #8]
 800097a:	691b      	ldr	r3, [r3, #16]
 800097c:	0cdb      	lsrs	r3, r3, #19
 800097e:	04db      	lsls	r3, r3, #19
 8000980:	88ba      	ldrh	r2, [r7, #4]
 8000982:	431a      	orrs	r2, r3
 8000984:	68bb      	ldr	r3, [r7, #8]
 8000986:	611a      	str	r2, [r3, #16]

	// Enables the transmission after clearing both STALL and NAK of the endpoint.
	MODIFY_REG(in_endpoint->DIEPCTL,USB_OTG_DIEPCTL_STALL,USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8000988:	68bb      	ldr	r3, [r7, #8]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	f023 4304 	bic.w	r3, r3, #2214592512	; 0x84000000
 8000990:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000994:	f043 4204 	orr.w	r2, r3, #2214592512	; 0x84000000
 8000998:	68bb      	ldr	r3, [r7, #8]
 800099a:	601a      	str	r2, [r3, #0]

	// Gets the size in term of 32-bit words (to avoid integer overflow in the loop).
	size = (size + 3) / 4;
 800099c:	88bb      	ldrh	r3, [r7, #4]
 800099e:	3303      	adds	r3, #3
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	da00      	bge.n	80009a6 <write_packet+0x66>
 80009a4:	3303      	adds	r3, #3
 80009a6:	109b      	asrs	r3, r3, #2
 80009a8:	80bb      	strh	r3, [r7, #4]

	for (; size > 0; size--, buffer += 4)
 80009aa:	e009      	b.n	80009c0 <write_packet+0x80>
	{
		// Pushes the data to the TxFIFO.
		*fifo = *((uint32_t *)buffer);
 80009ac:	683b      	ldr	r3, [r7, #0]
 80009ae:	681a      	ldr	r2, [r3, #0]
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	601a      	str	r2, [r3, #0]
	for (; size > 0; size--, buffer += 4)
 80009b4:	88bb      	ldrh	r3, [r7, #4]
 80009b6:	3b01      	subs	r3, #1
 80009b8:	80bb      	strh	r3, [r7, #4]
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	3304      	adds	r3, #4
 80009be:	603b      	str	r3, [r7, #0]
 80009c0:	88bb      	ldrh	r3, [r7, #4]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d1f2      	bne.n	80009ac <write_packet+0x6c>
	}
}
 80009c6:	bf00      	nop
 80009c8:	3710      	adds	r7, #16
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
	...

080009d0 <USBInterrupt_handler>:
 * @parem[in]		- none
 * @return			- none
 * @note			- none
 */
static void USBInterrupt_handler()
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af00      	add	r7, sp, #0
	volatile uint32_t gintstReg = USB_OTG_HS_GLOBAL->GINTSTS;
 80009d6:	4b24      	ldr	r3, [pc, #144]	; (8000a68 <USBInterrupt_handler+0x98>)
 80009d8:	695b      	ldr	r3, [r3, #20]
 80009da:	607b      	str	r3, [r7, #4]

	if(gintstReg & USB_OTG_GINTSTS_USBRST)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d008      	beq.n	80009f8 <USBInterrupt_handler+0x28>
	{
		USBReset_handler();
 80009e6:	f7ff fda5 	bl	8000534 <USBReset_handler>
		SET_BIT(USB_OTG_HS->GINTSTS,USB_OTG_GINTSTS_USBRST);
 80009ea:	4b1f      	ldr	r3, [pc, #124]	; (8000a68 <USBInterrupt_handler+0x98>)
 80009ec:	695b      	ldr	r3, [r3, #20]
 80009ee:	4a1e      	ldr	r2, [pc, #120]	; (8000a68 <USBInterrupt_handler+0x98>)
 80009f0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80009f4:	6153      	str	r3, [r2, #20]
	}
	else if (gintstReg & USB_OTG_GINTSTS_OEPINT)
	{
		SET_BIT(USB_OTG_HS->GINTSTS,USB_OTG_GINTSTS_OEPINT);
	}
}
 80009f6:	e032      	b.n	8000a5e <USBInterrupt_handler+0x8e>
	else if(gintstReg & USB_OTG_GINTSTS_ENUMDNE)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d008      	beq.n	8000a14 <USBInterrupt_handler+0x44>
		EnumerationDone_handler();
 8000a02:	f7ff fdb1 	bl	8000568 <EnumerationDone_handler>
		SET_BIT(USB_OTG_HS->GINTSTS,USB_OTG_GINTSTS_ENUMDNE);
 8000a06:	4b18      	ldr	r3, [pc, #96]	; (8000a68 <USBInterrupt_handler+0x98>)
 8000a08:	695b      	ldr	r3, [r3, #20]
 8000a0a:	4a17      	ldr	r2, [pc, #92]	; (8000a68 <USBInterrupt_handler+0x98>)
 8000a0c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000a10:	6153      	str	r3, [r2, #20]
}
 8000a12:	e024      	b.n	8000a5e <USBInterrupt_handler+0x8e>
	else if(gintstReg & USB_OTG_GINTSTS_RXFLVL)
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	f003 0310 	and.w	r3, r3, #16
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d008      	beq.n	8000a30 <USBInterrupt_handler+0x60>
		RxFifoNonEmpty_handler();
 8000a1e:	f7ff fdaf 	bl	8000580 <RxFifoNonEmpty_handler>
		SET_BIT(USB_OTG_HS->GINTSTS,USB_OTG_GINTSTS_RXFLVL);
 8000a22:	4b11      	ldr	r3, [pc, #68]	; (8000a68 <USBInterrupt_handler+0x98>)
 8000a24:	695b      	ldr	r3, [r3, #20]
 8000a26:	4a10      	ldr	r2, [pc, #64]	; (8000a68 <USBInterrupt_handler+0x98>)
 8000a28:	f043 0310 	orr.w	r3, r3, #16
 8000a2c:	6153      	str	r3, [r2, #20]
}
 8000a2e:	e016      	b.n	8000a5e <USBInterrupt_handler+0x8e>
	else if (gintstReg & USB_OTG_GINTSTS_IEPINT)
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d006      	beq.n	8000a48 <USBInterrupt_handler+0x78>
		SET_BIT(USB_OTG_HS->GINTSTS,USB_OTG_GINTSTS_IEPINT);
 8000a3a:	4b0b      	ldr	r3, [pc, #44]	; (8000a68 <USBInterrupt_handler+0x98>)
 8000a3c:	695b      	ldr	r3, [r3, #20]
 8000a3e:	4a0a      	ldr	r2, [pc, #40]	; (8000a68 <USBInterrupt_handler+0x98>)
 8000a40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a44:	6153      	str	r3, [r2, #20]
}
 8000a46:	e00a      	b.n	8000a5e <USBInterrupt_handler+0x8e>
	else if (gintstReg & USB_OTG_GINTSTS_OEPINT)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d005      	beq.n	8000a5e <USBInterrupt_handler+0x8e>
		SET_BIT(USB_OTG_HS->GINTSTS,USB_OTG_GINTSTS_OEPINT);
 8000a52:	4b05      	ldr	r3, [pc, #20]	; (8000a68 <USBInterrupt_handler+0x98>)
 8000a54:	695b      	ldr	r3, [r3, #20]
 8000a56:	4a04      	ldr	r2, [pc, #16]	; (8000a68 <USBInterrupt_handler+0x98>)
 8000a58:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000a5c:	6153      	str	r3, [r2, #20]
}
 8000a5e:	bf00      	nop
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	40040000 	.word	0x40040000

08000a6c <USB_Init>:


static UsbDevice *usbd_handle;

void USB_Init(UsbDevice *Usb_device)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
	usbd_handle = Usb_device;
 8000a74:	4a07      	ldr	r2, [pc, #28]	; (8000a94 <USB_Init+0x28>)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	6013      	str	r3, [r2, #0]
	usb_driver.USB_Gpio_Init();
 8000a7a:	4b07      	ldr	r3, [pc, #28]	; (8000a98 <USB_Init+0x2c>)
 8000a7c:	685b      	ldr	r3, [r3, #4]
 8000a7e:	4798      	blx	r3
	usb_driver.USB_Core_Init();
 8000a80:	4b05      	ldr	r3, [pc, #20]	; (8000a98 <USB_Init+0x2c>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4798      	blx	r3
	usb_driver.connect();
 8000a86:	4b04      	ldr	r3, [pc, #16]	; (8000a98 <USB_Init+0x2c>)
 8000a88:	68db      	ldr	r3, [r3, #12]
 8000a8a:	4798      	blx	r3

}
 8000a8c:	bf00      	nop
 8000a8e:	3708      	adds	r7, #8
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	2000009c 	.word	0x2000009c
 8000a98:	08001f4c 	.word	0x08001f4c

08000a9c <process_request>:
 * @parem[in]		- none
 * @return			- none
 * @note			- none
 */
static void process_request()
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	af00      	add	r7, sp, #0
	UsbRequest const * request = usbd_handle->ptr_out_buffer;
 8000aa2:	4b08      	ldr	r3, [pc, #32]	; (8000ac4 <process_request+0x28>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	685b      	ldr	r3, [r3, #4]
 8000aa8:	607b      	str	r3, [r7, #4]
	switch(request->bmRequestType & (USB_BM_REQUEST_TYPE_DIRECTION_MASK | USB_BM_REQUEST_TYPE_RECIPIENT_MASK ))
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	f003 0383 	and.w	r3, r3, #131	; 0x83
 8000ab2:	2b00      	cmp	r3, #0
	{
		case ( USB_BM_REQUEST_TYPE_TYPE_STANDARD | USB_BM_REQUEST_TYPE_RECIPIENT_DEVICE ):

		break;
 8000ab4:	bf00      	nop
	}
}
 8000ab6:	bf00      	nop
 8000ab8:	370c      	adds	r7, #12
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	2000009c 	.word	0x2000009c

08000ac8 <usbd_poll>:
 * @parem[in]		- none
 * @return			- none
 * @note			- function is used for bus polling
 */
void usbd_poll()
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
	usb_driver.poll();
 8000acc:	4b02      	ldr	r3, [pc, #8]	; (8000ad8 <usbd_poll+0x10>)
 8000ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ad0:	4798      	blx	r3
}
 8000ad2:	bf00      	nop
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	08001f4c 	.word	0x08001f4c

08000adc <USB_reset_receive_handler>:
 * @parem[in]		- none
 * @return			- none
 * @note			- none
 */
static void USB_reset_receive_handler()
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
	usbd_handle->in_data_size = 0;
 8000ae0:	4b0c      	ldr	r3, [pc, #48]	; (8000b14 <USB_reset_receive_handler+0x38>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	611a      	str	r2, [r3, #16]
	usbd_handle->out_data_size= 0;
 8000ae8:	4b0a      	ldr	r3, [pc, #40]	; (8000b14 <USB_reset_receive_handler+0x38>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	2200      	movs	r2, #0
 8000aee:	609a      	str	r2, [r3, #8]
	usbd_handle->configuration_value =0;
 8000af0:	4b08      	ldr	r3, [pc, #32]	; (8000b14 <USB_reset_receive_handler+0x38>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	2200      	movs	r2, #0
 8000af6:	709a      	strb	r2, [r3, #2]
	usbd_handle->device_state = USB_DEVICE_STATE_DEFAULT;
 8000af8:	4b06      	ldr	r3, [pc, #24]	; (8000b14 <USB_reset_receive_handler+0x38>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	2200      	movs	r2, #0
 8000afe:	701a      	strb	r2, [r3, #0]
	usbd_handle->control_transfer_stage = USB_CONTROL_STAGE_SETUP;
 8000b00:	4b04      	ldr	r3, [pc, #16]	; (8000b14 <USB_reset_receive_handler+0x38>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	2200      	movs	r2, #0
 8000b06:	705a      	strb	r2, [r3, #1]
	usb_driver.set_device_addr(0);
 8000b08:	4b03      	ldr	r3, [pc, #12]	; (8000b18 <USB_reset_receive_handler+0x3c>)
 8000b0a:	689b      	ldr	r3, [r3, #8]
 8000b0c:	2000      	movs	r0, #0
 8000b0e:	4798      	blx	r3
}
 8000b10:	bf00      	nop
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	2000009c 	.word	0x2000009c
 8000b18:	08001f4c 	.word	0x08001f4c

08000b1c <setup_data_received_handler>:
 * @parem[in]		- none
 * @return			- none
 * @note			- none
 */
static void setup_data_received_handler(uint8_t endpoint_num, uint16_t byte_count)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	4603      	mov	r3, r0
 8000b24:	460a      	mov	r2, r1
 8000b26:	71fb      	strb	r3, [r7, #7]
 8000b28:	4613      	mov	r3, r2
 8000b2a:	80bb      	strh	r3, [r7, #4]
	usb_driver.read_packet(usbd_handle->ptr_out_buffer,byte_count);
 8000b2c:	4b0a      	ldr	r3, [pc, #40]	; (8000b58 <setup_data_received_handler+0x3c>)
 8000b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b30:	4a0a      	ldr	r2, [pc, #40]	; (8000b5c <setup_data_received_handler+0x40>)
 8000b32:	6812      	ldr	r2, [r2, #0]
 8000b34:	6852      	ldr	r2, [r2, #4]
 8000b36:	88b9      	ldrh	r1, [r7, #4]
 8000b38:	4610      	mov	r0, r2
 8000b3a:	4798      	blx	r3

	log_debug_array("Setup data:",usbd_handle->ptr_out_buffer, byte_count);
 8000b3c:	4b07      	ldr	r3, [pc, #28]	; (8000b5c <setup_data_received_handler+0x40>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	88ba      	ldrh	r2, [r7, #4]
 8000b44:	4619      	mov	r1, r3
 8000b46:	4806      	ldr	r0, [pc, #24]	; (8000b60 <setup_data_received_handler+0x44>)
 8000b48:	f000 f8b4 	bl	8000cb4 <log_debug_array>
	process_request();
 8000b4c:	f7ff ffa6 	bl	8000a9c <process_request>
}
 8000b50:	bf00      	nop
 8000b52:	3708      	adds	r7, #8
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	08001f4c 	.word	0x08001f4c
 8000b5c:	2000009c 	.word	0x2000009c
 8000b60:	08001ee0 	.word	0x08001ee0

08000b64 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000b6c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000b70:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000b74:	f003 0301 	and.w	r3, r3, #1
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d013      	beq.n	8000ba4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000b7c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000b80:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000b84:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d00b      	beq.n	8000ba4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000b8c:	e000      	b.n	8000b90 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000b8e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000b90:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d0f9      	beq.n	8000b8e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000b9a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000b9e:	687a      	ldr	r2, [r7, #4]
 8000ba0:	b2d2      	uxtb	r2, r2
 8000ba2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000ba4:	687b      	ldr	r3, [r7, #4]
}
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	370c      	adds	r7, #12
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr

08000bb2 <_write>:

/** \brief Redirects `printf()` output to the serial wire out (SWO).
 * This function overrides a weak function symbol and is not to be used directly.
 */
int _write(int file, char *ptr, int len)
{
 8000bb2:	b580      	push	{r7, lr}
 8000bb4:	b086      	sub	sp, #24
 8000bb6:	af00      	add	r7, sp, #0
 8000bb8:	60f8      	str	r0, [r7, #12]
 8000bba:	60b9      	str	r1, [r7, #8]
 8000bbc:	607a      	str	r2, [r7, #4]
  int i=0;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	617b      	str	r3, [r7, #20]
 8000bc6:	e009      	b.n	8000bdc <_write+0x2a>
    ITM_SendChar((*ptr++));
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	1c5a      	adds	r2, r3, #1
 8000bcc:	60ba      	str	r2, [r7, #8]
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f7ff ffc7 	bl	8000b64 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	3301      	adds	r3, #1
 8000bda:	617b      	str	r3, [r7, #20]
 8000bdc:	697a      	ldr	r2, [r7, #20]
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	429a      	cmp	r2, r3
 8000be2:	dbf1      	blt.n	8000bc8 <_write+0x16>

  return len;
 8000be4:	687b      	ldr	r3, [r7, #4]
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	3718      	adds	r7, #24
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
	...

08000bf0 <_get_log_level_string>:

char const * const _get_log_level_string(LogLvl const log_level)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	71fb      	strb	r3, [r7, #7]
    switch(log_level)
 8000bfa:	79fb      	ldrb	r3, [r7, #7]
 8000bfc:	2b01      	cmp	r3, #1
 8000bfe:	d005      	beq.n	8000c0c <_get_log_level_string+0x1c>
 8000c00:	2b02      	cmp	r3, #2
 8000c02:	d005      	beq.n	8000c10 <_get_log_level_string+0x20>
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d105      	bne.n	8000c14 <_get_log_level_string+0x24>
    {
        case LOG_LEVEL_ERROR:
            return "ERROR";
 8000c08:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <_get_log_level_string+0x34>)
 8000c0a:	e004      	b.n	8000c16 <_get_log_level_string+0x26>
        case LOG_LEVEL_INFO:
            return "INFO";
 8000c0c:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <_get_log_level_string+0x38>)
 8000c0e:	e002      	b.n	8000c16 <_get_log_level_string+0x26>
        case LOG_LEVEL_DEBUG:
            return "DEBUG";
 8000c10:	4b06      	ldr	r3, [pc, #24]	; (8000c2c <_get_log_level_string+0x3c>)
 8000c12:	e000      	b.n	8000c16 <_get_log_level_string+0x26>
        default:
        	return "No Arg";
 8000c14:	4b06      	ldr	r3, [pc, #24]	; (8000c30 <_get_log_level_string+0x40>)
    }
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	370c      	adds	r7, #12
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	08001eec 	.word	0x08001eec
 8000c28:	08001ef4 	.word	0x08001ef4
 8000c2c:	08001efc 	.word	0x08001efc
 8000c30:	08001f04 	.word	0x08001f04

08000c34 <_log>:

static void _log(LogLvl const log_level, char const * const format, va_list args)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b084      	sub	sp, #16
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	60b9      	str	r1, [r7, #8]
 8000c3e:	607a      	str	r2, [r7, #4]
 8000c40:	73fb      	strb	r3, [r7, #15]
    if (log_level > system_log_level)
 8000c42:	4b0f      	ldr	r3, [pc, #60]	; (8000c80 <_log+0x4c>)
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	7bfa      	ldrb	r2, [r7, #15]
 8000c48:	429a      	cmp	r2, r3
 8000c4a:	d814      	bhi.n	8000c76 <_log+0x42>
    {
    	return;
    }


	printf("[%s] ", _get_log_level_string(log_level));
 8000c4c:	7bfb      	ldrb	r3, [r7, #15]
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f7ff ffce 	bl	8000bf0 <_get_log_level_string>
 8000c54:	4603      	mov	r3, r0
 8000c56:	4619      	mov	r1, r3
 8000c58:	480a      	ldr	r0, [pc, #40]	; (8000c84 <_log+0x50>)
 8000c5a:	f000 fc13 	bl	8001484 <iprintf>
	vfprintf(stdout, format, args);
 8000c5e:	4b0a      	ldr	r3, [pc, #40]	; (8000c88 <_log+0x54>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	689b      	ldr	r3, [r3, #8]
 8000c64:	687a      	ldr	r2, [r7, #4]
 8000c66:	68b9      	ldr	r1, [r7, #8]
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f000 fa79 	bl	8001160 <vfiprintf>
	printf("\n");
 8000c6e:	200a      	movs	r0, #10
 8000c70:	f000 fc20 	bl	80014b4 <putchar>
 8000c74:	e000      	b.n	8000c78 <_log+0x44>
    	return;
 8000c76:	bf00      	nop
}
 8000c78:	3710      	adds	r7, #16
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	20000018 	.word	0x20000018
 8000c84:	08001f0c 	.word	0x08001f0c
 8000c88:	2000001c 	.word	0x2000001c

08000c8c <log_info>:
    _log(LOG_LEVEL_ERROR, format, args);
    va_end(args);
}

void log_info(char const * const format, ...)
{
 8000c8c:	b40f      	push	{r0, r1, r2, r3}
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	b082      	sub	sp, #8
 8000c92:	af00      	add	r7, sp, #0
    va_list args;
	va_start(args, format);
 8000c94:	f107 0314 	add.w	r3, r7, #20
 8000c98:	607b      	str	r3, [r7, #4]
    _log(LOG_LEVEL_INFO, format, args);
 8000c9a:	687a      	ldr	r2, [r7, #4]
 8000c9c:	6939      	ldr	r1, [r7, #16]
 8000c9e:	2001      	movs	r0, #1
 8000ca0:	f7ff ffc8 	bl	8000c34 <_log>
    va_end(args);
}
 8000ca4:	bf00      	nop
 8000ca6:	3708      	adds	r7, #8
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000cae:	b004      	add	sp, #16
 8000cb0:	4770      	bx	lr
	...

08000cb4 <log_debug_array>:
 * \param label The label of the array.
 * \param array Pointer to the array.
 * \param len The length of data in bytes.
 */
void log_debug_array(char const * const label, void const *array, uint16_t const len)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b086      	sub	sp, #24
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	60f8      	str	r0, [r7, #12]
 8000cbc:	60b9      	str	r1, [r7, #8]
 8000cbe:	4613      	mov	r3, r2
 8000cc0:	80fb      	strh	r3, [r7, #6]
    if (LOG_LEVEL_DEBUG > system_log_level)
 8000cc2:	4b18      	ldr	r3, [pc, #96]	; (8000d24 <log_debug_array+0x70>)
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	2b01      	cmp	r3, #1
 8000cc8:	d928      	bls.n	8000d1c <log_debug_array+0x68>
    {
    	return;
    }

	printf("[%s] %s[%d]: {", _get_log_level_string(LOG_LEVEL_DEBUG), label, len);
 8000cca:	2002      	movs	r0, #2
 8000ccc:	f7ff ff90 	bl	8000bf0 <_get_log_level_string>
 8000cd0:	4601      	mov	r1, r0
 8000cd2:	88fb      	ldrh	r3, [r7, #6]
 8000cd4:	68fa      	ldr	r2, [r7, #12]
 8000cd6:	4814      	ldr	r0, [pc, #80]	; (8000d28 <log_debug_array+0x74>)
 8000cd8:	f000 fbd4 	bl	8001484 <iprintf>
    for (uint16_t i = 0; i < len; i++)
 8000cdc:	2300      	movs	r3, #0
 8000cde:	82fb      	strh	r3, [r7, #22]
 8000ce0:	e014      	b.n	8000d0c <log_debug_array+0x58>
    {
    	uint8_t val = *((uint8_t *)(array + i));
 8000ce2:	8afb      	ldrh	r3, [r7, #22]
 8000ce4:	68ba      	ldr	r2, [r7, #8]
 8000ce6:	4413      	add	r3, r2
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	757b      	strb	r3, [r7, #21]
    	printf("0x%02X", val);
 8000cec:	7d7b      	ldrb	r3, [r7, #21]
 8000cee:	4619      	mov	r1, r3
 8000cf0:	480e      	ldr	r0, [pc, #56]	; (8000d2c <log_debug_array+0x78>)
 8000cf2:	f000 fbc7 	bl	8001484 <iprintf>
    	
    	// Add ", " after all elements except the last one.
    	if (i < len - 1)
 8000cf6:	8afa      	ldrh	r2, [r7, #22]
 8000cf8:	88fb      	ldrh	r3, [r7, #6]
 8000cfa:	3b01      	subs	r3, #1
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	da02      	bge.n	8000d06 <log_debug_array+0x52>
    	{
    	    printf(", ");
 8000d00:	480b      	ldr	r0, [pc, #44]	; (8000d30 <log_debug_array+0x7c>)
 8000d02:	f000 fbbf 	bl	8001484 <iprintf>
    for (uint16_t i = 0; i < len; i++)
 8000d06:	8afb      	ldrh	r3, [r7, #22]
 8000d08:	3301      	adds	r3, #1
 8000d0a:	82fb      	strh	r3, [r7, #22]
 8000d0c:	8afa      	ldrh	r2, [r7, #22]
 8000d0e:	88fb      	ldrh	r3, [r7, #6]
 8000d10:	429a      	cmp	r2, r3
 8000d12:	d3e6      	bcc.n	8000ce2 <log_debug_array+0x2e>
    	}
    }
	printf("}\n");
 8000d14:	4807      	ldr	r0, [pc, #28]	; (8000d34 <log_debug_array+0x80>)
 8000d16:	f000 fc3d 	bl	8001594 <puts>
 8000d1a:	e000      	b.n	8000d1e <log_debug_array+0x6a>
    	return;
 8000d1c:	bf00      	nop
}
 8000d1e:	3718      	adds	r7, #24
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	20000018 	.word	0x20000018
 8000d28:	08001f14 	.word	0x08001f14
 8000d2c:	08001f24 	.word	0x08001f24
 8000d30:	08001f2c 	.word	0x08001f2c
 8000d34:	08001f30 	.word	0x08001f30

08000d38 <main>:

UsbDevice usb_device;
uint32_t buffer[8];

int main(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
	USBPins.GPIO_PinConfig.GPIO_PinNumber =12;
	GPIO_Init(&USBPins);*/



	log_info("Program entry point.");
 8000d3c:	4805      	ldr	r0, [pc, #20]	; (8000d54 <main+0x1c>)
 8000d3e:	f7ff ffa5 	bl	8000c8c <log_info>
	usb_device.ptr_out_buffer = &buffer;
 8000d42:	4b05      	ldr	r3, [pc, #20]	; (8000d58 <main+0x20>)
 8000d44:	4a05      	ldr	r2, [pc, #20]	; (8000d5c <main+0x24>)
 8000d46:	605a      	str	r2, [r3, #4]
	USB_Init(&usb_device);
 8000d48:	4803      	ldr	r0, [pc, #12]	; (8000d58 <main+0x20>)
 8000d4a:	f7ff fe8f 	bl	8000a6c <USB_Init>
	for(;;)
	{
		usbd_poll();
 8000d4e:	f7ff febb 	bl	8000ac8 <usbd_poll>
 8000d52:	e7fc      	b.n	8000d4e <main+0x16>
 8000d54:	08001f34 	.word	0x08001f34
 8000d58:	200000ac 	.word	0x200000ac
 8000d5c:	200000c0 	.word	0x200000c0

08000d60 <configureClock>:
//HCLK = 72MHz
//PLL: M = 4, N = 72, P = 2, Q = 3
//APB1 prescaler =2 APB2 prescaler  = 1

static void configureClock(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0

	MODIFY_REG(FLASH->ACR,FLASH_ACR_LATENCY,FLASH_ACR_LATENCY_2WS << FLASH_ACR_LATENCY_Pos);
 8000d64:	4b2c      	ldr	r3, [pc, #176]	; (8000e18 <configureClock+0xb8>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f023 030f 	bic.w	r3, r3, #15
 8000d6c:	4a2a      	ldr	r2, [pc, #168]	; (8000e18 <configureClock+0xb8>)
 8000d6e:	f043 0302 	orr.w	r3, r3, #2
 8000d72:	6013      	str	r3, [r2, #0]

	//Enable HSE
	SET_BIT(RCC->CR,RCC_CR_HSEON);
 8000d74:	4b29      	ldr	r3, [pc, #164]	; (8000e1c <configureClock+0xbc>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a28      	ldr	r2, [pc, #160]	; (8000e1c <configureClock+0xbc>)
 8000d7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d7e:	6013      	str	r3, [r2, #0]

	//Wait for HSE to be ready
	while(!READ_BIT(RCC->CR,RCC_CR_HSERDY));
 8000d80:	bf00      	nop
 8000d82:	4b26      	ldr	r3, [pc, #152]	; (8000e1c <configureClock+0xbc>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d0f9      	beq.n	8000d82 <configureClock+0x22>

	//Turn off PLL
	CLEAR_BIT(RCC->CR,RCC_CR_PLLON);
 8000d8e:	4b23      	ldr	r3, [pc, #140]	; (8000e1c <configureClock+0xbc>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4a22      	ldr	r2, [pc, #136]	; (8000e1c <configureClock+0xbc>)
 8000d94:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000d98:	6013      	str	r3, [r2, #0]

	//Wait for PLL to be ready be cleared
	while(READ_BIT(RCC->CR,RCC_CR_PLLRDY));
 8000d9a:	bf00      	nop
 8000d9c:	4b1f      	ldr	r3, [pc, #124]	; (8000e1c <configureClock+0xbc>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d1f9      	bne.n	8000d9c <configureClock+0x3c>


	//Configure PLL: source = HSE, SYCLK=72Mhz
	MODIFY_REG(RCC->PLLCFGR,
 8000da8:	4b1c      	ldr	r3, [pc, #112]	; (8000e1c <configureClock+0xbc>)
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	4a1c      	ldr	r2, [pc, #112]	; (8000e20 <configureClock+0xc0>)
 8000dae:	401a      	ands	r2, r3
 8000db0:	491a      	ldr	r1, [pc, #104]	; (8000e1c <configureClock+0xbc>)
 8000db2:	4b1c      	ldr	r3, [pc, #112]	; (8000e24 <configureClock+0xc4>)
 8000db4:	4313      	orrs	r3, r2
 8000db6:	604b      	str	r3, [r1, #4]
			RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLQ | RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLP,
			_VAL2FLD(RCC_PLLCFGR_PLLM, 4) | _VAL2FLD(RCC_PLLCFGR_PLLN, 72) | _VAL2FLD(RCC_PLLCFGR_PLLQ, 3) | RCC_PLLCFGR_PLLSRC_HSE);

	// Configures PPRE1 = 2
		MODIFY_REG(RCC->CFGR,
 8000db8:	4b18      	ldr	r3, [pc, #96]	; (8000e1c <configureClock+0xbc>)
 8000dba:	689b      	ldr	r3, [r3, #8]
 8000dbc:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000dc0:	4a16      	ldr	r2, [pc, #88]	; (8000e1c <configureClock+0xbc>)
 8000dc2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000dc6:	6093      	str	r3, [r2, #8]
			RCC_CFGR_PPRE1,_VAL2FLD(RCC_CFGR_PPRE1, 4));

	//Enable PLL Module
	SET_BIT(RCC->CR,RCC_CR_PLLON);
 8000dc8:	4b14      	ldr	r3, [pc, #80]	; (8000e1c <configureClock+0xbc>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a13      	ldr	r2, [pc, #76]	; (8000e1c <configureClock+0xbc>)
 8000dce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000dd2:	6013      	str	r3, [r2, #0]

	//Wait until PLL is stable
	while(!READ_BIT(RCC->CR,RCC_CR_PLLRDY));
 8000dd4:	bf00      	nop
 8000dd6:	4b11      	ldr	r3, [pc, #68]	; (8000e1c <configureClock+0xbc>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d0f9      	beq.n	8000dd6 <configureClock+0x76>

	//Modify System clock to PLL
	MODIFY_REG(RCC->CFGR,
 8000de2:	4b0e      	ldr	r3, [pc, #56]	; (8000e1c <configureClock+0xbc>)
 8000de4:	689b      	ldr	r3, [r3, #8]
 8000de6:	f023 0303 	bic.w	r3, r3, #3
 8000dea:	4a0c      	ldr	r2, [pc, #48]	; (8000e1c <configureClock+0xbc>)
 8000dec:	f043 0302 	orr.w	r3, r3, #2
 8000df0:	6093      	str	r3, [r2, #8]
			RCC_CFGR_SW,
			_VAL2FLD(RCC_CFGR_SW,RCC_CFGR_SW_PLL));


	//Wait until PLL is switched
	while(READ_BIT(RCC->CFGR,RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
 8000df2:	bf00      	nop
 8000df4:	4b09      	ldr	r3, [pc, #36]	; (8000e1c <configureClock+0xbc>)
 8000df6:	689b      	ldr	r3, [r3, #8]
 8000df8:	f003 030c 	and.w	r3, r3, #12
 8000dfc:	2b08      	cmp	r3, #8
 8000dfe:	d1f9      	bne.n	8000df4 <configureClock+0x94>

	//Disable HSI
	CLEAR_BIT(RCC->CR,RCC_CR_HSION);
 8000e00:	4b06      	ldr	r3, [pc, #24]	; (8000e1c <configureClock+0xbc>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a05      	ldr	r2, [pc, #20]	; (8000e1c <configureClock+0xbc>)
 8000e06:	f023 0301 	bic.w	r3, r3, #1
 8000e0a:	6013      	str	r3, [r2, #0]
}
 8000e0c:	bf00      	nop
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	40023c00 	.word	0x40023c00
 8000e1c:	40023800 	.word	0x40023800
 8000e20:	f0bc8000 	.word	0xf0bc8000
 8000e24:	03401204 	.word	0x03401204

08000e28 <SystemInit>:

void SystemInit(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
	configureClock();
 8000e2c:	f7ff ff98 	bl	8000d60 <configureClock>
}
 8000e30:	bf00      	nop
 8000e32:	bd80      	pop	{r7, pc}

08000e34 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e34:	480d      	ldr	r0, [pc, #52]	; (8000e6c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e36:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e38:	480d      	ldr	r0, [pc, #52]	; (8000e70 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e3a:	490e      	ldr	r1, [pc, #56]	; (8000e74 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e3c:	4a0e      	ldr	r2, [pc, #56]	; (8000e78 <LoopForever+0xe>)
  movs r3, #0
 8000e3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e40:	e002      	b.n	8000e48 <LoopCopyDataInit>

08000e42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e46:	3304      	adds	r3, #4

08000e48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e4c:	d3f9      	bcc.n	8000e42 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e4e:	4a0b      	ldr	r2, [pc, #44]	; (8000e7c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e50:	4c0b      	ldr	r4, [pc, #44]	; (8000e80 <LoopForever+0x16>)
  movs r3, #0
 8000e52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e54:	e001      	b.n	8000e5a <LoopFillZerobss>

08000e56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e58:	3204      	adds	r2, #4

08000e5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e5c:	d3fb      	bcc.n	8000e56 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000e5e:	f7ff ffe3 	bl	8000e28 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000e62:	f000 f811 	bl	8000e88 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e66:	f7ff ff67 	bl	8000d38 <main>

08000e6a <LoopForever>:

LoopForever:
    b LoopForever
 8000e6a:	e7fe      	b.n	8000e6a <LoopForever>
  ldr   r0, =_estack
 8000e6c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000e70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e74:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8000e78:	08002018 	.word	0x08002018
  ldr r2, =_sbss
 8000e7c:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8000e80:	200000e4 	.word	0x200000e4

08000e84 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e84:	e7fe      	b.n	8000e84 <ADC_IRQHandler>
	...

08000e88 <__libc_init_array>:
 8000e88:	b570      	push	{r4, r5, r6, lr}
 8000e8a:	4e0d      	ldr	r6, [pc, #52]	; (8000ec0 <__libc_init_array+0x38>)
 8000e8c:	4c0d      	ldr	r4, [pc, #52]	; (8000ec4 <__libc_init_array+0x3c>)
 8000e8e:	1ba4      	subs	r4, r4, r6
 8000e90:	10a4      	asrs	r4, r4, #2
 8000e92:	2500      	movs	r5, #0
 8000e94:	42a5      	cmp	r5, r4
 8000e96:	d109      	bne.n	8000eac <__libc_init_array+0x24>
 8000e98:	4e0b      	ldr	r6, [pc, #44]	; (8000ec8 <__libc_init_array+0x40>)
 8000e9a:	4c0c      	ldr	r4, [pc, #48]	; (8000ecc <__libc_init_array+0x44>)
 8000e9c:	f000 fff2 	bl	8001e84 <_init>
 8000ea0:	1ba4      	subs	r4, r4, r6
 8000ea2:	10a4      	asrs	r4, r4, #2
 8000ea4:	2500      	movs	r5, #0
 8000ea6:	42a5      	cmp	r5, r4
 8000ea8:	d105      	bne.n	8000eb6 <__libc_init_array+0x2e>
 8000eaa:	bd70      	pop	{r4, r5, r6, pc}
 8000eac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000eb0:	4798      	blx	r3
 8000eb2:	3501      	adds	r5, #1
 8000eb4:	e7ee      	b.n	8000e94 <__libc_init_array+0xc>
 8000eb6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000eba:	4798      	blx	r3
 8000ebc:	3501      	adds	r5, #1
 8000ebe:	e7f2      	b.n	8000ea6 <__libc_init_array+0x1e>
 8000ec0:	08002010 	.word	0x08002010
 8000ec4:	08002010 	.word	0x08002010
 8000ec8:	08002010 	.word	0x08002010
 8000ecc:	08002014 	.word	0x08002014

08000ed0 <memset>:
 8000ed0:	4402      	add	r2, r0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d100      	bne.n	8000eda <memset+0xa>
 8000ed8:	4770      	bx	lr
 8000eda:	f803 1b01 	strb.w	r1, [r3], #1
 8000ede:	e7f9      	b.n	8000ed4 <memset+0x4>

08000ee0 <__sfputc_r>:
 8000ee0:	6893      	ldr	r3, [r2, #8]
 8000ee2:	3b01      	subs	r3, #1
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	b410      	push	{r4}
 8000ee8:	6093      	str	r3, [r2, #8]
 8000eea:	da08      	bge.n	8000efe <__sfputc_r+0x1e>
 8000eec:	6994      	ldr	r4, [r2, #24]
 8000eee:	42a3      	cmp	r3, r4
 8000ef0:	db01      	blt.n	8000ef6 <__sfputc_r+0x16>
 8000ef2:	290a      	cmp	r1, #10
 8000ef4:	d103      	bne.n	8000efe <__sfputc_r+0x1e>
 8000ef6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000efa:	f000 bb53 	b.w	80015a4 <__swbuf_r>
 8000efe:	6813      	ldr	r3, [r2, #0]
 8000f00:	1c58      	adds	r0, r3, #1
 8000f02:	6010      	str	r0, [r2, #0]
 8000f04:	7019      	strb	r1, [r3, #0]
 8000f06:	4608      	mov	r0, r1
 8000f08:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000f0c:	4770      	bx	lr

08000f0e <__sfputs_r>:
 8000f0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f10:	4606      	mov	r6, r0
 8000f12:	460f      	mov	r7, r1
 8000f14:	4614      	mov	r4, r2
 8000f16:	18d5      	adds	r5, r2, r3
 8000f18:	42ac      	cmp	r4, r5
 8000f1a:	d101      	bne.n	8000f20 <__sfputs_r+0x12>
 8000f1c:	2000      	movs	r0, #0
 8000f1e:	e007      	b.n	8000f30 <__sfputs_r+0x22>
 8000f20:	463a      	mov	r2, r7
 8000f22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000f26:	4630      	mov	r0, r6
 8000f28:	f7ff ffda 	bl	8000ee0 <__sfputc_r>
 8000f2c:	1c43      	adds	r3, r0, #1
 8000f2e:	d1f3      	bne.n	8000f18 <__sfputs_r+0xa>
 8000f30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000f34 <_vfiprintf_r>:
 8000f34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f38:	460c      	mov	r4, r1
 8000f3a:	b09d      	sub	sp, #116	; 0x74
 8000f3c:	4617      	mov	r7, r2
 8000f3e:	461d      	mov	r5, r3
 8000f40:	4606      	mov	r6, r0
 8000f42:	b118      	cbz	r0, 8000f4c <_vfiprintf_r+0x18>
 8000f44:	6983      	ldr	r3, [r0, #24]
 8000f46:	b90b      	cbnz	r3, 8000f4c <_vfiprintf_r+0x18>
 8000f48:	f000 fcdc 	bl	8001904 <__sinit>
 8000f4c:	4b7c      	ldr	r3, [pc, #496]	; (8001140 <_vfiprintf_r+0x20c>)
 8000f4e:	429c      	cmp	r4, r3
 8000f50:	d158      	bne.n	8001004 <_vfiprintf_r+0xd0>
 8000f52:	6874      	ldr	r4, [r6, #4]
 8000f54:	89a3      	ldrh	r3, [r4, #12]
 8000f56:	0718      	lsls	r0, r3, #28
 8000f58:	d55e      	bpl.n	8001018 <_vfiprintf_r+0xe4>
 8000f5a:	6923      	ldr	r3, [r4, #16]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d05b      	beq.n	8001018 <_vfiprintf_r+0xe4>
 8000f60:	2300      	movs	r3, #0
 8000f62:	9309      	str	r3, [sp, #36]	; 0x24
 8000f64:	2320      	movs	r3, #32
 8000f66:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000f6a:	2330      	movs	r3, #48	; 0x30
 8000f6c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000f70:	9503      	str	r5, [sp, #12]
 8000f72:	f04f 0b01 	mov.w	fp, #1
 8000f76:	46b8      	mov	r8, r7
 8000f78:	4645      	mov	r5, r8
 8000f7a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8000f7e:	b10b      	cbz	r3, 8000f84 <_vfiprintf_r+0x50>
 8000f80:	2b25      	cmp	r3, #37	; 0x25
 8000f82:	d154      	bne.n	800102e <_vfiprintf_r+0xfa>
 8000f84:	ebb8 0a07 	subs.w	sl, r8, r7
 8000f88:	d00b      	beq.n	8000fa2 <_vfiprintf_r+0x6e>
 8000f8a:	4653      	mov	r3, sl
 8000f8c:	463a      	mov	r2, r7
 8000f8e:	4621      	mov	r1, r4
 8000f90:	4630      	mov	r0, r6
 8000f92:	f7ff ffbc 	bl	8000f0e <__sfputs_r>
 8000f96:	3001      	adds	r0, #1
 8000f98:	f000 80c2 	beq.w	8001120 <_vfiprintf_r+0x1ec>
 8000f9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000f9e:	4453      	add	r3, sl
 8000fa0:	9309      	str	r3, [sp, #36]	; 0x24
 8000fa2:	f898 3000 	ldrb.w	r3, [r8]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	f000 80ba 	beq.w	8001120 <_vfiprintf_r+0x1ec>
 8000fac:	2300      	movs	r3, #0
 8000fae:	f04f 32ff 	mov.w	r2, #4294967295
 8000fb2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000fb6:	9304      	str	r3, [sp, #16]
 8000fb8:	9307      	str	r3, [sp, #28]
 8000fba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000fbe:	931a      	str	r3, [sp, #104]	; 0x68
 8000fc0:	46a8      	mov	r8, r5
 8000fc2:	2205      	movs	r2, #5
 8000fc4:	f818 1b01 	ldrb.w	r1, [r8], #1
 8000fc8:	485e      	ldr	r0, [pc, #376]	; (8001144 <_vfiprintf_r+0x210>)
 8000fca:	f7ff f911 	bl	80001f0 <memchr>
 8000fce:	9b04      	ldr	r3, [sp, #16]
 8000fd0:	bb78      	cbnz	r0, 8001032 <_vfiprintf_r+0xfe>
 8000fd2:	06d9      	lsls	r1, r3, #27
 8000fd4:	bf44      	itt	mi
 8000fd6:	2220      	movmi	r2, #32
 8000fd8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8000fdc:	071a      	lsls	r2, r3, #28
 8000fde:	bf44      	itt	mi
 8000fe0:	222b      	movmi	r2, #43	; 0x2b
 8000fe2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8000fe6:	782a      	ldrb	r2, [r5, #0]
 8000fe8:	2a2a      	cmp	r2, #42	; 0x2a
 8000fea:	d02a      	beq.n	8001042 <_vfiprintf_r+0x10e>
 8000fec:	9a07      	ldr	r2, [sp, #28]
 8000fee:	46a8      	mov	r8, r5
 8000ff0:	2000      	movs	r0, #0
 8000ff2:	250a      	movs	r5, #10
 8000ff4:	4641      	mov	r1, r8
 8000ff6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000ffa:	3b30      	subs	r3, #48	; 0x30
 8000ffc:	2b09      	cmp	r3, #9
 8000ffe:	d969      	bls.n	80010d4 <_vfiprintf_r+0x1a0>
 8001000:	b360      	cbz	r0, 800105c <_vfiprintf_r+0x128>
 8001002:	e024      	b.n	800104e <_vfiprintf_r+0x11a>
 8001004:	4b50      	ldr	r3, [pc, #320]	; (8001148 <_vfiprintf_r+0x214>)
 8001006:	429c      	cmp	r4, r3
 8001008:	d101      	bne.n	800100e <_vfiprintf_r+0xda>
 800100a:	68b4      	ldr	r4, [r6, #8]
 800100c:	e7a2      	b.n	8000f54 <_vfiprintf_r+0x20>
 800100e:	4b4f      	ldr	r3, [pc, #316]	; (800114c <_vfiprintf_r+0x218>)
 8001010:	429c      	cmp	r4, r3
 8001012:	bf08      	it	eq
 8001014:	68f4      	ldreq	r4, [r6, #12]
 8001016:	e79d      	b.n	8000f54 <_vfiprintf_r+0x20>
 8001018:	4621      	mov	r1, r4
 800101a:	4630      	mov	r0, r6
 800101c:	f000 fb14 	bl	8001648 <__swsetup_r>
 8001020:	2800      	cmp	r0, #0
 8001022:	d09d      	beq.n	8000f60 <_vfiprintf_r+0x2c>
 8001024:	f04f 30ff 	mov.w	r0, #4294967295
 8001028:	b01d      	add	sp, #116	; 0x74
 800102a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800102e:	46a8      	mov	r8, r5
 8001030:	e7a2      	b.n	8000f78 <_vfiprintf_r+0x44>
 8001032:	4a44      	ldr	r2, [pc, #272]	; (8001144 <_vfiprintf_r+0x210>)
 8001034:	1a80      	subs	r0, r0, r2
 8001036:	fa0b f000 	lsl.w	r0, fp, r0
 800103a:	4318      	orrs	r0, r3
 800103c:	9004      	str	r0, [sp, #16]
 800103e:	4645      	mov	r5, r8
 8001040:	e7be      	b.n	8000fc0 <_vfiprintf_r+0x8c>
 8001042:	9a03      	ldr	r2, [sp, #12]
 8001044:	1d11      	adds	r1, r2, #4
 8001046:	6812      	ldr	r2, [r2, #0]
 8001048:	9103      	str	r1, [sp, #12]
 800104a:	2a00      	cmp	r2, #0
 800104c:	db01      	blt.n	8001052 <_vfiprintf_r+0x11e>
 800104e:	9207      	str	r2, [sp, #28]
 8001050:	e004      	b.n	800105c <_vfiprintf_r+0x128>
 8001052:	4252      	negs	r2, r2
 8001054:	f043 0302 	orr.w	r3, r3, #2
 8001058:	9207      	str	r2, [sp, #28]
 800105a:	9304      	str	r3, [sp, #16]
 800105c:	f898 3000 	ldrb.w	r3, [r8]
 8001060:	2b2e      	cmp	r3, #46	; 0x2e
 8001062:	d10e      	bne.n	8001082 <_vfiprintf_r+0x14e>
 8001064:	f898 3001 	ldrb.w	r3, [r8, #1]
 8001068:	2b2a      	cmp	r3, #42	; 0x2a
 800106a:	d138      	bne.n	80010de <_vfiprintf_r+0x1aa>
 800106c:	9b03      	ldr	r3, [sp, #12]
 800106e:	1d1a      	adds	r2, r3, #4
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	9203      	str	r2, [sp, #12]
 8001074:	2b00      	cmp	r3, #0
 8001076:	bfb8      	it	lt
 8001078:	f04f 33ff 	movlt.w	r3, #4294967295
 800107c:	f108 0802 	add.w	r8, r8, #2
 8001080:	9305      	str	r3, [sp, #20]
 8001082:	4d33      	ldr	r5, [pc, #204]	; (8001150 <_vfiprintf_r+0x21c>)
 8001084:	f898 1000 	ldrb.w	r1, [r8]
 8001088:	2203      	movs	r2, #3
 800108a:	4628      	mov	r0, r5
 800108c:	f7ff f8b0 	bl	80001f0 <memchr>
 8001090:	b140      	cbz	r0, 80010a4 <_vfiprintf_r+0x170>
 8001092:	2340      	movs	r3, #64	; 0x40
 8001094:	1b40      	subs	r0, r0, r5
 8001096:	fa03 f000 	lsl.w	r0, r3, r0
 800109a:	9b04      	ldr	r3, [sp, #16]
 800109c:	4303      	orrs	r3, r0
 800109e:	f108 0801 	add.w	r8, r8, #1
 80010a2:	9304      	str	r3, [sp, #16]
 80010a4:	f898 1000 	ldrb.w	r1, [r8]
 80010a8:	482a      	ldr	r0, [pc, #168]	; (8001154 <_vfiprintf_r+0x220>)
 80010aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80010ae:	2206      	movs	r2, #6
 80010b0:	f108 0701 	add.w	r7, r8, #1
 80010b4:	f7ff f89c 	bl	80001f0 <memchr>
 80010b8:	2800      	cmp	r0, #0
 80010ba:	d037      	beq.n	800112c <_vfiprintf_r+0x1f8>
 80010bc:	4b26      	ldr	r3, [pc, #152]	; (8001158 <_vfiprintf_r+0x224>)
 80010be:	bb1b      	cbnz	r3, 8001108 <_vfiprintf_r+0x1d4>
 80010c0:	9b03      	ldr	r3, [sp, #12]
 80010c2:	3307      	adds	r3, #7
 80010c4:	f023 0307 	bic.w	r3, r3, #7
 80010c8:	3308      	adds	r3, #8
 80010ca:	9303      	str	r3, [sp, #12]
 80010cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80010ce:	444b      	add	r3, r9
 80010d0:	9309      	str	r3, [sp, #36]	; 0x24
 80010d2:	e750      	b.n	8000f76 <_vfiprintf_r+0x42>
 80010d4:	fb05 3202 	mla	r2, r5, r2, r3
 80010d8:	2001      	movs	r0, #1
 80010da:	4688      	mov	r8, r1
 80010dc:	e78a      	b.n	8000ff4 <_vfiprintf_r+0xc0>
 80010de:	2300      	movs	r3, #0
 80010e0:	f108 0801 	add.w	r8, r8, #1
 80010e4:	9305      	str	r3, [sp, #20]
 80010e6:	4619      	mov	r1, r3
 80010e8:	250a      	movs	r5, #10
 80010ea:	4640      	mov	r0, r8
 80010ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80010f0:	3a30      	subs	r2, #48	; 0x30
 80010f2:	2a09      	cmp	r2, #9
 80010f4:	d903      	bls.n	80010fe <_vfiprintf_r+0x1ca>
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d0c3      	beq.n	8001082 <_vfiprintf_r+0x14e>
 80010fa:	9105      	str	r1, [sp, #20]
 80010fc:	e7c1      	b.n	8001082 <_vfiprintf_r+0x14e>
 80010fe:	fb05 2101 	mla	r1, r5, r1, r2
 8001102:	2301      	movs	r3, #1
 8001104:	4680      	mov	r8, r0
 8001106:	e7f0      	b.n	80010ea <_vfiprintf_r+0x1b6>
 8001108:	ab03      	add	r3, sp, #12
 800110a:	9300      	str	r3, [sp, #0]
 800110c:	4622      	mov	r2, r4
 800110e:	4b13      	ldr	r3, [pc, #76]	; (800115c <_vfiprintf_r+0x228>)
 8001110:	a904      	add	r1, sp, #16
 8001112:	4630      	mov	r0, r6
 8001114:	f3af 8000 	nop.w
 8001118:	f1b0 3fff 	cmp.w	r0, #4294967295
 800111c:	4681      	mov	r9, r0
 800111e:	d1d5      	bne.n	80010cc <_vfiprintf_r+0x198>
 8001120:	89a3      	ldrh	r3, [r4, #12]
 8001122:	065b      	lsls	r3, r3, #25
 8001124:	f53f af7e 	bmi.w	8001024 <_vfiprintf_r+0xf0>
 8001128:	9809      	ldr	r0, [sp, #36]	; 0x24
 800112a:	e77d      	b.n	8001028 <_vfiprintf_r+0xf4>
 800112c:	ab03      	add	r3, sp, #12
 800112e:	9300      	str	r3, [sp, #0]
 8001130:	4622      	mov	r2, r4
 8001132:	4b0a      	ldr	r3, [pc, #40]	; (800115c <_vfiprintf_r+0x228>)
 8001134:	a904      	add	r1, sp, #16
 8001136:	4630      	mov	r0, r6
 8001138:	f000 f892 	bl	8001260 <_printf_i>
 800113c:	e7ec      	b.n	8001118 <_vfiprintf_r+0x1e4>
 800113e:	bf00      	nop
 8001140:	08001fd0 	.word	0x08001fd0
 8001144:	08001f7c 	.word	0x08001f7c
 8001148:	08001ff0 	.word	0x08001ff0
 800114c:	08001fb0 	.word	0x08001fb0
 8001150:	08001f82 	.word	0x08001f82
 8001154:	08001f86 	.word	0x08001f86
 8001158:	00000000 	.word	0x00000000
 800115c:	08000f0f 	.word	0x08000f0f

08001160 <vfiprintf>:
 8001160:	4613      	mov	r3, r2
 8001162:	460a      	mov	r2, r1
 8001164:	4601      	mov	r1, r0
 8001166:	4802      	ldr	r0, [pc, #8]	; (8001170 <vfiprintf+0x10>)
 8001168:	6800      	ldr	r0, [r0, #0]
 800116a:	f7ff bee3 	b.w	8000f34 <_vfiprintf_r>
 800116e:	bf00      	nop
 8001170:	2000001c 	.word	0x2000001c

08001174 <_printf_common>:
 8001174:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001178:	4691      	mov	r9, r2
 800117a:	461f      	mov	r7, r3
 800117c:	688a      	ldr	r2, [r1, #8]
 800117e:	690b      	ldr	r3, [r1, #16]
 8001180:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001184:	4293      	cmp	r3, r2
 8001186:	bfb8      	it	lt
 8001188:	4613      	movlt	r3, r2
 800118a:	f8c9 3000 	str.w	r3, [r9]
 800118e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001192:	4606      	mov	r6, r0
 8001194:	460c      	mov	r4, r1
 8001196:	b112      	cbz	r2, 800119e <_printf_common+0x2a>
 8001198:	3301      	adds	r3, #1
 800119a:	f8c9 3000 	str.w	r3, [r9]
 800119e:	6823      	ldr	r3, [r4, #0]
 80011a0:	0699      	lsls	r1, r3, #26
 80011a2:	bf42      	ittt	mi
 80011a4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80011a8:	3302      	addmi	r3, #2
 80011aa:	f8c9 3000 	strmi.w	r3, [r9]
 80011ae:	6825      	ldr	r5, [r4, #0]
 80011b0:	f015 0506 	ands.w	r5, r5, #6
 80011b4:	d107      	bne.n	80011c6 <_printf_common+0x52>
 80011b6:	f104 0a19 	add.w	sl, r4, #25
 80011ba:	68e3      	ldr	r3, [r4, #12]
 80011bc:	f8d9 2000 	ldr.w	r2, [r9]
 80011c0:	1a9b      	subs	r3, r3, r2
 80011c2:	42ab      	cmp	r3, r5
 80011c4:	dc28      	bgt.n	8001218 <_printf_common+0xa4>
 80011c6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80011ca:	6822      	ldr	r2, [r4, #0]
 80011cc:	3300      	adds	r3, #0
 80011ce:	bf18      	it	ne
 80011d0:	2301      	movne	r3, #1
 80011d2:	0692      	lsls	r2, r2, #26
 80011d4:	d42d      	bmi.n	8001232 <_printf_common+0xbe>
 80011d6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80011da:	4639      	mov	r1, r7
 80011dc:	4630      	mov	r0, r6
 80011de:	47c0      	blx	r8
 80011e0:	3001      	adds	r0, #1
 80011e2:	d020      	beq.n	8001226 <_printf_common+0xb2>
 80011e4:	6823      	ldr	r3, [r4, #0]
 80011e6:	68e5      	ldr	r5, [r4, #12]
 80011e8:	f8d9 2000 	ldr.w	r2, [r9]
 80011ec:	f003 0306 	and.w	r3, r3, #6
 80011f0:	2b04      	cmp	r3, #4
 80011f2:	bf08      	it	eq
 80011f4:	1aad      	subeq	r5, r5, r2
 80011f6:	68a3      	ldr	r3, [r4, #8]
 80011f8:	6922      	ldr	r2, [r4, #16]
 80011fa:	bf0c      	ite	eq
 80011fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001200:	2500      	movne	r5, #0
 8001202:	4293      	cmp	r3, r2
 8001204:	bfc4      	itt	gt
 8001206:	1a9b      	subgt	r3, r3, r2
 8001208:	18ed      	addgt	r5, r5, r3
 800120a:	f04f 0900 	mov.w	r9, #0
 800120e:	341a      	adds	r4, #26
 8001210:	454d      	cmp	r5, r9
 8001212:	d11a      	bne.n	800124a <_printf_common+0xd6>
 8001214:	2000      	movs	r0, #0
 8001216:	e008      	b.n	800122a <_printf_common+0xb6>
 8001218:	2301      	movs	r3, #1
 800121a:	4652      	mov	r2, sl
 800121c:	4639      	mov	r1, r7
 800121e:	4630      	mov	r0, r6
 8001220:	47c0      	blx	r8
 8001222:	3001      	adds	r0, #1
 8001224:	d103      	bne.n	800122e <_printf_common+0xba>
 8001226:	f04f 30ff 	mov.w	r0, #4294967295
 800122a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800122e:	3501      	adds	r5, #1
 8001230:	e7c3      	b.n	80011ba <_printf_common+0x46>
 8001232:	18e1      	adds	r1, r4, r3
 8001234:	1c5a      	adds	r2, r3, #1
 8001236:	2030      	movs	r0, #48	; 0x30
 8001238:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800123c:	4422      	add	r2, r4
 800123e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001242:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001246:	3302      	adds	r3, #2
 8001248:	e7c5      	b.n	80011d6 <_printf_common+0x62>
 800124a:	2301      	movs	r3, #1
 800124c:	4622      	mov	r2, r4
 800124e:	4639      	mov	r1, r7
 8001250:	4630      	mov	r0, r6
 8001252:	47c0      	blx	r8
 8001254:	3001      	adds	r0, #1
 8001256:	d0e6      	beq.n	8001226 <_printf_common+0xb2>
 8001258:	f109 0901 	add.w	r9, r9, #1
 800125c:	e7d8      	b.n	8001210 <_printf_common+0x9c>
	...

08001260 <_printf_i>:
 8001260:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001264:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8001268:	460c      	mov	r4, r1
 800126a:	7e09      	ldrb	r1, [r1, #24]
 800126c:	b085      	sub	sp, #20
 800126e:	296e      	cmp	r1, #110	; 0x6e
 8001270:	4617      	mov	r7, r2
 8001272:	4606      	mov	r6, r0
 8001274:	4698      	mov	r8, r3
 8001276:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001278:	f000 80b3 	beq.w	80013e2 <_printf_i+0x182>
 800127c:	d822      	bhi.n	80012c4 <_printf_i+0x64>
 800127e:	2963      	cmp	r1, #99	; 0x63
 8001280:	d036      	beq.n	80012f0 <_printf_i+0x90>
 8001282:	d80a      	bhi.n	800129a <_printf_i+0x3a>
 8001284:	2900      	cmp	r1, #0
 8001286:	f000 80b9 	beq.w	80013fc <_printf_i+0x19c>
 800128a:	2958      	cmp	r1, #88	; 0x58
 800128c:	f000 8083 	beq.w	8001396 <_printf_i+0x136>
 8001290:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001294:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8001298:	e032      	b.n	8001300 <_printf_i+0xa0>
 800129a:	2964      	cmp	r1, #100	; 0x64
 800129c:	d001      	beq.n	80012a2 <_printf_i+0x42>
 800129e:	2969      	cmp	r1, #105	; 0x69
 80012a0:	d1f6      	bne.n	8001290 <_printf_i+0x30>
 80012a2:	6820      	ldr	r0, [r4, #0]
 80012a4:	6813      	ldr	r3, [r2, #0]
 80012a6:	0605      	lsls	r5, r0, #24
 80012a8:	f103 0104 	add.w	r1, r3, #4
 80012ac:	d52a      	bpl.n	8001304 <_printf_i+0xa4>
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	6011      	str	r1, [r2, #0]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	da03      	bge.n	80012be <_printf_i+0x5e>
 80012b6:	222d      	movs	r2, #45	; 0x2d
 80012b8:	425b      	negs	r3, r3
 80012ba:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80012be:	486f      	ldr	r0, [pc, #444]	; (800147c <_printf_i+0x21c>)
 80012c0:	220a      	movs	r2, #10
 80012c2:	e039      	b.n	8001338 <_printf_i+0xd8>
 80012c4:	2973      	cmp	r1, #115	; 0x73
 80012c6:	f000 809d 	beq.w	8001404 <_printf_i+0x1a4>
 80012ca:	d808      	bhi.n	80012de <_printf_i+0x7e>
 80012cc:	296f      	cmp	r1, #111	; 0x6f
 80012ce:	d020      	beq.n	8001312 <_printf_i+0xb2>
 80012d0:	2970      	cmp	r1, #112	; 0x70
 80012d2:	d1dd      	bne.n	8001290 <_printf_i+0x30>
 80012d4:	6823      	ldr	r3, [r4, #0]
 80012d6:	f043 0320 	orr.w	r3, r3, #32
 80012da:	6023      	str	r3, [r4, #0]
 80012dc:	e003      	b.n	80012e6 <_printf_i+0x86>
 80012de:	2975      	cmp	r1, #117	; 0x75
 80012e0:	d017      	beq.n	8001312 <_printf_i+0xb2>
 80012e2:	2978      	cmp	r1, #120	; 0x78
 80012e4:	d1d4      	bne.n	8001290 <_printf_i+0x30>
 80012e6:	2378      	movs	r3, #120	; 0x78
 80012e8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80012ec:	4864      	ldr	r0, [pc, #400]	; (8001480 <_printf_i+0x220>)
 80012ee:	e055      	b.n	800139c <_printf_i+0x13c>
 80012f0:	6813      	ldr	r3, [r2, #0]
 80012f2:	1d19      	adds	r1, r3, #4
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	6011      	str	r1, [r2, #0]
 80012f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80012fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001300:	2301      	movs	r3, #1
 8001302:	e08c      	b.n	800141e <_printf_i+0x1be>
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	6011      	str	r1, [r2, #0]
 8001308:	f010 0f40 	tst.w	r0, #64	; 0x40
 800130c:	bf18      	it	ne
 800130e:	b21b      	sxthne	r3, r3
 8001310:	e7cf      	b.n	80012b2 <_printf_i+0x52>
 8001312:	6813      	ldr	r3, [r2, #0]
 8001314:	6825      	ldr	r5, [r4, #0]
 8001316:	1d18      	adds	r0, r3, #4
 8001318:	6010      	str	r0, [r2, #0]
 800131a:	0628      	lsls	r0, r5, #24
 800131c:	d501      	bpl.n	8001322 <_printf_i+0xc2>
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	e002      	b.n	8001328 <_printf_i+0xc8>
 8001322:	0668      	lsls	r0, r5, #25
 8001324:	d5fb      	bpl.n	800131e <_printf_i+0xbe>
 8001326:	881b      	ldrh	r3, [r3, #0]
 8001328:	4854      	ldr	r0, [pc, #336]	; (800147c <_printf_i+0x21c>)
 800132a:	296f      	cmp	r1, #111	; 0x6f
 800132c:	bf14      	ite	ne
 800132e:	220a      	movne	r2, #10
 8001330:	2208      	moveq	r2, #8
 8001332:	2100      	movs	r1, #0
 8001334:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001338:	6865      	ldr	r5, [r4, #4]
 800133a:	60a5      	str	r5, [r4, #8]
 800133c:	2d00      	cmp	r5, #0
 800133e:	f2c0 8095 	blt.w	800146c <_printf_i+0x20c>
 8001342:	6821      	ldr	r1, [r4, #0]
 8001344:	f021 0104 	bic.w	r1, r1, #4
 8001348:	6021      	str	r1, [r4, #0]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d13d      	bne.n	80013ca <_printf_i+0x16a>
 800134e:	2d00      	cmp	r5, #0
 8001350:	f040 808e 	bne.w	8001470 <_printf_i+0x210>
 8001354:	4665      	mov	r5, ip
 8001356:	2a08      	cmp	r2, #8
 8001358:	d10b      	bne.n	8001372 <_printf_i+0x112>
 800135a:	6823      	ldr	r3, [r4, #0]
 800135c:	07db      	lsls	r3, r3, #31
 800135e:	d508      	bpl.n	8001372 <_printf_i+0x112>
 8001360:	6923      	ldr	r3, [r4, #16]
 8001362:	6862      	ldr	r2, [r4, #4]
 8001364:	429a      	cmp	r2, r3
 8001366:	bfde      	ittt	le
 8001368:	2330      	movle	r3, #48	; 0x30
 800136a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800136e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001372:	ebac 0305 	sub.w	r3, ip, r5
 8001376:	6123      	str	r3, [r4, #16]
 8001378:	f8cd 8000 	str.w	r8, [sp]
 800137c:	463b      	mov	r3, r7
 800137e:	aa03      	add	r2, sp, #12
 8001380:	4621      	mov	r1, r4
 8001382:	4630      	mov	r0, r6
 8001384:	f7ff fef6 	bl	8001174 <_printf_common>
 8001388:	3001      	adds	r0, #1
 800138a:	d14d      	bne.n	8001428 <_printf_i+0x1c8>
 800138c:	f04f 30ff 	mov.w	r0, #4294967295
 8001390:	b005      	add	sp, #20
 8001392:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001396:	4839      	ldr	r0, [pc, #228]	; (800147c <_printf_i+0x21c>)
 8001398:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800139c:	6813      	ldr	r3, [r2, #0]
 800139e:	6821      	ldr	r1, [r4, #0]
 80013a0:	1d1d      	adds	r5, r3, #4
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	6015      	str	r5, [r2, #0]
 80013a6:	060a      	lsls	r2, r1, #24
 80013a8:	d50b      	bpl.n	80013c2 <_printf_i+0x162>
 80013aa:	07ca      	lsls	r2, r1, #31
 80013ac:	bf44      	itt	mi
 80013ae:	f041 0120 	orrmi.w	r1, r1, #32
 80013b2:	6021      	strmi	r1, [r4, #0]
 80013b4:	b91b      	cbnz	r3, 80013be <_printf_i+0x15e>
 80013b6:	6822      	ldr	r2, [r4, #0]
 80013b8:	f022 0220 	bic.w	r2, r2, #32
 80013bc:	6022      	str	r2, [r4, #0]
 80013be:	2210      	movs	r2, #16
 80013c0:	e7b7      	b.n	8001332 <_printf_i+0xd2>
 80013c2:	064d      	lsls	r5, r1, #25
 80013c4:	bf48      	it	mi
 80013c6:	b29b      	uxthmi	r3, r3
 80013c8:	e7ef      	b.n	80013aa <_printf_i+0x14a>
 80013ca:	4665      	mov	r5, ip
 80013cc:	fbb3 f1f2 	udiv	r1, r3, r2
 80013d0:	fb02 3311 	mls	r3, r2, r1, r3
 80013d4:	5cc3      	ldrb	r3, [r0, r3]
 80013d6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80013da:	460b      	mov	r3, r1
 80013dc:	2900      	cmp	r1, #0
 80013de:	d1f5      	bne.n	80013cc <_printf_i+0x16c>
 80013e0:	e7b9      	b.n	8001356 <_printf_i+0xf6>
 80013e2:	6813      	ldr	r3, [r2, #0]
 80013e4:	6825      	ldr	r5, [r4, #0]
 80013e6:	6961      	ldr	r1, [r4, #20]
 80013e8:	1d18      	adds	r0, r3, #4
 80013ea:	6010      	str	r0, [r2, #0]
 80013ec:	0628      	lsls	r0, r5, #24
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	d501      	bpl.n	80013f6 <_printf_i+0x196>
 80013f2:	6019      	str	r1, [r3, #0]
 80013f4:	e002      	b.n	80013fc <_printf_i+0x19c>
 80013f6:	066a      	lsls	r2, r5, #25
 80013f8:	d5fb      	bpl.n	80013f2 <_printf_i+0x192>
 80013fa:	8019      	strh	r1, [r3, #0]
 80013fc:	2300      	movs	r3, #0
 80013fe:	6123      	str	r3, [r4, #16]
 8001400:	4665      	mov	r5, ip
 8001402:	e7b9      	b.n	8001378 <_printf_i+0x118>
 8001404:	6813      	ldr	r3, [r2, #0]
 8001406:	1d19      	adds	r1, r3, #4
 8001408:	6011      	str	r1, [r2, #0]
 800140a:	681d      	ldr	r5, [r3, #0]
 800140c:	6862      	ldr	r2, [r4, #4]
 800140e:	2100      	movs	r1, #0
 8001410:	4628      	mov	r0, r5
 8001412:	f7fe feed 	bl	80001f0 <memchr>
 8001416:	b108      	cbz	r0, 800141c <_printf_i+0x1bc>
 8001418:	1b40      	subs	r0, r0, r5
 800141a:	6060      	str	r0, [r4, #4]
 800141c:	6863      	ldr	r3, [r4, #4]
 800141e:	6123      	str	r3, [r4, #16]
 8001420:	2300      	movs	r3, #0
 8001422:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001426:	e7a7      	b.n	8001378 <_printf_i+0x118>
 8001428:	6923      	ldr	r3, [r4, #16]
 800142a:	462a      	mov	r2, r5
 800142c:	4639      	mov	r1, r7
 800142e:	4630      	mov	r0, r6
 8001430:	47c0      	blx	r8
 8001432:	3001      	adds	r0, #1
 8001434:	d0aa      	beq.n	800138c <_printf_i+0x12c>
 8001436:	6823      	ldr	r3, [r4, #0]
 8001438:	079b      	lsls	r3, r3, #30
 800143a:	d413      	bmi.n	8001464 <_printf_i+0x204>
 800143c:	68e0      	ldr	r0, [r4, #12]
 800143e:	9b03      	ldr	r3, [sp, #12]
 8001440:	4298      	cmp	r0, r3
 8001442:	bfb8      	it	lt
 8001444:	4618      	movlt	r0, r3
 8001446:	e7a3      	b.n	8001390 <_printf_i+0x130>
 8001448:	2301      	movs	r3, #1
 800144a:	464a      	mov	r2, r9
 800144c:	4639      	mov	r1, r7
 800144e:	4630      	mov	r0, r6
 8001450:	47c0      	blx	r8
 8001452:	3001      	adds	r0, #1
 8001454:	d09a      	beq.n	800138c <_printf_i+0x12c>
 8001456:	3501      	adds	r5, #1
 8001458:	68e3      	ldr	r3, [r4, #12]
 800145a:	9a03      	ldr	r2, [sp, #12]
 800145c:	1a9b      	subs	r3, r3, r2
 800145e:	42ab      	cmp	r3, r5
 8001460:	dcf2      	bgt.n	8001448 <_printf_i+0x1e8>
 8001462:	e7eb      	b.n	800143c <_printf_i+0x1dc>
 8001464:	2500      	movs	r5, #0
 8001466:	f104 0919 	add.w	r9, r4, #25
 800146a:	e7f5      	b.n	8001458 <_printf_i+0x1f8>
 800146c:	2b00      	cmp	r3, #0
 800146e:	d1ac      	bne.n	80013ca <_printf_i+0x16a>
 8001470:	7803      	ldrb	r3, [r0, #0]
 8001472:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001476:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800147a:	e76c      	b.n	8001356 <_printf_i+0xf6>
 800147c:	08001f8d 	.word	0x08001f8d
 8001480:	08001f9e 	.word	0x08001f9e

08001484 <iprintf>:
 8001484:	b40f      	push	{r0, r1, r2, r3}
 8001486:	4b0a      	ldr	r3, [pc, #40]	; (80014b0 <iprintf+0x2c>)
 8001488:	b513      	push	{r0, r1, r4, lr}
 800148a:	681c      	ldr	r4, [r3, #0]
 800148c:	b124      	cbz	r4, 8001498 <iprintf+0x14>
 800148e:	69a3      	ldr	r3, [r4, #24]
 8001490:	b913      	cbnz	r3, 8001498 <iprintf+0x14>
 8001492:	4620      	mov	r0, r4
 8001494:	f000 fa36 	bl	8001904 <__sinit>
 8001498:	ab05      	add	r3, sp, #20
 800149a:	9a04      	ldr	r2, [sp, #16]
 800149c:	68a1      	ldr	r1, [r4, #8]
 800149e:	9301      	str	r3, [sp, #4]
 80014a0:	4620      	mov	r0, r4
 80014a2:	f7ff fd47 	bl	8000f34 <_vfiprintf_r>
 80014a6:	b002      	add	sp, #8
 80014a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80014ac:	b004      	add	sp, #16
 80014ae:	4770      	bx	lr
 80014b0:	2000001c 	.word	0x2000001c

080014b4 <putchar>:
 80014b4:	b538      	push	{r3, r4, r5, lr}
 80014b6:	4b08      	ldr	r3, [pc, #32]	; (80014d8 <putchar+0x24>)
 80014b8:	681c      	ldr	r4, [r3, #0]
 80014ba:	4605      	mov	r5, r0
 80014bc:	b124      	cbz	r4, 80014c8 <putchar+0x14>
 80014be:	69a3      	ldr	r3, [r4, #24]
 80014c0:	b913      	cbnz	r3, 80014c8 <putchar+0x14>
 80014c2:	4620      	mov	r0, r4
 80014c4:	f000 fa1e 	bl	8001904 <__sinit>
 80014c8:	68a2      	ldr	r2, [r4, #8]
 80014ca:	4629      	mov	r1, r5
 80014cc:	4620      	mov	r0, r4
 80014ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80014d2:	f000 bbad 	b.w	8001c30 <_putc_r>
 80014d6:	bf00      	nop
 80014d8:	2000001c 	.word	0x2000001c

080014dc <_puts_r>:
 80014dc:	b570      	push	{r4, r5, r6, lr}
 80014de:	460e      	mov	r6, r1
 80014e0:	4605      	mov	r5, r0
 80014e2:	b118      	cbz	r0, 80014ec <_puts_r+0x10>
 80014e4:	6983      	ldr	r3, [r0, #24]
 80014e6:	b90b      	cbnz	r3, 80014ec <_puts_r+0x10>
 80014e8:	f000 fa0c 	bl	8001904 <__sinit>
 80014ec:	69ab      	ldr	r3, [r5, #24]
 80014ee:	68ac      	ldr	r4, [r5, #8]
 80014f0:	b913      	cbnz	r3, 80014f8 <_puts_r+0x1c>
 80014f2:	4628      	mov	r0, r5
 80014f4:	f000 fa06 	bl	8001904 <__sinit>
 80014f8:	4b23      	ldr	r3, [pc, #140]	; (8001588 <_puts_r+0xac>)
 80014fa:	429c      	cmp	r4, r3
 80014fc:	d117      	bne.n	800152e <_puts_r+0x52>
 80014fe:	686c      	ldr	r4, [r5, #4]
 8001500:	89a3      	ldrh	r3, [r4, #12]
 8001502:	071b      	lsls	r3, r3, #28
 8001504:	d51d      	bpl.n	8001542 <_puts_r+0x66>
 8001506:	6923      	ldr	r3, [r4, #16]
 8001508:	b1db      	cbz	r3, 8001542 <_puts_r+0x66>
 800150a:	3e01      	subs	r6, #1
 800150c:	68a3      	ldr	r3, [r4, #8]
 800150e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001512:	3b01      	subs	r3, #1
 8001514:	60a3      	str	r3, [r4, #8]
 8001516:	b9e9      	cbnz	r1, 8001554 <_puts_r+0x78>
 8001518:	2b00      	cmp	r3, #0
 800151a:	da2e      	bge.n	800157a <_puts_r+0x9e>
 800151c:	4622      	mov	r2, r4
 800151e:	210a      	movs	r1, #10
 8001520:	4628      	mov	r0, r5
 8001522:	f000 f83f 	bl	80015a4 <__swbuf_r>
 8001526:	3001      	adds	r0, #1
 8001528:	d011      	beq.n	800154e <_puts_r+0x72>
 800152a:	200a      	movs	r0, #10
 800152c:	e011      	b.n	8001552 <_puts_r+0x76>
 800152e:	4b17      	ldr	r3, [pc, #92]	; (800158c <_puts_r+0xb0>)
 8001530:	429c      	cmp	r4, r3
 8001532:	d101      	bne.n	8001538 <_puts_r+0x5c>
 8001534:	68ac      	ldr	r4, [r5, #8]
 8001536:	e7e3      	b.n	8001500 <_puts_r+0x24>
 8001538:	4b15      	ldr	r3, [pc, #84]	; (8001590 <_puts_r+0xb4>)
 800153a:	429c      	cmp	r4, r3
 800153c:	bf08      	it	eq
 800153e:	68ec      	ldreq	r4, [r5, #12]
 8001540:	e7de      	b.n	8001500 <_puts_r+0x24>
 8001542:	4621      	mov	r1, r4
 8001544:	4628      	mov	r0, r5
 8001546:	f000 f87f 	bl	8001648 <__swsetup_r>
 800154a:	2800      	cmp	r0, #0
 800154c:	d0dd      	beq.n	800150a <_puts_r+0x2e>
 800154e:	f04f 30ff 	mov.w	r0, #4294967295
 8001552:	bd70      	pop	{r4, r5, r6, pc}
 8001554:	2b00      	cmp	r3, #0
 8001556:	da04      	bge.n	8001562 <_puts_r+0x86>
 8001558:	69a2      	ldr	r2, [r4, #24]
 800155a:	429a      	cmp	r2, r3
 800155c:	dc06      	bgt.n	800156c <_puts_r+0x90>
 800155e:	290a      	cmp	r1, #10
 8001560:	d004      	beq.n	800156c <_puts_r+0x90>
 8001562:	6823      	ldr	r3, [r4, #0]
 8001564:	1c5a      	adds	r2, r3, #1
 8001566:	6022      	str	r2, [r4, #0]
 8001568:	7019      	strb	r1, [r3, #0]
 800156a:	e7cf      	b.n	800150c <_puts_r+0x30>
 800156c:	4622      	mov	r2, r4
 800156e:	4628      	mov	r0, r5
 8001570:	f000 f818 	bl	80015a4 <__swbuf_r>
 8001574:	3001      	adds	r0, #1
 8001576:	d1c9      	bne.n	800150c <_puts_r+0x30>
 8001578:	e7e9      	b.n	800154e <_puts_r+0x72>
 800157a:	6823      	ldr	r3, [r4, #0]
 800157c:	200a      	movs	r0, #10
 800157e:	1c5a      	adds	r2, r3, #1
 8001580:	6022      	str	r2, [r4, #0]
 8001582:	7018      	strb	r0, [r3, #0]
 8001584:	e7e5      	b.n	8001552 <_puts_r+0x76>
 8001586:	bf00      	nop
 8001588:	08001fd0 	.word	0x08001fd0
 800158c:	08001ff0 	.word	0x08001ff0
 8001590:	08001fb0 	.word	0x08001fb0

08001594 <puts>:
 8001594:	4b02      	ldr	r3, [pc, #8]	; (80015a0 <puts+0xc>)
 8001596:	4601      	mov	r1, r0
 8001598:	6818      	ldr	r0, [r3, #0]
 800159a:	f7ff bf9f 	b.w	80014dc <_puts_r>
 800159e:	bf00      	nop
 80015a0:	2000001c 	.word	0x2000001c

080015a4 <__swbuf_r>:
 80015a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015a6:	460e      	mov	r6, r1
 80015a8:	4614      	mov	r4, r2
 80015aa:	4605      	mov	r5, r0
 80015ac:	b118      	cbz	r0, 80015b6 <__swbuf_r+0x12>
 80015ae:	6983      	ldr	r3, [r0, #24]
 80015b0:	b90b      	cbnz	r3, 80015b6 <__swbuf_r+0x12>
 80015b2:	f000 f9a7 	bl	8001904 <__sinit>
 80015b6:	4b21      	ldr	r3, [pc, #132]	; (800163c <__swbuf_r+0x98>)
 80015b8:	429c      	cmp	r4, r3
 80015ba:	d12a      	bne.n	8001612 <__swbuf_r+0x6e>
 80015bc:	686c      	ldr	r4, [r5, #4]
 80015be:	69a3      	ldr	r3, [r4, #24]
 80015c0:	60a3      	str	r3, [r4, #8]
 80015c2:	89a3      	ldrh	r3, [r4, #12]
 80015c4:	071a      	lsls	r2, r3, #28
 80015c6:	d52e      	bpl.n	8001626 <__swbuf_r+0x82>
 80015c8:	6923      	ldr	r3, [r4, #16]
 80015ca:	b363      	cbz	r3, 8001626 <__swbuf_r+0x82>
 80015cc:	6923      	ldr	r3, [r4, #16]
 80015ce:	6820      	ldr	r0, [r4, #0]
 80015d0:	1ac0      	subs	r0, r0, r3
 80015d2:	6963      	ldr	r3, [r4, #20]
 80015d4:	b2f6      	uxtb	r6, r6
 80015d6:	4283      	cmp	r3, r0
 80015d8:	4637      	mov	r7, r6
 80015da:	dc04      	bgt.n	80015e6 <__swbuf_r+0x42>
 80015dc:	4621      	mov	r1, r4
 80015de:	4628      	mov	r0, r5
 80015e0:	f000 f926 	bl	8001830 <_fflush_r>
 80015e4:	bb28      	cbnz	r0, 8001632 <__swbuf_r+0x8e>
 80015e6:	68a3      	ldr	r3, [r4, #8]
 80015e8:	3b01      	subs	r3, #1
 80015ea:	60a3      	str	r3, [r4, #8]
 80015ec:	6823      	ldr	r3, [r4, #0]
 80015ee:	1c5a      	adds	r2, r3, #1
 80015f0:	6022      	str	r2, [r4, #0]
 80015f2:	701e      	strb	r6, [r3, #0]
 80015f4:	6963      	ldr	r3, [r4, #20]
 80015f6:	3001      	adds	r0, #1
 80015f8:	4283      	cmp	r3, r0
 80015fa:	d004      	beq.n	8001606 <__swbuf_r+0x62>
 80015fc:	89a3      	ldrh	r3, [r4, #12]
 80015fe:	07db      	lsls	r3, r3, #31
 8001600:	d519      	bpl.n	8001636 <__swbuf_r+0x92>
 8001602:	2e0a      	cmp	r6, #10
 8001604:	d117      	bne.n	8001636 <__swbuf_r+0x92>
 8001606:	4621      	mov	r1, r4
 8001608:	4628      	mov	r0, r5
 800160a:	f000 f911 	bl	8001830 <_fflush_r>
 800160e:	b190      	cbz	r0, 8001636 <__swbuf_r+0x92>
 8001610:	e00f      	b.n	8001632 <__swbuf_r+0x8e>
 8001612:	4b0b      	ldr	r3, [pc, #44]	; (8001640 <__swbuf_r+0x9c>)
 8001614:	429c      	cmp	r4, r3
 8001616:	d101      	bne.n	800161c <__swbuf_r+0x78>
 8001618:	68ac      	ldr	r4, [r5, #8]
 800161a:	e7d0      	b.n	80015be <__swbuf_r+0x1a>
 800161c:	4b09      	ldr	r3, [pc, #36]	; (8001644 <__swbuf_r+0xa0>)
 800161e:	429c      	cmp	r4, r3
 8001620:	bf08      	it	eq
 8001622:	68ec      	ldreq	r4, [r5, #12]
 8001624:	e7cb      	b.n	80015be <__swbuf_r+0x1a>
 8001626:	4621      	mov	r1, r4
 8001628:	4628      	mov	r0, r5
 800162a:	f000 f80d 	bl	8001648 <__swsetup_r>
 800162e:	2800      	cmp	r0, #0
 8001630:	d0cc      	beq.n	80015cc <__swbuf_r+0x28>
 8001632:	f04f 37ff 	mov.w	r7, #4294967295
 8001636:	4638      	mov	r0, r7
 8001638:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800163a:	bf00      	nop
 800163c:	08001fd0 	.word	0x08001fd0
 8001640:	08001ff0 	.word	0x08001ff0
 8001644:	08001fb0 	.word	0x08001fb0

08001648 <__swsetup_r>:
 8001648:	4b32      	ldr	r3, [pc, #200]	; (8001714 <__swsetup_r+0xcc>)
 800164a:	b570      	push	{r4, r5, r6, lr}
 800164c:	681d      	ldr	r5, [r3, #0]
 800164e:	4606      	mov	r6, r0
 8001650:	460c      	mov	r4, r1
 8001652:	b125      	cbz	r5, 800165e <__swsetup_r+0x16>
 8001654:	69ab      	ldr	r3, [r5, #24]
 8001656:	b913      	cbnz	r3, 800165e <__swsetup_r+0x16>
 8001658:	4628      	mov	r0, r5
 800165a:	f000 f953 	bl	8001904 <__sinit>
 800165e:	4b2e      	ldr	r3, [pc, #184]	; (8001718 <__swsetup_r+0xd0>)
 8001660:	429c      	cmp	r4, r3
 8001662:	d10f      	bne.n	8001684 <__swsetup_r+0x3c>
 8001664:	686c      	ldr	r4, [r5, #4]
 8001666:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800166a:	b29a      	uxth	r2, r3
 800166c:	0715      	lsls	r5, r2, #28
 800166e:	d42c      	bmi.n	80016ca <__swsetup_r+0x82>
 8001670:	06d0      	lsls	r0, r2, #27
 8001672:	d411      	bmi.n	8001698 <__swsetup_r+0x50>
 8001674:	2209      	movs	r2, #9
 8001676:	6032      	str	r2, [r6, #0]
 8001678:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800167c:	81a3      	strh	r3, [r4, #12]
 800167e:	f04f 30ff 	mov.w	r0, #4294967295
 8001682:	e03e      	b.n	8001702 <__swsetup_r+0xba>
 8001684:	4b25      	ldr	r3, [pc, #148]	; (800171c <__swsetup_r+0xd4>)
 8001686:	429c      	cmp	r4, r3
 8001688:	d101      	bne.n	800168e <__swsetup_r+0x46>
 800168a:	68ac      	ldr	r4, [r5, #8]
 800168c:	e7eb      	b.n	8001666 <__swsetup_r+0x1e>
 800168e:	4b24      	ldr	r3, [pc, #144]	; (8001720 <__swsetup_r+0xd8>)
 8001690:	429c      	cmp	r4, r3
 8001692:	bf08      	it	eq
 8001694:	68ec      	ldreq	r4, [r5, #12]
 8001696:	e7e6      	b.n	8001666 <__swsetup_r+0x1e>
 8001698:	0751      	lsls	r1, r2, #29
 800169a:	d512      	bpl.n	80016c2 <__swsetup_r+0x7a>
 800169c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800169e:	b141      	cbz	r1, 80016b2 <__swsetup_r+0x6a>
 80016a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80016a4:	4299      	cmp	r1, r3
 80016a6:	d002      	beq.n	80016ae <__swsetup_r+0x66>
 80016a8:	4630      	mov	r0, r6
 80016aa:	f000 fa19 	bl	8001ae0 <_free_r>
 80016ae:	2300      	movs	r3, #0
 80016b0:	6363      	str	r3, [r4, #52]	; 0x34
 80016b2:	89a3      	ldrh	r3, [r4, #12]
 80016b4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80016b8:	81a3      	strh	r3, [r4, #12]
 80016ba:	2300      	movs	r3, #0
 80016bc:	6063      	str	r3, [r4, #4]
 80016be:	6923      	ldr	r3, [r4, #16]
 80016c0:	6023      	str	r3, [r4, #0]
 80016c2:	89a3      	ldrh	r3, [r4, #12]
 80016c4:	f043 0308 	orr.w	r3, r3, #8
 80016c8:	81a3      	strh	r3, [r4, #12]
 80016ca:	6923      	ldr	r3, [r4, #16]
 80016cc:	b94b      	cbnz	r3, 80016e2 <__swsetup_r+0x9a>
 80016ce:	89a3      	ldrh	r3, [r4, #12]
 80016d0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80016d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016d8:	d003      	beq.n	80016e2 <__swsetup_r+0x9a>
 80016da:	4621      	mov	r1, r4
 80016dc:	4630      	mov	r0, r6
 80016de:	f000 f9bf 	bl	8001a60 <__smakebuf_r>
 80016e2:	89a2      	ldrh	r2, [r4, #12]
 80016e4:	f012 0301 	ands.w	r3, r2, #1
 80016e8:	d00c      	beq.n	8001704 <__swsetup_r+0xbc>
 80016ea:	2300      	movs	r3, #0
 80016ec:	60a3      	str	r3, [r4, #8]
 80016ee:	6963      	ldr	r3, [r4, #20]
 80016f0:	425b      	negs	r3, r3
 80016f2:	61a3      	str	r3, [r4, #24]
 80016f4:	6923      	ldr	r3, [r4, #16]
 80016f6:	b953      	cbnz	r3, 800170e <__swsetup_r+0xc6>
 80016f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80016fc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8001700:	d1ba      	bne.n	8001678 <__swsetup_r+0x30>
 8001702:	bd70      	pop	{r4, r5, r6, pc}
 8001704:	0792      	lsls	r2, r2, #30
 8001706:	bf58      	it	pl
 8001708:	6963      	ldrpl	r3, [r4, #20]
 800170a:	60a3      	str	r3, [r4, #8]
 800170c:	e7f2      	b.n	80016f4 <__swsetup_r+0xac>
 800170e:	2000      	movs	r0, #0
 8001710:	e7f7      	b.n	8001702 <__swsetup_r+0xba>
 8001712:	bf00      	nop
 8001714:	2000001c 	.word	0x2000001c
 8001718:	08001fd0 	.word	0x08001fd0
 800171c:	08001ff0 	.word	0x08001ff0
 8001720:	08001fb0 	.word	0x08001fb0

08001724 <__sflush_r>:
 8001724:	898a      	ldrh	r2, [r1, #12]
 8001726:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800172a:	4605      	mov	r5, r0
 800172c:	0710      	lsls	r0, r2, #28
 800172e:	460c      	mov	r4, r1
 8001730:	d458      	bmi.n	80017e4 <__sflush_r+0xc0>
 8001732:	684b      	ldr	r3, [r1, #4]
 8001734:	2b00      	cmp	r3, #0
 8001736:	dc05      	bgt.n	8001744 <__sflush_r+0x20>
 8001738:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800173a:	2b00      	cmp	r3, #0
 800173c:	dc02      	bgt.n	8001744 <__sflush_r+0x20>
 800173e:	2000      	movs	r0, #0
 8001740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001744:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001746:	2e00      	cmp	r6, #0
 8001748:	d0f9      	beq.n	800173e <__sflush_r+0x1a>
 800174a:	2300      	movs	r3, #0
 800174c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001750:	682f      	ldr	r7, [r5, #0]
 8001752:	6a21      	ldr	r1, [r4, #32]
 8001754:	602b      	str	r3, [r5, #0]
 8001756:	d032      	beq.n	80017be <__sflush_r+0x9a>
 8001758:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800175a:	89a3      	ldrh	r3, [r4, #12]
 800175c:	075a      	lsls	r2, r3, #29
 800175e:	d505      	bpl.n	800176c <__sflush_r+0x48>
 8001760:	6863      	ldr	r3, [r4, #4]
 8001762:	1ac0      	subs	r0, r0, r3
 8001764:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001766:	b10b      	cbz	r3, 800176c <__sflush_r+0x48>
 8001768:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800176a:	1ac0      	subs	r0, r0, r3
 800176c:	2300      	movs	r3, #0
 800176e:	4602      	mov	r2, r0
 8001770:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001772:	6a21      	ldr	r1, [r4, #32]
 8001774:	4628      	mov	r0, r5
 8001776:	47b0      	blx	r6
 8001778:	1c43      	adds	r3, r0, #1
 800177a:	89a3      	ldrh	r3, [r4, #12]
 800177c:	d106      	bne.n	800178c <__sflush_r+0x68>
 800177e:	6829      	ldr	r1, [r5, #0]
 8001780:	291d      	cmp	r1, #29
 8001782:	d848      	bhi.n	8001816 <__sflush_r+0xf2>
 8001784:	4a29      	ldr	r2, [pc, #164]	; (800182c <__sflush_r+0x108>)
 8001786:	40ca      	lsrs	r2, r1
 8001788:	07d6      	lsls	r6, r2, #31
 800178a:	d544      	bpl.n	8001816 <__sflush_r+0xf2>
 800178c:	2200      	movs	r2, #0
 800178e:	6062      	str	r2, [r4, #4]
 8001790:	04d9      	lsls	r1, r3, #19
 8001792:	6922      	ldr	r2, [r4, #16]
 8001794:	6022      	str	r2, [r4, #0]
 8001796:	d504      	bpl.n	80017a2 <__sflush_r+0x7e>
 8001798:	1c42      	adds	r2, r0, #1
 800179a:	d101      	bne.n	80017a0 <__sflush_r+0x7c>
 800179c:	682b      	ldr	r3, [r5, #0]
 800179e:	b903      	cbnz	r3, 80017a2 <__sflush_r+0x7e>
 80017a0:	6560      	str	r0, [r4, #84]	; 0x54
 80017a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80017a4:	602f      	str	r7, [r5, #0]
 80017a6:	2900      	cmp	r1, #0
 80017a8:	d0c9      	beq.n	800173e <__sflush_r+0x1a>
 80017aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80017ae:	4299      	cmp	r1, r3
 80017b0:	d002      	beq.n	80017b8 <__sflush_r+0x94>
 80017b2:	4628      	mov	r0, r5
 80017b4:	f000 f994 	bl	8001ae0 <_free_r>
 80017b8:	2000      	movs	r0, #0
 80017ba:	6360      	str	r0, [r4, #52]	; 0x34
 80017bc:	e7c0      	b.n	8001740 <__sflush_r+0x1c>
 80017be:	2301      	movs	r3, #1
 80017c0:	4628      	mov	r0, r5
 80017c2:	47b0      	blx	r6
 80017c4:	1c41      	adds	r1, r0, #1
 80017c6:	d1c8      	bne.n	800175a <__sflush_r+0x36>
 80017c8:	682b      	ldr	r3, [r5, #0]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d0c5      	beq.n	800175a <__sflush_r+0x36>
 80017ce:	2b1d      	cmp	r3, #29
 80017d0:	d001      	beq.n	80017d6 <__sflush_r+0xb2>
 80017d2:	2b16      	cmp	r3, #22
 80017d4:	d101      	bne.n	80017da <__sflush_r+0xb6>
 80017d6:	602f      	str	r7, [r5, #0]
 80017d8:	e7b1      	b.n	800173e <__sflush_r+0x1a>
 80017da:	89a3      	ldrh	r3, [r4, #12]
 80017dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017e0:	81a3      	strh	r3, [r4, #12]
 80017e2:	e7ad      	b.n	8001740 <__sflush_r+0x1c>
 80017e4:	690f      	ldr	r7, [r1, #16]
 80017e6:	2f00      	cmp	r7, #0
 80017e8:	d0a9      	beq.n	800173e <__sflush_r+0x1a>
 80017ea:	0793      	lsls	r3, r2, #30
 80017ec:	680e      	ldr	r6, [r1, #0]
 80017ee:	bf08      	it	eq
 80017f0:	694b      	ldreq	r3, [r1, #20]
 80017f2:	600f      	str	r7, [r1, #0]
 80017f4:	bf18      	it	ne
 80017f6:	2300      	movne	r3, #0
 80017f8:	eba6 0807 	sub.w	r8, r6, r7
 80017fc:	608b      	str	r3, [r1, #8]
 80017fe:	f1b8 0f00 	cmp.w	r8, #0
 8001802:	dd9c      	ble.n	800173e <__sflush_r+0x1a>
 8001804:	4643      	mov	r3, r8
 8001806:	463a      	mov	r2, r7
 8001808:	6a21      	ldr	r1, [r4, #32]
 800180a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800180c:	4628      	mov	r0, r5
 800180e:	47b0      	blx	r6
 8001810:	2800      	cmp	r0, #0
 8001812:	dc06      	bgt.n	8001822 <__sflush_r+0xfe>
 8001814:	89a3      	ldrh	r3, [r4, #12]
 8001816:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800181a:	81a3      	strh	r3, [r4, #12]
 800181c:	f04f 30ff 	mov.w	r0, #4294967295
 8001820:	e78e      	b.n	8001740 <__sflush_r+0x1c>
 8001822:	4407      	add	r7, r0
 8001824:	eba8 0800 	sub.w	r8, r8, r0
 8001828:	e7e9      	b.n	80017fe <__sflush_r+0xda>
 800182a:	bf00      	nop
 800182c:	20400001 	.word	0x20400001

08001830 <_fflush_r>:
 8001830:	b538      	push	{r3, r4, r5, lr}
 8001832:	690b      	ldr	r3, [r1, #16]
 8001834:	4605      	mov	r5, r0
 8001836:	460c      	mov	r4, r1
 8001838:	b1db      	cbz	r3, 8001872 <_fflush_r+0x42>
 800183a:	b118      	cbz	r0, 8001844 <_fflush_r+0x14>
 800183c:	6983      	ldr	r3, [r0, #24]
 800183e:	b90b      	cbnz	r3, 8001844 <_fflush_r+0x14>
 8001840:	f000 f860 	bl	8001904 <__sinit>
 8001844:	4b0c      	ldr	r3, [pc, #48]	; (8001878 <_fflush_r+0x48>)
 8001846:	429c      	cmp	r4, r3
 8001848:	d109      	bne.n	800185e <_fflush_r+0x2e>
 800184a:	686c      	ldr	r4, [r5, #4]
 800184c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001850:	b17b      	cbz	r3, 8001872 <_fflush_r+0x42>
 8001852:	4621      	mov	r1, r4
 8001854:	4628      	mov	r0, r5
 8001856:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800185a:	f7ff bf63 	b.w	8001724 <__sflush_r>
 800185e:	4b07      	ldr	r3, [pc, #28]	; (800187c <_fflush_r+0x4c>)
 8001860:	429c      	cmp	r4, r3
 8001862:	d101      	bne.n	8001868 <_fflush_r+0x38>
 8001864:	68ac      	ldr	r4, [r5, #8]
 8001866:	e7f1      	b.n	800184c <_fflush_r+0x1c>
 8001868:	4b05      	ldr	r3, [pc, #20]	; (8001880 <_fflush_r+0x50>)
 800186a:	429c      	cmp	r4, r3
 800186c:	bf08      	it	eq
 800186e:	68ec      	ldreq	r4, [r5, #12]
 8001870:	e7ec      	b.n	800184c <_fflush_r+0x1c>
 8001872:	2000      	movs	r0, #0
 8001874:	bd38      	pop	{r3, r4, r5, pc}
 8001876:	bf00      	nop
 8001878:	08001fd0 	.word	0x08001fd0
 800187c:	08001ff0 	.word	0x08001ff0
 8001880:	08001fb0 	.word	0x08001fb0

08001884 <std>:
 8001884:	2300      	movs	r3, #0
 8001886:	b510      	push	{r4, lr}
 8001888:	4604      	mov	r4, r0
 800188a:	e9c0 3300 	strd	r3, r3, [r0]
 800188e:	6083      	str	r3, [r0, #8]
 8001890:	8181      	strh	r1, [r0, #12]
 8001892:	6643      	str	r3, [r0, #100]	; 0x64
 8001894:	81c2      	strh	r2, [r0, #14]
 8001896:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800189a:	6183      	str	r3, [r0, #24]
 800189c:	4619      	mov	r1, r3
 800189e:	2208      	movs	r2, #8
 80018a0:	305c      	adds	r0, #92	; 0x5c
 80018a2:	f7ff fb15 	bl	8000ed0 <memset>
 80018a6:	4b05      	ldr	r3, [pc, #20]	; (80018bc <std+0x38>)
 80018a8:	6263      	str	r3, [r4, #36]	; 0x24
 80018aa:	4b05      	ldr	r3, [pc, #20]	; (80018c0 <std+0x3c>)
 80018ac:	62a3      	str	r3, [r4, #40]	; 0x28
 80018ae:	4b05      	ldr	r3, [pc, #20]	; (80018c4 <std+0x40>)
 80018b0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80018b2:	4b05      	ldr	r3, [pc, #20]	; (80018c8 <std+0x44>)
 80018b4:	6224      	str	r4, [r4, #32]
 80018b6:	6323      	str	r3, [r4, #48]	; 0x30
 80018b8:	bd10      	pop	{r4, pc}
 80018ba:	bf00      	nop
 80018bc:	08001cbd 	.word	0x08001cbd
 80018c0:	08001cdf 	.word	0x08001cdf
 80018c4:	08001d17 	.word	0x08001d17
 80018c8:	08001d3b 	.word	0x08001d3b

080018cc <_cleanup_r>:
 80018cc:	4901      	ldr	r1, [pc, #4]	; (80018d4 <_cleanup_r+0x8>)
 80018ce:	f000 b885 	b.w	80019dc <_fwalk_reent>
 80018d2:	bf00      	nop
 80018d4:	08001831 	.word	0x08001831

080018d8 <__sfmoreglue>:
 80018d8:	b570      	push	{r4, r5, r6, lr}
 80018da:	1e4a      	subs	r2, r1, #1
 80018dc:	2568      	movs	r5, #104	; 0x68
 80018de:	4355      	muls	r5, r2
 80018e0:	460e      	mov	r6, r1
 80018e2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80018e6:	f000 f949 	bl	8001b7c <_malloc_r>
 80018ea:	4604      	mov	r4, r0
 80018ec:	b140      	cbz	r0, 8001900 <__sfmoreglue+0x28>
 80018ee:	2100      	movs	r1, #0
 80018f0:	e9c0 1600 	strd	r1, r6, [r0]
 80018f4:	300c      	adds	r0, #12
 80018f6:	60a0      	str	r0, [r4, #8]
 80018f8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80018fc:	f7ff fae8 	bl	8000ed0 <memset>
 8001900:	4620      	mov	r0, r4
 8001902:	bd70      	pop	{r4, r5, r6, pc}

08001904 <__sinit>:
 8001904:	6983      	ldr	r3, [r0, #24]
 8001906:	b510      	push	{r4, lr}
 8001908:	4604      	mov	r4, r0
 800190a:	bb33      	cbnz	r3, 800195a <__sinit+0x56>
 800190c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8001910:	6503      	str	r3, [r0, #80]	; 0x50
 8001912:	4b12      	ldr	r3, [pc, #72]	; (800195c <__sinit+0x58>)
 8001914:	4a12      	ldr	r2, [pc, #72]	; (8001960 <__sinit+0x5c>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	6282      	str	r2, [r0, #40]	; 0x28
 800191a:	4298      	cmp	r0, r3
 800191c:	bf04      	itt	eq
 800191e:	2301      	moveq	r3, #1
 8001920:	6183      	streq	r3, [r0, #24]
 8001922:	f000 f81f 	bl	8001964 <__sfp>
 8001926:	6060      	str	r0, [r4, #4]
 8001928:	4620      	mov	r0, r4
 800192a:	f000 f81b 	bl	8001964 <__sfp>
 800192e:	60a0      	str	r0, [r4, #8]
 8001930:	4620      	mov	r0, r4
 8001932:	f000 f817 	bl	8001964 <__sfp>
 8001936:	2200      	movs	r2, #0
 8001938:	60e0      	str	r0, [r4, #12]
 800193a:	2104      	movs	r1, #4
 800193c:	6860      	ldr	r0, [r4, #4]
 800193e:	f7ff ffa1 	bl	8001884 <std>
 8001942:	2201      	movs	r2, #1
 8001944:	2109      	movs	r1, #9
 8001946:	68a0      	ldr	r0, [r4, #8]
 8001948:	f7ff ff9c 	bl	8001884 <std>
 800194c:	2202      	movs	r2, #2
 800194e:	2112      	movs	r1, #18
 8001950:	68e0      	ldr	r0, [r4, #12]
 8001952:	f7ff ff97 	bl	8001884 <std>
 8001956:	2301      	movs	r3, #1
 8001958:	61a3      	str	r3, [r4, #24]
 800195a:	bd10      	pop	{r4, pc}
 800195c:	08001f78 	.word	0x08001f78
 8001960:	080018cd 	.word	0x080018cd

08001964 <__sfp>:
 8001964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001966:	4b1b      	ldr	r3, [pc, #108]	; (80019d4 <__sfp+0x70>)
 8001968:	681e      	ldr	r6, [r3, #0]
 800196a:	69b3      	ldr	r3, [r6, #24]
 800196c:	4607      	mov	r7, r0
 800196e:	b913      	cbnz	r3, 8001976 <__sfp+0x12>
 8001970:	4630      	mov	r0, r6
 8001972:	f7ff ffc7 	bl	8001904 <__sinit>
 8001976:	3648      	adds	r6, #72	; 0x48
 8001978:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800197c:	3b01      	subs	r3, #1
 800197e:	d503      	bpl.n	8001988 <__sfp+0x24>
 8001980:	6833      	ldr	r3, [r6, #0]
 8001982:	b133      	cbz	r3, 8001992 <__sfp+0x2e>
 8001984:	6836      	ldr	r6, [r6, #0]
 8001986:	e7f7      	b.n	8001978 <__sfp+0x14>
 8001988:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800198c:	b16d      	cbz	r5, 80019aa <__sfp+0x46>
 800198e:	3468      	adds	r4, #104	; 0x68
 8001990:	e7f4      	b.n	800197c <__sfp+0x18>
 8001992:	2104      	movs	r1, #4
 8001994:	4638      	mov	r0, r7
 8001996:	f7ff ff9f 	bl	80018d8 <__sfmoreglue>
 800199a:	6030      	str	r0, [r6, #0]
 800199c:	2800      	cmp	r0, #0
 800199e:	d1f1      	bne.n	8001984 <__sfp+0x20>
 80019a0:	230c      	movs	r3, #12
 80019a2:	603b      	str	r3, [r7, #0]
 80019a4:	4604      	mov	r4, r0
 80019a6:	4620      	mov	r0, r4
 80019a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80019aa:	4b0b      	ldr	r3, [pc, #44]	; (80019d8 <__sfp+0x74>)
 80019ac:	6665      	str	r5, [r4, #100]	; 0x64
 80019ae:	e9c4 5500 	strd	r5, r5, [r4]
 80019b2:	60a5      	str	r5, [r4, #8]
 80019b4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80019b8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80019bc:	2208      	movs	r2, #8
 80019be:	4629      	mov	r1, r5
 80019c0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80019c4:	f7ff fa84 	bl	8000ed0 <memset>
 80019c8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80019cc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80019d0:	e7e9      	b.n	80019a6 <__sfp+0x42>
 80019d2:	bf00      	nop
 80019d4:	08001f78 	.word	0x08001f78
 80019d8:	ffff0001 	.word	0xffff0001

080019dc <_fwalk_reent>:
 80019dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80019e0:	4680      	mov	r8, r0
 80019e2:	4689      	mov	r9, r1
 80019e4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80019e8:	2600      	movs	r6, #0
 80019ea:	b914      	cbnz	r4, 80019f2 <_fwalk_reent+0x16>
 80019ec:	4630      	mov	r0, r6
 80019ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80019f2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80019f6:	3f01      	subs	r7, #1
 80019f8:	d501      	bpl.n	80019fe <_fwalk_reent+0x22>
 80019fa:	6824      	ldr	r4, [r4, #0]
 80019fc:	e7f5      	b.n	80019ea <_fwalk_reent+0xe>
 80019fe:	89ab      	ldrh	r3, [r5, #12]
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d907      	bls.n	8001a14 <_fwalk_reent+0x38>
 8001a04:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001a08:	3301      	adds	r3, #1
 8001a0a:	d003      	beq.n	8001a14 <_fwalk_reent+0x38>
 8001a0c:	4629      	mov	r1, r5
 8001a0e:	4640      	mov	r0, r8
 8001a10:	47c8      	blx	r9
 8001a12:	4306      	orrs	r6, r0
 8001a14:	3568      	adds	r5, #104	; 0x68
 8001a16:	e7ee      	b.n	80019f6 <_fwalk_reent+0x1a>

08001a18 <__swhatbuf_r>:
 8001a18:	b570      	push	{r4, r5, r6, lr}
 8001a1a:	460e      	mov	r6, r1
 8001a1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001a20:	2900      	cmp	r1, #0
 8001a22:	b096      	sub	sp, #88	; 0x58
 8001a24:	4614      	mov	r4, r2
 8001a26:	461d      	mov	r5, r3
 8001a28:	da07      	bge.n	8001a3a <__swhatbuf_r+0x22>
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	602b      	str	r3, [r5, #0]
 8001a2e:	89b3      	ldrh	r3, [r6, #12]
 8001a30:	061a      	lsls	r2, r3, #24
 8001a32:	d410      	bmi.n	8001a56 <__swhatbuf_r+0x3e>
 8001a34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a38:	e00e      	b.n	8001a58 <__swhatbuf_r+0x40>
 8001a3a:	466a      	mov	r2, sp
 8001a3c:	f000 f9a4 	bl	8001d88 <_fstat_r>
 8001a40:	2800      	cmp	r0, #0
 8001a42:	dbf2      	blt.n	8001a2a <__swhatbuf_r+0x12>
 8001a44:	9a01      	ldr	r2, [sp, #4]
 8001a46:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001a4a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001a4e:	425a      	negs	r2, r3
 8001a50:	415a      	adcs	r2, r3
 8001a52:	602a      	str	r2, [r5, #0]
 8001a54:	e7ee      	b.n	8001a34 <__swhatbuf_r+0x1c>
 8001a56:	2340      	movs	r3, #64	; 0x40
 8001a58:	2000      	movs	r0, #0
 8001a5a:	6023      	str	r3, [r4, #0]
 8001a5c:	b016      	add	sp, #88	; 0x58
 8001a5e:	bd70      	pop	{r4, r5, r6, pc}

08001a60 <__smakebuf_r>:
 8001a60:	898b      	ldrh	r3, [r1, #12]
 8001a62:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001a64:	079d      	lsls	r5, r3, #30
 8001a66:	4606      	mov	r6, r0
 8001a68:	460c      	mov	r4, r1
 8001a6a:	d507      	bpl.n	8001a7c <__smakebuf_r+0x1c>
 8001a6c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001a70:	6023      	str	r3, [r4, #0]
 8001a72:	6123      	str	r3, [r4, #16]
 8001a74:	2301      	movs	r3, #1
 8001a76:	6163      	str	r3, [r4, #20]
 8001a78:	b002      	add	sp, #8
 8001a7a:	bd70      	pop	{r4, r5, r6, pc}
 8001a7c:	ab01      	add	r3, sp, #4
 8001a7e:	466a      	mov	r2, sp
 8001a80:	f7ff ffca 	bl	8001a18 <__swhatbuf_r>
 8001a84:	9900      	ldr	r1, [sp, #0]
 8001a86:	4605      	mov	r5, r0
 8001a88:	4630      	mov	r0, r6
 8001a8a:	f000 f877 	bl	8001b7c <_malloc_r>
 8001a8e:	b948      	cbnz	r0, 8001aa4 <__smakebuf_r+0x44>
 8001a90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001a94:	059a      	lsls	r2, r3, #22
 8001a96:	d4ef      	bmi.n	8001a78 <__smakebuf_r+0x18>
 8001a98:	f023 0303 	bic.w	r3, r3, #3
 8001a9c:	f043 0302 	orr.w	r3, r3, #2
 8001aa0:	81a3      	strh	r3, [r4, #12]
 8001aa2:	e7e3      	b.n	8001a6c <__smakebuf_r+0xc>
 8001aa4:	4b0d      	ldr	r3, [pc, #52]	; (8001adc <__smakebuf_r+0x7c>)
 8001aa6:	62b3      	str	r3, [r6, #40]	; 0x28
 8001aa8:	89a3      	ldrh	r3, [r4, #12]
 8001aaa:	6020      	str	r0, [r4, #0]
 8001aac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ab0:	81a3      	strh	r3, [r4, #12]
 8001ab2:	9b00      	ldr	r3, [sp, #0]
 8001ab4:	6163      	str	r3, [r4, #20]
 8001ab6:	9b01      	ldr	r3, [sp, #4]
 8001ab8:	6120      	str	r0, [r4, #16]
 8001aba:	b15b      	cbz	r3, 8001ad4 <__smakebuf_r+0x74>
 8001abc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001ac0:	4630      	mov	r0, r6
 8001ac2:	f000 f973 	bl	8001dac <_isatty_r>
 8001ac6:	b128      	cbz	r0, 8001ad4 <__smakebuf_r+0x74>
 8001ac8:	89a3      	ldrh	r3, [r4, #12]
 8001aca:	f023 0303 	bic.w	r3, r3, #3
 8001ace:	f043 0301 	orr.w	r3, r3, #1
 8001ad2:	81a3      	strh	r3, [r4, #12]
 8001ad4:	89a3      	ldrh	r3, [r4, #12]
 8001ad6:	431d      	orrs	r5, r3
 8001ad8:	81a5      	strh	r5, [r4, #12]
 8001ada:	e7cd      	b.n	8001a78 <__smakebuf_r+0x18>
 8001adc:	080018cd 	.word	0x080018cd

08001ae0 <_free_r>:
 8001ae0:	b538      	push	{r3, r4, r5, lr}
 8001ae2:	4605      	mov	r5, r0
 8001ae4:	2900      	cmp	r1, #0
 8001ae6:	d045      	beq.n	8001b74 <_free_r+0x94>
 8001ae8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001aec:	1f0c      	subs	r4, r1, #4
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	bfb8      	it	lt
 8001af2:	18e4      	addlt	r4, r4, r3
 8001af4:	f000 f97c 	bl	8001df0 <__malloc_lock>
 8001af8:	4a1f      	ldr	r2, [pc, #124]	; (8001b78 <_free_r+0x98>)
 8001afa:	6813      	ldr	r3, [r2, #0]
 8001afc:	4610      	mov	r0, r2
 8001afe:	b933      	cbnz	r3, 8001b0e <_free_r+0x2e>
 8001b00:	6063      	str	r3, [r4, #4]
 8001b02:	6014      	str	r4, [r2, #0]
 8001b04:	4628      	mov	r0, r5
 8001b06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001b0a:	f000 b972 	b.w	8001df2 <__malloc_unlock>
 8001b0e:	42a3      	cmp	r3, r4
 8001b10:	d90c      	bls.n	8001b2c <_free_r+0x4c>
 8001b12:	6821      	ldr	r1, [r4, #0]
 8001b14:	1862      	adds	r2, r4, r1
 8001b16:	4293      	cmp	r3, r2
 8001b18:	bf04      	itt	eq
 8001b1a:	681a      	ldreq	r2, [r3, #0]
 8001b1c:	685b      	ldreq	r3, [r3, #4]
 8001b1e:	6063      	str	r3, [r4, #4]
 8001b20:	bf04      	itt	eq
 8001b22:	1852      	addeq	r2, r2, r1
 8001b24:	6022      	streq	r2, [r4, #0]
 8001b26:	6004      	str	r4, [r0, #0]
 8001b28:	e7ec      	b.n	8001b04 <_free_r+0x24>
 8001b2a:	4613      	mov	r3, r2
 8001b2c:	685a      	ldr	r2, [r3, #4]
 8001b2e:	b10a      	cbz	r2, 8001b34 <_free_r+0x54>
 8001b30:	42a2      	cmp	r2, r4
 8001b32:	d9fa      	bls.n	8001b2a <_free_r+0x4a>
 8001b34:	6819      	ldr	r1, [r3, #0]
 8001b36:	1858      	adds	r0, r3, r1
 8001b38:	42a0      	cmp	r0, r4
 8001b3a:	d10b      	bne.n	8001b54 <_free_r+0x74>
 8001b3c:	6820      	ldr	r0, [r4, #0]
 8001b3e:	4401      	add	r1, r0
 8001b40:	1858      	adds	r0, r3, r1
 8001b42:	4282      	cmp	r2, r0
 8001b44:	6019      	str	r1, [r3, #0]
 8001b46:	d1dd      	bne.n	8001b04 <_free_r+0x24>
 8001b48:	6810      	ldr	r0, [r2, #0]
 8001b4a:	6852      	ldr	r2, [r2, #4]
 8001b4c:	605a      	str	r2, [r3, #4]
 8001b4e:	4401      	add	r1, r0
 8001b50:	6019      	str	r1, [r3, #0]
 8001b52:	e7d7      	b.n	8001b04 <_free_r+0x24>
 8001b54:	d902      	bls.n	8001b5c <_free_r+0x7c>
 8001b56:	230c      	movs	r3, #12
 8001b58:	602b      	str	r3, [r5, #0]
 8001b5a:	e7d3      	b.n	8001b04 <_free_r+0x24>
 8001b5c:	6820      	ldr	r0, [r4, #0]
 8001b5e:	1821      	adds	r1, r4, r0
 8001b60:	428a      	cmp	r2, r1
 8001b62:	bf04      	itt	eq
 8001b64:	6811      	ldreq	r1, [r2, #0]
 8001b66:	6852      	ldreq	r2, [r2, #4]
 8001b68:	6062      	str	r2, [r4, #4]
 8001b6a:	bf04      	itt	eq
 8001b6c:	1809      	addeq	r1, r1, r0
 8001b6e:	6021      	streq	r1, [r4, #0]
 8001b70:	605c      	str	r4, [r3, #4]
 8001b72:	e7c7      	b.n	8001b04 <_free_r+0x24>
 8001b74:	bd38      	pop	{r3, r4, r5, pc}
 8001b76:	bf00      	nop
 8001b78:	200000a0 	.word	0x200000a0

08001b7c <_malloc_r>:
 8001b7c:	b570      	push	{r4, r5, r6, lr}
 8001b7e:	1ccd      	adds	r5, r1, #3
 8001b80:	f025 0503 	bic.w	r5, r5, #3
 8001b84:	3508      	adds	r5, #8
 8001b86:	2d0c      	cmp	r5, #12
 8001b88:	bf38      	it	cc
 8001b8a:	250c      	movcc	r5, #12
 8001b8c:	2d00      	cmp	r5, #0
 8001b8e:	4606      	mov	r6, r0
 8001b90:	db01      	blt.n	8001b96 <_malloc_r+0x1a>
 8001b92:	42a9      	cmp	r1, r5
 8001b94:	d903      	bls.n	8001b9e <_malloc_r+0x22>
 8001b96:	230c      	movs	r3, #12
 8001b98:	6033      	str	r3, [r6, #0]
 8001b9a:	2000      	movs	r0, #0
 8001b9c:	bd70      	pop	{r4, r5, r6, pc}
 8001b9e:	f000 f927 	bl	8001df0 <__malloc_lock>
 8001ba2:	4a21      	ldr	r2, [pc, #132]	; (8001c28 <_malloc_r+0xac>)
 8001ba4:	6814      	ldr	r4, [r2, #0]
 8001ba6:	4621      	mov	r1, r4
 8001ba8:	b991      	cbnz	r1, 8001bd0 <_malloc_r+0x54>
 8001baa:	4c20      	ldr	r4, [pc, #128]	; (8001c2c <_malloc_r+0xb0>)
 8001bac:	6823      	ldr	r3, [r4, #0]
 8001bae:	b91b      	cbnz	r3, 8001bb8 <_malloc_r+0x3c>
 8001bb0:	4630      	mov	r0, r6
 8001bb2:	f000 f873 	bl	8001c9c <_sbrk_r>
 8001bb6:	6020      	str	r0, [r4, #0]
 8001bb8:	4629      	mov	r1, r5
 8001bba:	4630      	mov	r0, r6
 8001bbc:	f000 f86e 	bl	8001c9c <_sbrk_r>
 8001bc0:	1c43      	adds	r3, r0, #1
 8001bc2:	d124      	bne.n	8001c0e <_malloc_r+0x92>
 8001bc4:	230c      	movs	r3, #12
 8001bc6:	6033      	str	r3, [r6, #0]
 8001bc8:	4630      	mov	r0, r6
 8001bca:	f000 f912 	bl	8001df2 <__malloc_unlock>
 8001bce:	e7e4      	b.n	8001b9a <_malloc_r+0x1e>
 8001bd0:	680b      	ldr	r3, [r1, #0]
 8001bd2:	1b5b      	subs	r3, r3, r5
 8001bd4:	d418      	bmi.n	8001c08 <_malloc_r+0x8c>
 8001bd6:	2b0b      	cmp	r3, #11
 8001bd8:	d90f      	bls.n	8001bfa <_malloc_r+0x7e>
 8001bda:	600b      	str	r3, [r1, #0]
 8001bdc:	50cd      	str	r5, [r1, r3]
 8001bde:	18cc      	adds	r4, r1, r3
 8001be0:	4630      	mov	r0, r6
 8001be2:	f000 f906 	bl	8001df2 <__malloc_unlock>
 8001be6:	f104 000b 	add.w	r0, r4, #11
 8001bea:	1d23      	adds	r3, r4, #4
 8001bec:	f020 0007 	bic.w	r0, r0, #7
 8001bf0:	1ac3      	subs	r3, r0, r3
 8001bf2:	d0d3      	beq.n	8001b9c <_malloc_r+0x20>
 8001bf4:	425a      	negs	r2, r3
 8001bf6:	50e2      	str	r2, [r4, r3]
 8001bf8:	e7d0      	b.n	8001b9c <_malloc_r+0x20>
 8001bfa:	428c      	cmp	r4, r1
 8001bfc:	684b      	ldr	r3, [r1, #4]
 8001bfe:	bf16      	itet	ne
 8001c00:	6063      	strne	r3, [r4, #4]
 8001c02:	6013      	streq	r3, [r2, #0]
 8001c04:	460c      	movne	r4, r1
 8001c06:	e7eb      	b.n	8001be0 <_malloc_r+0x64>
 8001c08:	460c      	mov	r4, r1
 8001c0a:	6849      	ldr	r1, [r1, #4]
 8001c0c:	e7cc      	b.n	8001ba8 <_malloc_r+0x2c>
 8001c0e:	1cc4      	adds	r4, r0, #3
 8001c10:	f024 0403 	bic.w	r4, r4, #3
 8001c14:	42a0      	cmp	r0, r4
 8001c16:	d005      	beq.n	8001c24 <_malloc_r+0xa8>
 8001c18:	1a21      	subs	r1, r4, r0
 8001c1a:	4630      	mov	r0, r6
 8001c1c:	f000 f83e 	bl	8001c9c <_sbrk_r>
 8001c20:	3001      	adds	r0, #1
 8001c22:	d0cf      	beq.n	8001bc4 <_malloc_r+0x48>
 8001c24:	6025      	str	r5, [r4, #0]
 8001c26:	e7db      	b.n	8001be0 <_malloc_r+0x64>
 8001c28:	200000a0 	.word	0x200000a0
 8001c2c:	200000a4 	.word	0x200000a4

08001c30 <_putc_r>:
 8001c30:	b570      	push	{r4, r5, r6, lr}
 8001c32:	460d      	mov	r5, r1
 8001c34:	4614      	mov	r4, r2
 8001c36:	4606      	mov	r6, r0
 8001c38:	b118      	cbz	r0, 8001c42 <_putc_r+0x12>
 8001c3a:	6983      	ldr	r3, [r0, #24]
 8001c3c:	b90b      	cbnz	r3, 8001c42 <_putc_r+0x12>
 8001c3e:	f7ff fe61 	bl	8001904 <__sinit>
 8001c42:	4b13      	ldr	r3, [pc, #76]	; (8001c90 <_putc_r+0x60>)
 8001c44:	429c      	cmp	r4, r3
 8001c46:	d112      	bne.n	8001c6e <_putc_r+0x3e>
 8001c48:	6874      	ldr	r4, [r6, #4]
 8001c4a:	68a3      	ldr	r3, [r4, #8]
 8001c4c:	3b01      	subs	r3, #1
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	60a3      	str	r3, [r4, #8]
 8001c52:	da16      	bge.n	8001c82 <_putc_r+0x52>
 8001c54:	69a2      	ldr	r2, [r4, #24]
 8001c56:	4293      	cmp	r3, r2
 8001c58:	db02      	blt.n	8001c60 <_putc_r+0x30>
 8001c5a:	b2eb      	uxtb	r3, r5
 8001c5c:	2b0a      	cmp	r3, #10
 8001c5e:	d110      	bne.n	8001c82 <_putc_r+0x52>
 8001c60:	4622      	mov	r2, r4
 8001c62:	4629      	mov	r1, r5
 8001c64:	4630      	mov	r0, r6
 8001c66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001c6a:	f7ff bc9b 	b.w	80015a4 <__swbuf_r>
 8001c6e:	4b09      	ldr	r3, [pc, #36]	; (8001c94 <_putc_r+0x64>)
 8001c70:	429c      	cmp	r4, r3
 8001c72:	d101      	bne.n	8001c78 <_putc_r+0x48>
 8001c74:	68b4      	ldr	r4, [r6, #8]
 8001c76:	e7e8      	b.n	8001c4a <_putc_r+0x1a>
 8001c78:	4b07      	ldr	r3, [pc, #28]	; (8001c98 <_putc_r+0x68>)
 8001c7a:	429c      	cmp	r4, r3
 8001c7c:	bf08      	it	eq
 8001c7e:	68f4      	ldreq	r4, [r6, #12]
 8001c80:	e7e3      	b.n	8001c4a <_putc_r+0x1a>
 8001c82:	6823      	ldr	r3, [r4, #0]
 8001c84:	1c5a      	adds	r2, r3, #1
 8001c86:	6022      	str	r2, [r4, #0]
 8001c88:	701d      	strb	r5, [r3, #0]
 8001c8a:	b2e8      	uxtb	r0, r5
 8001c8c:	bd70      	pop	{r4, r5, r6, pc}
 8001c8e:	bf00      	nop
 8001c90:	08001fd0 	.word	0x08001fd0
 8001c94:	08001ff0 	.word	0x08001ff0
 8001c98:	08001fb0 	.word	0x08001fb0

08001c9c <_sbrk_r>:
 8001c9c:	b538      	push	{r3, r4, r5, lr}
 8001c9e:	4c06      	ldr	r4, [pc, #24]	; (8001cb8 <_sbrk_r+0x1c>)
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	4605      	mov	r5, r0
 8001ca4:	4608      	mov	r0, r1
 8001ca6:	6023      	str	r3, [r4, #0]
 8001ca8:	f000 f8de 	bl	8001e68 <_sbrk>
 8001cac:	1c43      	adds	r3, r0, #1
 8001cae:	d102      	bne.n	8001cb6 <_sbrk_r+0x1a>
 8001cb0:	6823      	ldr	r3, [r4, #0]
 8001cb2:	b103      	cbz	r3, 8001cb6 <_sbrk_r+0x1a>
 8001cb4:	602b      	str	r3, [r5, #0]
 8001cb6:	bd38      	pop	{r3, r4, r5, pc}
 8001cb8:	200000e0 	.word	0x200000e0

08001cbc <__sread>:
 8001cbc:	b510      	push	{r4, lr}
 8001cbe:	460c      	mov	r4, r1
 8001cc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001cc4:	f000 f896 	bl	8001df4 <_read_r>
 8001cc8:	2800      	cmp	r0, #0
 8001cca:	bfab      	itete	ge
 8001ccc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001cce:	89a3      	ldrhlt	r3, [r4, #12]
 8001cd0:	181b      	addge	r3, r3, r0
 8001cd2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001cd6:	bfac      	ite	ge
 8001cd8:	6563      	strge	r3, [r4, #84]	; 0x54
 8001cda:	81a3      	strhlt	r3, [r4, #12]
 8001cdc:	bd10      	pop	{r4, pc}

08001cde <__swrite>:
 8001cde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ce2:	461f      	mov	r7, r3
 8001ce4:	898b      	ldrh	r3, [r1, #12]
 8001ce6:	05db      	lsls	r3, r3, #23
 8001ce8:	4605      	mov	r5, r0
 8001cea:	460c      	mov	r4, r1
 8001cec:	4616      	mov	r6, r2
 8001cee:	d505      	bpl.n	8001cfc <__swrite+0x1e>
 8001cf0:	2302      	movs	r3, #2
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001cf8:	f000 f868 	bl	8001dcc <_lseek_r>
 8001cfc:	89a3      	ldrh	r3, [r4, #12]
 8001cfe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001d02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001d06:	81a3      	strh	r3, [r4, #12]
 8001d08:	4632      	mov	r2, r6
 8001d0a:	463b      	mov	r3, r7
 8001d0c:	4628      	mov	r0, r5
 8001d0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001d12:	f000 b817 	b.w	8001d44 <_write_r>

08001d16 <__sseek>:
 8001d16:	b510      	push	{r4, lr}
 8001d18:	460c      	mov	r4, r1
 8001d1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d1e:	f000 f855 	bl	8001dcc <_lseek_r>
 8001d22:	1c43      	adds	r3, r0, #1
 8001d24:	89a3      	ldrh	r3, [r4, #12]
 8001d26:	bf15      	itete	ne
 8001d28:	6560      	strne	r0, [r4, #84]	; 0x54
 8001d2a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001d2e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001d32:	81a3      	strheq	r3, [r4, #12]
 8001d34:	bf18      	it	ne
 8001d36:	81a3      	strhne	r3, [r4, #12]
 8001d38:	bd10      	pop	{r4, pc}

08001d3a <__sclose>:
 8001d3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d3e:	f000 b813 	b.w	8001d68 <_close_r>
	...

08001d44 <_write_r>:
 8001d44:	b538      	push	{r3, r4, r5, lr}
 8001d46:	4c07      	ldr	r4, [pc, #28]	; (8001d64 <_write_r+0x20>)
 8001d48:	4605      	mov	r5, r0
 8001d4a:	4608      	mov	r0, r1
 8001d4c:	4611      	mov	r1, r2
 8001d4e:	2200      	movs	r2, #0
 8001d50:	6022      	str	r2, [r4, #0]
 8001d52:	461a      	mov	r2, r3
 8001d54:	f7fe ff2d 	bl	8000bb2 <_write>
 8001d58:	1c43      	adds	r3, r0, #1
 8001d5a:	d102      	bne.n	8001d62 <_write_r+0x1e>
 8001d5c:	6823      	ldr	r3, [r4, #0]
 8001d5e:	b103      	cbz	r3, 8001d62 <_write_r+0x1e>
 8001d60:	602b      	str	r3, [r5, #0]
 8001d62:	bd38      	pop	{r3, r4, r5, pc}
 8001d64:	200000e0 	.word	0x200000e0

08001d68 <_close_r>:
 8001d68:	b538      	push	{r3, r4, r5, lr}
 8001d6a:	4c06      	ldr	r4, [pc, #24]	; (8001d84 <_close_r+0x1c>)
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	4605      	mov	r5, r0
 8001d70:	4608      	mov	r0, r1
 8001d72:	6023      	str	r3, [r4, #0]
 8001d74:	f000 f850 	bl	8001e18 <_close>
 8001d78:	1c43      	adds	r3, r0, #1
 8001d7a:	d102      	bne.n	8001d82 <_close_r+0x1a>
 8001d7c:	6823      	ldr	r3, [r4, #0]
 8001d7e:	b103      	cbz	r3, 8001d82 <_close_r+0x1a>
 8001d80:	602b      	str	r3, [r5, #0]
 8001d82:	bd38      	pop	{r3, r4, r5, pc}
 8001d84:	200000e0 	.word	0x200000e0

08001d88 <_fstat_r>:
 8001d88:	b538      	push	{r3, r4, r5, lr}
 8001d8a:	4c07      	ldr	r4, [pc, #28]	; (8001da8 <_fstat_r+0x20>)
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	4605      	mov	r5, r0
 8001d90:	4608      	mov	r0, r1
 8001d92:	4611      	mov	r1, r2
 8001d94:	6023      	str	r3, [r4, #0]
 8001d96:	f000 f847 	bl	8001e28 <_fstat>
 8001d9a:	1c43      	adds	r3, r0, #1
 8001d9c:	d102      	bne.n	8001da4 <_fstat_r+0x1c>
 8001d9e:	6823      	ldr	r3, [r4, #0]
 8001da0:	b103      	cbz	r3, 8001da4 <_fstat_r+0x1c>
 8001da2:	602b      	str	r3, [r5, #0]
 8001da4:	bd38      	pop	{r3, r4, r5, pc}
 8001da6:	bf00      	nop
 8001da8:	200000e0 	.word	0x200000e0

08001dac <_isatty_r>:
 8001dac:	b538      	push	{r3, r4, r5, lr}
 8001dae:	4c06      	ldr	r4, [pc, #24]	; (8001dc8 <_isatty_r+0x1c>)
 8001db0:	2300      	movs	r3, #0
 8001db2:	4605      	mov	r5, r0
 8001db4:	4608      	mov	r0, r1
 8001db6:	6023      	str	r3, [r4, #0]
 8001db8:	f000 f83e 	bl	8001e38 <_isatty>
 8001dbc:	1c43      	adds	r3, r0, #1
 8001dbe:	d102      	bne.n	8001dc6 <_isatty_r+0x1a>
 8001dc0:	6823      	ldr	r3, [r4, #0]
 8001dc2:	b103      	cbz	r3, 8001dc6 <_isatty_r+0x1a>
 8001dc4:	602b      	str	r3, [r5, #0]
 8001dc6:	bd38      	pop	{r3, r4, r5, pc}
 8001dc8:	200000e0 	.word	0x200000e0

08001dcc <_lseek_r>:
 8001dcc:	b538      	push	{r3, r4, r5, lr}
 8001dce:	4c07      	ldr	r4, [pc, #28]	; (8001dec <_lseek_r+0x20>)
 8001dd0:	4605      	mov	r5, r0
 8001dd2:	4608      	mov	r0, r1
 8001dd4:	4611      	mov	r1, r2
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	6022      	str	r2, [r4, #0]
 8001dda:	461a      	mov	r2, r3
 8001ddc:	f000 f834 	bl	8001e48 <_lseek>
 8001de0:	1c43      	adds	r3, r0, #1
 8001de2:	d102      	bne.n	8001dea <_lseek_r+0x1e>
 8001de4:	6823      	ldr	r3, [r4, #0]
 8001de6:	b103      	cbz	r3, 8001dea <_lseek_r+0x1e>
 8001de8:	602b      	str	r3, [r5, #0]
 8001dea:	bd38      	pop	{r3, r4, r5, pc}
 8001dec:	200000e0 	.word	0x200000e0

08001df0 <__malloc_lock>:
 8001df0:	4770      	bx	lr

08001df2 <__malloc_unlock>:
 8001df2:	4770      	bx	lr

08001df4 <_read_r>:
 8001df4:	b538      	push	{r3, r4, r5, lr}
 8001df6:	4c07      	ldr	r4, [pc, #28]	; (8001e14 <_read_r+0x20>)
 8001df8:	4605      	mov	r5, r0
 8001dfa:	4608      	mov	r0, r1
 8001dfc:	4611      	mov	r1, r2
 8001dfe:	2200      	movs	r2, #0
 8001e00:	6022      	str	r2, [r4, #0]
 8001e02:	461a      	mov	r2, r3
 8001e04:	f000 f828 	bl	8001e58 <_read>
 8001e08:	1c43      	adds	r3, r0, #1
 8001e0a:	d102      	bne.n	8001e12 <_read_r+0x1e>
 8001e0c:	6823      	ldr	r3, [r4, #0]
 8001e0e:	b103      	cbz	r3, 8001e12 <_read_r+0x1e>
 8001e10:	602b      	str	r3, [r5, #0]
 8001e12:	bd38      	pop	{r3, r4, r5, pc}
 8001e14:	200000e0 	.word	0x200000e0

08001e18 <_close>:
 8001e18:	4b02      	ldr	r3, [pc, #8]	; (8001e24 <_close+0xc>)
 8001e1a:	2258      	movs	r2, #88	; 0x58
 8001e1c:	601a      	str	r2, [r3, #0]
 8001e1e:	f04f 30ff 	mov.w	r0, #4294967295
 8001e22:	4770      	bx	lr
 8001e24:	200000e0 	.word	0x200000e0

08001e28 <_fstat>:
 8001e28:	4b02      	ldr	r3, [pc, #8]	; (8001e34 <_fstat+0xc>)
 8001e2a:	2258      	movs	r2, #88	; 0x58
 8001e2c:	601a      	str	r2, [r3, #0]
 8001e2e:	f04f 30ff 	mov.w	r0, #4294967295
 8001e32:	4770      	bx	lr
 8001e34:	200000e0 	.word	0x200000e0

08001e38 <_isatty>:
 8001e38:	4b02      	ldr	r3, [pc, #8]	; (8001e44 <_isatty+0xc>)
 8001e3a:	2258      	movs	r2, #88	; 0x58
 8001e3c:	601a      	str	r2, [r3, #0]
 8001e3e:	2000      	movs	r0, #0
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	200000e0 	.word	0x200000e0

08001e48 <_lseek>:
 8001e48:	4b02      	ldr	r3, [pc, #8]	; (8001e54 <_lseek+0xc>)
 8001e4a:	2258      	movs	r2, #88	; 0x58
 8001e4c:	601a      	str	r2, [r3, #0]
 8001e4e:	f04f 30ff 	mov.w	r0, #4294967295
 8001e52:	4770      	bx	lr
 8001e54:	200000e0 	.word	0x200000e0

08001e58 <_read>:
 8001e58:	4b02      	ldr	r3, [pc, #8]	; (8001e64 <_read+0xc>)
 8001e5a:	2258      	movs	r2, #88	; 0x58
 8001e5c:	601a      	str	r2, [r3, #0]
 8001e5e:	f04f 30ff 	mov.w	r0, #4294967295
 8001e62:	4770      	bx	lr
 8001e64:	200000e0 	.word	0x200000e0

08001e68 <_sbrk>:
 8001e68:	4b04      	ldr	r3, [pc, #16]	; (8001e7c <_sbrk+0x14>)
 8001e6a:	6819      	ldr	r1, [r3, #0]
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	b909      	cbnz	r1, 8001e74 <_sbrk+0xc>
 8001e70:	4903      	ldr	r1, [pc, #12]	; (8001e80 <_sbrk+0x18>)
 8001e72:	6019      	str	r1, [r3, #0]
 8001e74:	6818      	ldr	r0, [r3, #0]
 8001e76:	4402      	add	r2, r0
 8001e78:	601a      	str	r2, [r3, #0]
 8001e7a:	4770      	bx	lr
 8001e7c:	200000a8 	.word	0x200000a8
 8001e80:	200000e8 	.word	0x200000e8

08001e84 <_init>:
 8001e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e86:	bf00      	nop
 8001e88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e8a:	bc08      	pop	{r3}
 8001e8c:	469e      	mov	lr, r3
 8001e8e:	4770      	bx	lr

08001e90 <_fini>:
 8001e90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e92:	bf00      	nop
 8001e94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e96:	bc08      	pop	{r3}
 8001e98:	469e      	mov	lr, r3
 8001e9a:	4770      	bx	lr
