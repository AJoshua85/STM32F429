
USBF4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001fec  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000300  0800219c  0800219c  0001219c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800249c  0800249c  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  0800249c  0800249c  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800249c  0800249c  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800249c  0800249c  0001249c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080024a0  080024a0  000124a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  080024a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000064  20000080  08002524  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000e4  08002524  000200e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   000031ec  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000009bc  00000000  00000000  0002329c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000208  00000000  00000000  00023c58  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000001b0  00000000  00000000  00023e60  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00001c46  00000000  00000000  00024010  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000227a  00000000  00000000  00025c56  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009862c  00000000  00000000  00027ed0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c04fc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000fa0  00000000  00000000  000c0578  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stab         00000084  00000000  00000000  000c1518  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000117  00000000  00000000  000c159c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000080 	.word	0x20000080
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08002184 	.word	0x08002184

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000084 	.word	0x20000084
 80001ec:	08002184 	.word	0x08002184

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <IN_ENDPOINT>:
#define USB_OTG_HS_PCGCCTL ((uint32_t *)(USB_OTG_HS_PERIPH_BASE + USB_OTG_PCGCCTL_BASE))

#define ENDPOINT_COUNT 6

inline static USB_OTG_INEndpointTypeDef * IN_ENDPOINT(uint8_t endpoint_num)
{
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
 8000296:	4603      	mov	r3, r0
 8000298:	71fb      	strb	r3, [r7, #7]
	return (USB_OTG_INEndpointTypeDef *)(USB_OTG_HS_PERIPH_BASE + USB_OTG_IN_ENDPOINT_BASE + (endpoint_num));
 800029a:	79fa      	ldrb	r2, [r7, #7]
 800029c:	4b03      	ldr	r3, [pc, #12]	; (80002ac <IN_ENDPOINT+0x1c>)
 800029e:	4413      	add	r3, r2
}
 80002a0:	4618      	mov	r0, r3
 80002a2:	370c      	adds	r7, #12
 80002a4:	46bd      	mov	sp, r7
 80002a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002aa:	4770      	bx	lr
 80002ac:	40040900 	.word	0x40040900

080002b0 <OUT_ENDPOINT>:

inline static USB_OTG_OUTEndpointTypeDef * OUT_ENDPOINT(uint8_t endpoint_num)
{
 80002b0:	b480      	push	{r7}
 80002b2:	b083      	sub	sp, #12
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	4603      	mov	r3, r0
 80002b8:	71fb      	strb	r3, [r7, #7]
	return (USB_OTG_OUTEndpointTypeDef *)(USB_OTG_HS_PERIPH_BASE + USB_OTG_OUT_ENDPOINT_BASE + (endpoint_num));
 80002ba:	79fa      	ldrb	r2, [r7, #7]
 80002bc:	4b03      	ldr	r3, [pc, #12]	; (80002cc <OUT_ENDPOINT+0x1c>)
 80002be:	4413      	add	r3, r2
}
 80002c0:	4618      	mov	r0, r3
 80002c2:	370c      	adds	r7, #12
 80002c4:	46bd      	mov	sp, r7
 80002c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ca:	4770      	bx	lr
 80002cc:	40040b00 	.word	0x40040b00

080002d0 <FIFO>:

inline static __IO uint32_t *FIFO (uint8_t endpoint_num)
{
 80002d0:	b480      	push	{r7}
 80002d2:	b083      	sub	sp, #12
 80002d4:	af00      	add	r7, sp, #0
 80002d6:	4603      	mov	r3, r0
 80002d8:	71fb      	strb	r3, [r7, #7]
	return (__IO uint32_t *)(USB_OTG_HS_PERIPH_BASE + USB_OTG_FIFO_BASE + (endpoint_num * 0x1000));
 80002da:	79fb      	ldrb	r3, [r7, #7]
 80002dc:	031b      	lsls	r3, r3, #12
 80002de:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80002e2:	f503 2382 	add.w	r3, r3, #266240	; 0x41000
}
 80002e6:	4618      	mov	r0, r3
 80002e8:	370c      	adds	r7, #12
 80002ea:	46bd      	mov	sp, r7
 80002ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f0:	4770      	bx	lr
	...

080002f4 <USB_Gpio_Init>:
 * @return			- none
 * @note			- none
 */

static void USB_Gpio_Init()
{
 80002f4:	b480      	push	{r7}
 80002f6:	af00      	add	r7, sp, #0
	//Enable clock for GPIOB
	SET_BIT(RCC->AHB1ENR, RCC_AHB1ENR_GPIOBEN);
 80002f8:	4b0d      	ldr	r3, [pc, #52]	; (8000330 <USB_Gpio_Init+0x3c>)
 80002fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002fc:	4a0c      	ldr	r2, [pc, #48]	; (8000330 <USB_Gpio_Init+0x3c>)
 80002fe:	f043 0302 	orr.w	r3, r3, #2
 8000302:	6313      	str	r3, [r2, #48]	; 0x30


	//Configure Alternate function for pin 14 and 15
	MODIFY_REG(GPIOB->AFR[1],
 8000304:	4b0b      	ldr	r3, [pc, #44]	; (8000334 <USB_Gpio_Init+0x40>)
 8000306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000308:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800030c:	4a09      	ldr	r2, [pc, #36]	; (8000334 <USB_Gpio_Init+0x40>)
 800030e:	f043 434c 	orr.w	r3, r3, #3422552064	; 0xcc000000
 8000312:	6253      	str	r3, [r2, #36]	; 0x24
			GPIO_AFRH_AFSEL14 | GPIO_AFRH_AFSEL15,
			_VAL2FLD(GPIO_AFRH_AFSEL14, 0xC) | _VAL2FLD(GPIO_AFRH_AFSEL15, 0xC));


	//Configure pin as alternate mode
	MODIFY_REG(GPIOB->MODER,
 8000314:	4b07      	ldr	r3, [pc, #28]	; (8000334 <USB_Gpio_Init+0x40>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800031c:	4a05      	ldr	r2, [pc, #20]	; (8000334 <USB_Gpio_Init+0x40>)
 800031e:	f043 4320 	orr.w	r3, r3, #2684354560	; 0xa0000000
 8000322:	6013      	str	r3, [r2, #0]
			GPIO_MODER_MODER14 | GPIO_MODER_MODER15,
			_VAL2FLD(GPIO_MODER_MODER14, 2) | _VAL2FLD(GPIO_MODER_MODER15, 2));

}
 8000324:	bf00      	nop
 8000326:	46bd      	mov	sp, r7
 8000328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop
 8000330:	40023800 	.word	0x40023800
 8000334:	40020400 	.word	0x40020400

08000338 <USB_Core_Init>:
 * @parem[in]		- none
 * @return			- none
 * @note			- none
 */
static void USB_Core_Init()
{
 8000338:	b480      	push	{r7}
 800033a:	af00      	add	r7, sp, #0
	 //Enable peripheral clock to USB module
	 SET_BIT(RCC->AHB1ENR, RCC_AHB1ENR_OTGHSEN);
 800033c:	4b1f      	ldr	r3, [pc, #124]	; (80003bc <USB_Core_Init+0x84>)
 800033e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000340:	4a1e      	ldr	r2, [pc, #120]	; (80003bc <USB_Core_Init+0x84>)
 8000342:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000346:	6313      	str	r3, [r2, #48]	; 0x30

	 //Initialize the core to run in device mode
	 MODIFY_REG(USB_OTG_HS->GUSBCFG,
 8000348:	4b1d      	ldr	r3, [pc, #116]	; (80003c0 <USB_Core_Init+0x88>)
 800034a:	68db      	ldr	r3, [r3, #12]
 800034c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8000350:	f423 5371 	bic.w	r3, r3, #15424	; 0x3c40
 8000354:	4a1a      	ldr	r2, [pc, #104]	; (80003c0 <USB_Core_Init+0x88>)
 8000356:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800035a:	f443 5311 	orr.w	r3, r3, #9280	; 0x2440
 800035e:	60d3      	str	r3, [r2, #12]
	 		USB_OTG_GUSBCFG_FDMOD | USB_OTG_GUSBCFG_PHYSEL | USB_OTG_GUSBCFG_TRDT,
	 		USB_OTG_GUSBCFG_FDMOD | USB_OTG_GUSBCFG_PHYSEL | _VAL2FLD(USB_OTG_GUSBCFG_TRDT, 0x09));


	 //Initialize USB Speed to run at Full Speed
	 MODIFY_REG(USB_OTG_HS_DEVICE->DCFG,
 8000360:	4b18      	ldr	r3, [pc, #96]	; (80003c4 <USB_Core_Init+0x8c>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	4a17      	ldr	r2, [pc, #92]	; (80003c4 <USB_Core_Init+0x8c>)
 8000366:	f043 0303 	orr.w	r3, r3, #3
 800036a:	6013      	str	r3, [r2, #0]
	 		USB_OTG_DCFG_DSPD,
	 		_VAL2FLD(USB_OTG_DCFG_DSPD, 0x03));


	 //Enable VBUS sensing device
	 SET_BIT(USB_OTG_HS->GCCFG, USB_OTG_GCCFG_VBUSBSEN);
 800036c:	4b14      	ldr	r3, [pc, #80]	; (80003c0 <USB_Core_Init+0x88>)
 800036e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000370:	4a13      	ldr	r2, [pc, #76]	; (80003c0 <USB_Core_Init+0x88>)
 8000372:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000376:	6393      	str	r3, [r2, #56]	; 0x38
	 *SOFM: Start of frame mask
	 *USBSUSPM: USB suspend mask
	 *WUIM: Resume/remote wakeup detected interrupt mask
	 *IEPINT: IN endpoints interrupt mask
	 *RXFLVLM: Receive FIFO non-empty mask*/
	 SET_BIT(USB_OTG_HS->GINTMSK,
 8000378:	4b11      	ldr	r3, [pc, #68]	; (80003c0 <USB_Core_Init+0x88>)
 800037a:	699a      	ldr	r2, [r3, #24]
 800037c:	4910      	ldr	r1, [pc, #64]	; (80003c0 <USB_Core_Init+0x88>)
 800037e:	4b12      	ldr	r3, [pc, #72]	; (80003c8 <USB_Core_Init+0x90>)
 8000380:	4313      	orrs	r3, r2
 8000382:	618b      	str	r3, [r1, #24]
	 		USB_OTG_GINTMSK_USBRST | USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_SOFM |
	 		USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_WUIM | USB_OTG_GINTMSK_IEPINT |
	 		USB_OTG_GINTSTS_OEPINT | USB_OTG_GINTMSK_RXFLVLM);

	 	// Clears all pending core interrupts.
	 WRITE_REG(USB_OTG_HS->GINTSTS, 0xFFFFFFFF);
 8000384:	4b0e      	ldr	r3, [pc, #56]	; (80003c0 <USB_Core_Init+0x88>)
 8000386:	f04f 32ff 	mov.w	r2, #4294967295
 800038a:	615a      	str	r2, [r3, #20]

	 // Unmasks USB global interrupt.
	 SET_BIT(USB_OTG_HS->GAHBCFG, USB_OTG_GAHBCFG_GINT);
 800038c:	4b0c      	ldr	r3, [pc, #48]	; (80003c0 <USB_Core_Init+0x88>)
 800038e:	689b      	ldr	r3, [r3, #8]
 8000390:	4a0b      	ldr	r2, [pc, #44]	; (80003c0 <USB_Core_Init+0x88>)
 8000392:	f043 0301 	orr.w	r3, r3, #1
 8000396:	6093      	str	r3, [r2, #8]

	 //Enable USB global interrupt
	 SET_BIT(USB_OTG_HS->GAHBCFG,USB_OTG_GAHBCFG_GINT);*/

	 // Unmasks transfer completed interrupts for all endpoints.
	 SET_BIT(USB_OTG_HS_DEVICE->DOEPMSK, USB_OTG_DOEPMSK_XFRCM);
 8000398:	4b0a      	ldr	r3, [pc, #40]	; (80003c4 <USB_Core_Init+0x8c>)
 800039a:	695b      	ldr	r3, [r3, #20]
 800039c:	4a09      	ldr	r2, [pc, #36]	; (80003c4 <USB_Core_Init+0x8c>)
 800039e:	f043 0301 	orr.w	r3, r3, #1
 80003a2:	6153      	str	r3, [r2, #20]
	 SET_BIT(USB_OTG_HS_DEVICE->DIEPMSK, USB_OTG_DIEPMSK_XFRCM);
 80003a4:	4b07      	ldr	r3, [pc, #28]	; (80003c4 <USB_Core_Init+0x8c>)
 80003a6:	691b      	ldr	r3, [r3, #16]
 80003a8:	4a06      	ldr	r2, [pc, #24]	; (80003c4 <USB_Core_Init+0x8c>)
 80003aa:	f043 0301 	orr.w	r3, r3, #1
 80003ae:	6113      	str	r3, [r2, #16]
}
 80003b0:	bf00      	nop
 80003b2:	46bd      	mov	sp, r7
 80003b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b8:	4770      	bx	lr
 80003ba:	bf00      	nop
 80003bc:	40023800 	.word	0x40023800
 80003c0:	40040000 	.word	0x40040000
 80003c4:	40040800 	.word	0x40040800
 80003c8:	800c3818 	.word	0x800c3818

080003cc <set_device_addr>:
 * @parem[in]		- address
 * @return			- none
 * @note			- none
 */
static void set_device_addr(uint8_t addr)
{
 80003cc:	b480      	push	{r7}
 80003ce:	b083      	sub	sp, #12
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	4603      	mov	r3, r0
 80003d4:	71fb      	strb	r3, [r7, #7]
	MODIFY_REG(USB_OTG_HS_DEVICE->DCFG,USB_OTG_DCFG_DAD,_VAL2FLD(USB_OTG_DCFG_DAD,addr));
 80003d6:	4b08      	ldr	r3, [pc, #32]	; (80003f8 <set_device_addr+0x2c>)
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	f423 62fe 	bic.w	r2, r3, #2032	; 0x7f0
 80003de:	79fb      	ldrb	r3, [r7, #7]
 80003e0:	011b      	lsls	r3, r3, #4
 80003e2:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80003e6:	4904      	ldr	r1, [pc, #16]	; (80003f8 <set_device_addr+0x2c>)
 80003e8:	4313      	orrs	r3, r2
 80003ea:	600b      	str	r3, [r1, #0]
}
 80003ec:	bf00      	nop
 80003ee:	370c      	adds	r7, #12
 80003f0:	46bd      	mov	sp, r7
 80003f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f6:	4770      	bx	lr
 80003f8:	40040800 	.word	0x40040800

080003fc <connect>:
 * @parem[in]		- none
 * @return			- none
 * @note			- none
 */
static void connect()
{
 80003fc:	b480      	push	{r7}
 80003fe:	af00      	add	r7, sp, #0
	//Power the transceiver on
	SET_BIT(USB_OTG_HS->GCCFG,USB_OTG_GCCFG_PWRDWN);
 8000400:	4b08      	ldr	r3, [pc, #32]	; (8000424 <connect+0x28>)
 8000402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000404:	4a07      	ldr	r2, [pc, #28]	; (8000424 <connect+0x28>)
 8000406:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800040a:	6393      	str	r3, [r2, #56]	; 0x38

	//Connect the device to the bus
	CLEAR_BIT(USB_OTG_HS_DEVICE->DCTL,USB_OTG_DCTL_SDIS);
 800040c:	4b06      	ldr	r3, [pc, #24]	; (8000428 <connect+0x2c>)
 800040e:	685b      	ldr	r3, [r3, #4]
 8000410:	4a05      	ldr	r2, [pc, #20]	; (8000428 <connect+0x2c>)
 8000412:	f023 0302 	bic.w	r3, r3, #2
 8000416:	6053      	str	r3, [r2, #4]
}
 8000418:	bf00      	nop
 800041a:	46bd      	mov	sp, r7
 800041c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000420:	4770      	bx	lr
 8000422:	bf00      	nop
 8000424:	40040000 	.word	0x40040000
 8000428:	40040800 	.word	0x40040800

0800042c <disconnect>:
 * @parem[in]		- none
 * @return			- none
 * @note			- none
 */
static void disconnect()
{
 800042c:	b480      	push	{r7}
 800042e:	af00      	add	r7, sp, #0
	//Disconnect the the device from the bus
	SET_BIT(USB_OTG_HS_DEVICE->DCTL,USB_OTG_DCTL_SDIS);
 8000430:	4b08      	ldr	r3, [pc, #32]	; (8000454 <disconnect+0x28>)
 8000432:	685b      	ldr	r3, [r3, #4]
 8000434:	4a07      	ldr	r2, [pc, #28]	; (8000454 <disconnect+0x28>)
 8000436:	f043 0302 	orr.w	r3, r3, #2
 800043a:	6053      	str	r3, [r2, #4]

	//Power the transceiver off
	CLEAR_BIT(USB_OTG_HS->GCCFG,USB_OTG_GCCFG_PWRDWN);
 800043c:	4b06      	ldr	r3, [pc, #24]	; (8000458 <disconnect+0x2c>)
 800043e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000440:	4a05      	ldr	r2, [pc, #20]	; (8000458 <disconnect+0x2c>)
 8000442:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000446:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000448:	bf00      	nop
 800044a:	46bd      	mov	sp, r7
 800044c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000450:	4770      	bx	lr
 8000452:	bf00      	nop
 8000454:	40040800 	.word	0x40040800
 8000458:	40040000 	.word	0x40040000

0800045c <flush_rxfifo>:
 * @parem[in]		- none
 * @return			- none
 * @note			- none
 */
static void flush_rxfifo()
{
 800045c:	b480      	push	{r7}
 800045e:	af00      	add	r7, sp, #0
	SET_BIT(USB_OTG_HS->GRSTCTL, USB_OTG_GRSTCTL_RXFFLSH);
 8000460:	4b05      	ldr	r3, [pc, #20]	; (8000478 <flush_rxfifo+0x1c>)
 8000462:	691b      	ldr	r3, [r3, #16]
 8000464:	4a04      	ldr	r2, [pc, #16]	; (8000478 <flush_rxfifo+0x1c>)
 8000466:	f043 0310 	orr.w	r3, r3, #16
 800046a:	6113      	str	r3, [r2, #16]
}
 800046c:	bf00      	nop
 800046e:	46bd      	mov	sp, r7
 8000470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000474:	4770      	bx	lr
 8000476:	bf00      	nop
 8000478:	40040000 	.word	0x40040000

0800047c <flush_txfifo>:
 * @parem[in]		- IN endpoint
 * @return			- none
 * @note			- none
 */
static void flush_txfifo(uint8_t endpoint_num)
{
 800047c:	b480      	push	{r7}
 800047e:	b083      	sub	sp, #12
 8000480:	af00      	add	r7, sp, #0
 8000482:	4603      	mov	r3, r0
 8000484:	71fb      	strb	r3, [r7, #7]
	//Select specific tx fifo to flush
	MODIFY_REG(USB_OTG_HS->GRSTCTL,USB_OTG_GRSTCTL_TXFNUM,_VAL2FLD(USB_OTG_GRSTCTL_TXFNUM, endpoint_num));
 8000486:	4b0b      	ldr	r3, [pc, #44]	; (80004b4 <flush_txfifo+0x38>)
 8000488:	691b      	ldr	r3, [r3, #16]
 800048a:	f423 62f8 	bic.w	r2, r3, #1984	; 0x7c0
 800048e:	79fb      	ldrb	r3, [r7, #7]
 8000490:	019b      	lsls	r3, r3, #6
 8000492:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8000496:	4907      	ldr	r1, [pc, #28]	; (80004b4 <flush_txfifo+0x38>)
 8000498:	4313      	orrs	r3, r2
 800049a:	610b      	str	r3, [r1, #16]

	//Trigger flush
	SET_BIT(USB_OTG_HS->GRSTCTL,USB_OTG_GRSTCTL_TXFFLSH);
 800049c:	4b05      	ldr	r3, [pc, #20]	; (80004b4 <flush_txfifo+0x38>)
 800049e:	691b      	ldr	r3, [r3, #16]
 80004a0:	4a04      	ldr	r2, [pc, #16]	; (80004b4 <flush_txfifo+0x38>)
 80004a2:	f043 0320 	orr.w	r3, r3, #32
 80004a6:	6113      	str	r3, [r2, #16]
}
 80004a8:	bf00      	nop
 80004aa:	370c      	adds	r7, #12
 80004ac:	46bd      	mov	sp, r7
 80004ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b2:	4770      	bx	lr
 80004b4:	40040000 	.word	0x40040000

080004b8 <config_endpoint0>:
 * @parem[in]		- none
 * @return			- none
 * @note			- none
 */
static void config_endpoint0(uint16_t endpoint_size)
{
 80004b8:	b5b0      	push	{r4, r5, r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
 80004be:	4603      	mov	r3, r0
 80004c0:	80fb      	strh	r3, [r7, #6]
	//Unmasks interrupts of endpoint0 IN (bit 0) /OUT (bit 16)
	SET_BIT(USB_OTG_HS_DEVICE->DAINTMSK,(1 << 0| 1 << 16));
 80004c2:	4b1b      	ldr	r3, [pc, #108]	; (8000530 <config_endpoint0+0x78>)
 80004c4:	69db      	ldr	r3, [r3, #28]
 80004c6:	4a1a      	ldr	r2, [pc, #104]	; (8000530 <config_endpoint0+0x78>)
 80004c8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80004cc:	61d3      	str	r3, [r2, #28]

	//Config max packet size,
	MODIFY_REG(IN_ENDPOINT(0)->DIEPCTL,USB_OTG_DIEPCTL_MPSIZ,_VAL2FLD(USB_OTG_DIEPCTL_MPSIZ,endpoint_size));
 80004ce:	2000      	movs	r0, #0
 80004d0:	f7ff fede 	bl	8000290 <IN_ENDPOINT>
 80004d4:	4603      	mov	r3, r0
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	f423 64ff 	bic.w	r4, r3, #2040	; 0x7f8
 80004dc:	f024 0407 	bic.w	r4, r4, #7
 80004e0:	88fb      	ldrh	r3, [r7, #6]
 80004e2:	f3c3 050a 	ubfx	r5, r3, #0, #11
 80004e6:	2000      	movs	r0, #0
 80004e8:	f7ff fed2 	bl	8000290 <IN_ENDPOINT>
 80004ec:	4602      	mov	r2, r0
 80004ee:	ea44 0305 	orr.w	r3, r4, r5
 80004f2:	6013      	str	r3, [r2, #0]

	//activate endpoint configuration and sets endpoint handshake to NAK (not ready to send data)
	SET_BIT(IN_ENDPOINT(0)->DIEPCTL,USB_OTG_DIEPCTL_USBAEP|USB_OTG_DIEPCTL_SNAK);
 80004f4:	2000      	movs	r0, #0
 80004f6:	f7ff fecb 	bl	8000290 <IN_ENDPOINT>
 80004fa:	4602      	mov	r2, r0
 80004fc:	6813      	ldr	r3, [r2, #0]
 80004fe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000502:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000506:	6013      	str	r3, [r2, #0]

	//Clear NAK and enables endpoint data transmission
	SET_BIT(OUT_ENDPOINT(0)->DOEPCTL,USB_OTG_DOEPCTL_EPENA|USB_OTG_DOEPCTL_CNAK);
 8000508:	2000      	movs	r0, #0
 800050a:	f7ff fed1 	bl	80002b0 <OUT_ENDPOINT>
 800050e:	4603      	mov	r3, r0
 8000510:	681a      	ldr	r2, [r3, #0]
 8000512:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8000516:	601a      	str	r2, [r3, #0]

	//USB Full speed devices has maximum packet size of 64 Bytes
	configure_rxfifo_size(64);
 8000518:	2040      	movs	r0, #64	; 0x40
 800051a:	f000 fa1d 	bl	8000958 <configure_rxfifo_size>
	configure_txfifo_size(0,endpoint_size);
 800051e:	88fb      	ldrh	r3, [r7, #6]
 8000520:	4619      	mov	r1, r3
 8000522:	2000      	movs	r0, #0
 8000524:	f000 f9e2 	bl	80008ec <configure_txfifo_size>

}
 8000528:	bf00      	nop
 800052a:	3708      	adds	r7, #8
 800052c:	46bd      	mov	sp, r7
 800052e:	bdb0      	pop	{r4, r5, r7, pc}
 8000530:	40040800 	.word	0x40040800

08000534 <USBReset_handler>:
 * @parem[in]		- none
 * @return			- none
 * @note			- none
 */
static void USBReset_handler()
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b082      	sub	sp, #8
 8000538:	af00      	add	r7, sp, #0
	log_info("USB reset signal was detected.");
 800053a:	480a      	ldr	r0, [pc, #40]	; (8000564 <USBReset_handler+0x30>)
 800053c:	f000 fd1c 	bl	8000f78 <log_info>
	for(uint8_t i = 0 ; i <=ENDPOINT_COUNT; i++)
 8000540:	2300      	movs	r3, #0
 8000542:	71fb      	strb	r3, [r7, #7]
 8000544:	e006      	b.n	8000554 <USBReset_handler+0x20>
	{
		deconfigure_in_endpoint(i);
 8000546:	79fb      	ldrb	r3, [r7, #7]
 8000548:	4618      	mov	r0, r3
 800054a:	f000 f92f 	bl	80007ac <deconfigure_in_endpoint>
	for(uint8_t i = 0 ; i <=ENDPOINT_COUNT; i++)
 800054e:	79fb      	ldrb	r3, [r7, #7]
 8000550:	3301      	adds	r3, #1
 8000552:	71fb      	strb	r3, [r7, #7]
 8000554:	79fb      	ldrb	r3, [r7, #7]
 8000556:	2b06      	cmp	r3, #6
 8000558:	d9f5      	bls.n	8000546 <USBReset_handler+0x12>
	}
}
 800055a:	bf00      	nop
 800055c:	3708      	adds	r7, #8
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	0800219c 	.word	0x0800219c

08000568 <EnumerationDone_handler>:
 * @parem[in]		- none
 * @return			- none
 * @note			- none
 */
static void EnumerationDone_handler()
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
	log_info("USB device speed enumeration done.");
 800056c:	4803      	ldr	r0, [pc, #12]	; (800057c <EnumerationDone_handler+0x14>)
 800056e:	f000 fd03 	bl	8000f78 <log_info>
	//temp value used of 8
	config_endpoint0(8);
 8000572:	2008      	movs	r0, #8
 8000574:	f7ff ffa0 	bl	80004b8 <config_endpoint0>
}
 8000578:	bf00      	nop
 800057a:	bd80      	pop	{r7, pc}
 800057c:	080021bc 	.word	0x080021bc

08000580 <RxFifoNonEmpty_handler>:
 * @parem[in]		- none
 * @return			- none
 * @note			- none
 */
static void RxFifoNonEmpty_handler()
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
	//Pop the metadata info from the RxFIFO
	uint32_t recieve_status = USB_OTG_HS_GLOBAL->GRXSTSP;
 8000586:	4b22      	ldr	r3, [pc, #136]	; (8000610 <RxFifoNonEmpty_handler+0x90>)
 8000588:	6a1b      	ldr	r3, [r3, #32]
 800058a:	607b      	str	r3, [r7, #4]

	//extract which end point received the data
	uint8_t endpoint_num= _FLD2VAL(USB_OTG_GRXSTSP_EPNUM,recieve_status);
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	b2db      	uxtb	r3, r3
 8000590:	f003 030f 	and.w	r3, r3, #15
 8000594:	70fb      	strb	r3, [r7, #3]
	//extract number of bytes received
	uint8_t bcnt = _FLD2VAL(USB_OTG_GRXSTSP_BCNT,recieve_status);
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	091b      	lsrs	r3, r3, #4
 800059a:	70bb      	strb	r3, [r7, #2]
	//extract the status of received packet
	uint8_t pckstats = _FLD2VAL(USB_OTG_GRXSTSP_PKTSTS,recieve_status);
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	0c5b      	lsrs	r3, r3, #17
 80005a0:	b2db      	uxtb	r3, r3
 80005a2:	f003 030f 	and.w	r3, r3, #15
 80005a6:	707b      	strb	r3, [r7, #1]

	switch(pckstats)
 80005a8:	787b      	ldrb	r3, [r7, #1]
 80005aa:	3b02      	subs	r3, #2
 80005ac:	2b04      	cmp	r3, #4
 80005ae:	d82a      	bhi.n	8000606 <RxFifoNonEmpty_handler+0x86>
 80005b0:	a201      	add	r2, pc, #4	; (adr r2, 80005b8 <RxFifoNonEmpty_handler+0x38>)
 80005b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005b6:	bf00      	nop
 80005b8:	08000605 	.word	0x08000605
 80005bc:	080005f1 	.word	0x080005f1
 80005c0:	080005dd 	.word	0x080005dd
 80005c4:	08000607 	.word	0x08000607
 80005c8:	080005cd 	.word	0x080005cd
	{
		//Setup packet (include data)
		case 0x06:
			usb_events.on_setup_data_received(endpoint_num,bcnt);
 80005cc:	4b11      	ldr	r3, [pc, #68]	; (8000614 <RxFifoNonEmpty_handler+0x94>)
 80005ce:	685b      	ldr	r3, [r3, #4]
 80005d0:	78ba      	ldrb	r2, [r7, #2]
 80005d2:	b291      	uxth	r1, r2
 80005d4:	78fa      	ldrb	r2, [r7, #3]
 80005d6:	4610      	mov	r0, r2
 80005d8:	4798      	blx	r3
			break;
 80005da:	e014      	b.n	8000606 <RxFifoNonEmpty_handler+0x86>
		case 0x02:
			break;
		//SETUP stage has completed
		case 0x04:
			//Re-enable the transmission on endpoint
			SET_BIT(OUT_ENDPOINT(endpoint_num)->DOEPCTL,USB_OTG_DOEPCTL_CNAK|USB_OTG_DOEPCTL_EPENA);
 80005dc:	78fb      	ldrb	r3, [r7, #3]
 80005de:	4618      	mov	r0, r3
 80005e0:	f7ff fe66 	bl	80002b0 <OUT_ENDPOINT>
 80005e4:	4603      	mov	r3, r0
 80005e6:	681a      	ldr	r2, [r3, #0]
 80005e8:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 80005ec:	601a      	str	r2, [r3, #0]
			break;
 80005ee:	e00a      	b.n	8000606 <RxFifoNonEmpty_handler+0x86>
		//OUT transfer has completed
		case 0x03:
			//Re-enable the transmission on endpoint
			SET_BIT(OUT_ENDPOINT(endpoint_num)->DOEPCTL,USB_OTG_DOEPCTL_CNAK|USB_OTG_DOEPCTL_EPENA);
 80005f0:	78fb      	ldrb	r3, [r7, #3]
 80005f2:	4618      	mov	r0, r3
 80005f4:	f7ff fe5c 	bl	80002b0 <OUT_ENDPOINT>
 80005f8:	4603      	mov	r3, r0
 80005fa:	681a      	ldr	r2, [r3, #0]
 80005fc:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8000600:	601a      	str	r2, [r3, #0]
			break;
 8000602:	e000      	b.n	8000606 <RxFifoNonEmpty_handler+0x86>
			break;
 8000604:	bf00      	nop

	}
}
 8000606:	bf00      	nop
 8000608:	3708      	adds	r7, #8
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	40040000 	.word	0x40040000
 8000614:	20000000 	.word	0x20000000

08000618 <INEndpoint_hander>:
 * @parem[in]		- none
 * @return			- none
 * @note			- none
 */
static void INEndpoint_hander(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
	// Finds the endpoint caused the interrupt.
	uint8_t endpointNum = ffs(USB_OTG_HS_DEVICE->DAINT) - 1;
 800061e:	4b12      	ldr	r3, [pc, #72]	; (8000668 <INEndpoint_hander+0x50>)
 8000620:	699b      	ldr	r3, [r3, #24]
 8000622:	4618      	mov	r0, r3
 8000624:	f000 fda5 	bl	8001172 <ffs>
 8000628:	4603      	mov	r3, r0
 800062a:	b2db      	uxtb	r3, r3
 800062c:	3b01      	subs	r3, #1
 800062e:	71fb      	strb	r3, [r7, #7]

	//Check if transfer of given endpoint is completed
	if (IN_ENDPOINT(endpointNum)->DIEPINT & USB_OTG_DIEPINT_XFRC)
 8000630:	79fb      	ldrb	r3, [r7, #7]
 8000632:	4618      	mov	r0, r3
 8000634:	f7ff fe2c 	bl	8000290 <IN_ENDPOINT>
 8000638:	4603      	mov	r3, r0
 800063a:	689b      	ldr	r3, [r3, #8]
 800063c:	f003 0301 	and.w	r3, r3, #1
 8000640:	2b00      	cmp	r3, #0
 8000642:	d00d      	beq.n	8000660 <INEndpoint_hander+0x48>
    {
        usb_events.on_in_transfer_completed(endpointNum);
 8000644:	4b09      	ldr	r3, [pc, #36]	; (800066c <INEndpoint_hander+0x54>)
 8000646:	68db      	ldr	r3, [r3, #12]
 8000648:	79fa      	ldrb	r2, [r7, #7]
 800064a:	4610      	mov	r0, r2
 800064c:	4798      	blx	r3
        // Clears the interrupt flag.
        SET_BIT(IN_ENDPOINT(endpointNum)->DIEPINT, USB_OTG_DIEPINT_XFRC);
 800064e:	79fb      	ldrb	r3, [r7, #7]
 8000650:	4618      	mov	r0, r3
 8000652:	f7ff fe1d 	bl	8000290 <IN_ENDPOINT>
 8000656:	4603      	mov	r3, r0
 8000658:	689a      	ldr	r2, [r3, #8]
 800065a:	f042 0201 	orr.w	r2, r2, #1
 800065e:	609a      	str	r2, [r3, #8]
    }
}
 8000660:	bf00      	nop
 8000662:	3708      	adds	r7, #8
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	40040800 	.word	0x40040800
 800066c:	20000000 	.word	0x20000000

08000670 <OUTEndpoint_hander>:
 * @parem[in]		- none
 * @return			- none
 * @note			- none
 */
static void OUTEndpoint_hander(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
	// Finds the endpoint caused the interrupt.
	uint8_t endpointNum = ffs(USB_OTG_HS_DEVICE->DAINT >> 16) - 1;
 8000676:	4b13      	ldr	r3, [pc, #76]	; (80006c4 <OUTEndpoint_hander+0x54>)
 8000678:	699b      	ldr	r3, [r3, #24]
 800067a:	0c1b      	lsrs	r3, r3, #16
 800067c:	4618      	mov	r0, r3
 800067e:	f000 fd78 	bl	8001172 <ffs>
 8000682:	4603      	mov	r3, r0
 8000684:	b2db      	uxtb	r3, r3
 8000686:	3b01      	subs	r3, #1
 8000688:	71fb      	strb	r3, [r7, #7]

	//Check if transfer of given endpoint is completed
	if (OUT_ENDPOINT(endpointNum)->DOEPINT & USB_OTG_DOEPINT_XFRC)
 800068a:	79fb      	ldrb	r3, [r7, #7]
 800068c:	4618      	mov	r0, r3
 800068e:	f7ff fe0f 	bl	80002b0 <OUT_ENDPOINT>
 8000692:	4603      	mov	r3, r0
 8000694:	689b      	ldr	r3, [r3, #8]
 8000696:	f003 0301 	and.w	r3, r3, #1
 800069a:	2b00      	cmp	r3, #0
 800069c:	d00d      	beq.n	80006ba <OUTEndpoint_hander+0x4a>
	{
		usb_events.on_out_transfer_completed(endpointNum);
 800069e:	4b0a      	ldr	r3, [pc, #40]	; (80006c8 <OUTEndpoint_hander+0x58>)
 80006a0:	691b      	ldr	r3, [r3, #16]
 80006a2:	79fa      	ldrb	r2, [r7, #7]
 80006a4:	4610      	mov	r0, r2
 80006a6:	4798      	blx	r3
	    // Clears the interrupt;
	    SET_BIT(OUT_ENDPOINT(endpointNum)->DOEPINT, USB_OTG_DOEPINT_XFRC);
 80006a8:	79fb      	ldrb	r3, [r7, #7]
 80006aa:	4618      	mov	r0, r3
 80006ac:	f7ff fe00 	bl	80002b0 <OUT_ENDPOINT>
 80006b0:	4603      	mov	r3, r0
 80006b2:	689a      	ldr	r2, [r3, #8]
 80006b4:	f042 0201 	orr.w	r2, r2, #1
 80006b8:	609a      	str	r2, [r3, #8]
	}
}
 80006ba:	bf00      	nop
 80006bc:	3708      	adds	r7, #8
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	40040800 	.word	0x40040800
 80006c8:	20000000 	.word	0x20000000

080006cc <configure_in_endpoint>:
 * @parem[in]		- none
 * @return			- none
 * @note			- none
 */
static void configure_in_endpoint(uint8_t endpoint_num,UsbEndpointType endpoint_type, uint16_t endpoint_size)
{
 80006cc:	b5b0      	push	{r4, r5, r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	4603      	mov	r3, r0
 80006d4:	71fb      	strb	r3, [r7, #7]
 80006d6:	460b      	mov	r3, r1
 80006d8:	71bb      	strb	r3, [r7, #6]
 80006da:	4613      	mov	r3, r2
 80006dc:	80bb      	strh	r3, [r7, #4]
	//Unmasks IN endpoint interrupts
	SET_BIT(USB_OTG_HS_DEVICE->DAINTMSK,1 << endpoint_num);
 80006de:	4b32      	ldr	r3, [pc, #200]	; (80007a8 <configure_in_endpoint+0xdc>)
 80006e0:	69db      	ldr	r3, [r3, #28]
 80006e2:	79fa      	ldrb	r2, [r7, #7]
 80006e4:	2101      	movs	r1, #1
 80006e6:	fa01 f202 	lsl.w	r2, r1, r2
 80006ea:	4611      	mov	r1, r2
 80006ec:	4a2e      	ldr	r2, [pc, #184]	; (80007a8 <configure_in_endpoint+0xdc>)
 80006ee:	430b      	orrs	r3, r1
 80006f0:	61d3      	str	r3, [r2, #28]

	//Config max packet size
	MODIFY_REG(IN_ENDPOINT(endpoint_num)->DIEPCTL,USB_OTG_DIEPCTL_MPSIZ,_VAL2FLD(USB_OTG_DIEPCTL_MPSIZ,endpoint_size));
 80006f2:	79fb      	ldrb	r3, [r7, #7]
 80006f4:	4618      	mov	r0, r3
 80006f6:	f7ff fdcb 	bl	8000290 <IN_ENDPOINT>
 80006fa:	4603      	mov	r3, r0
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	f423 64ff 	bic.w	r4, r3, #2040	; 0x7f8
 8000702:	f024 0407 	bic.w	r4, r4, #7
 8000706:	88bb      	ldrh	r3, [r7, #4]
 8000708:	f3c3 050a 	ubfx	r5, r3, #0, #11
 800070c:	79fb      	ldrb	r3, [r7, #7]
 800070e:	4618      	mov	r0, r3
 8000710:	f7ff fdbe 	bl	8000290 <IN_ENDPOINT>
 8000714:	4602      	mov	r2, r0
 8000716:	ea44 0305 	orr.w	r3, r4, r5
 800071a:	6013      	str	r3, [r2, #0]

	//Config endpoint type
	MODIFY_REG(IN_ENDPOINT(endpoint_num)->DIEPCTL,USB_OTG_DIEPCTL_EPTYP,_VAL2FLD(USB_OTG_DIEPCTL_EPTYP,endpoint_type));
 800071c:	79fb      	ldrb	r3, [r7, #7]
 800071e:	4618      	mov	r0, r3
 8000720:	f7ff fdb6 	bl	8000290 <IN_ENDPOINT>
 8000724:	4603      	mov	r3, r0
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	f423 2540 	bic.w	r5, r3, #786432	; 0xc0000
 800072c:	79bb      	ldrb	r3, [r7, #6]
 800072e:	049b      	lsls	r3, r3, #18
 8000730:	f403 2440 	and.w	r4, r3, #786432	; 0xc0000
 8000734:	79fb      	ldrb	r3, [r7, #7]
 8000736:	4618      	mov	r0, r3
 8000738:	f7ff fdaa 	bl	8000290 <IN_ENDPOINT>
 800073c:	4602      	mov	r2, r0
 800073e:	ea45 0304 	orr.w	r3, r5, r4
 8000742:	6013      	str	r3, [r2, #0]

	//set the endpoint data PID
	SET_BIT(IN_ENDPOINT(endpoint_num)->DIEPCTL,USB_OTG_DIEPCTL_SD0PID_SEVNFRM);
 8000744:	79fb      	ldrb	r3, [r7, #7]
 8000746:	4618      	mov	r0, r3
 8000748:	f7ff fda2 	bl	8000290 <IN_ENDPOINT>
 800074c:	4603      	mov	r3, r0
 800074e:	681a      	ldr	r2, [r3, #0]
 8000750:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000754:	601a      	str	r2, [r3, #0]

	//Assign fifo number to same endpoint number
	MODIFY_REG(IN_ENDPOINT(endpoint_num)->DIEPCTL,USB_OTG_DIEPCTL_TXFNUM,_VAL2FLD(USB_OTG_DIEPCTL_TXFNUM,endpoint_num));
 8000756:	79fb      	ldrb	r3, [r7, #7]
 8000758:	4618      	mov	r0, r3
 800075a:	f7ff fd99 	bl	8000290 <IN_ENDPOINT>
 800075e:	4603      	mov	r3, r0
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	f023 7570 	bic.w	r5, r3, #62914560	; 0x3c00000
 8000766:	79fb      	ldrb	r3, [r7, #7]
 8000768:	059b      	lsls	r3, r3, #22
 800076a:	f003 7470 	and.w	r4, r3, #62914560	; 0x3c00000
 800076e:	79fb      	ldrb	r3, [r7, #7]
 8000770:	4618      	mov	r0, r3
 8000772:	f7ff fd8d 	bl	8000290 <IN_ENDPOINT>
 8000776:	4602      	mov	r2, r0
 8000778:	ea45 0304 	orr.w	r3, r5, r4
 800077c:	6013      	str	r3, [r2, #0]

	//activate endpoint configuration and sets endpoint handshake to NAK (not ready to send data)
	SET_BIT(IN_ENDPOINT(endpoint_num)->DIEPCTL,USB_OTG_DIEPCTL_USBAEP|USB_OTG_DIEPCTL_SNAK);
 800077e:	79fb      	ldrb	r3, [r7, #7]
 8000780:	4618      	mov	r0, r3
 8000782:	f7ff fd85 	bl	8000290 <IN_ENDPOINT>
 8000786:	4602      	mov	r2, r0
 8000788:	6813      	ldr	r3, [r2, #0]
 800078a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800078e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000792:	6013      	str	r3, [r2, #0]

	configure_txfifo_size(endpoint_num,endpoint_size);
 8000794:	88ba      	ldrh	r2, [r7, #4]
 8000796:	79fb      	ldrb	r3, [r7, #7]
 8000798:	4611      	mov	r1, r2
 800079a:	4618      	mov	r0, r3
 800079c:	f000 f8a6 	bl	80008ec <configure_txfifo_size>
}
 80007a0:	bf00      	nop
 80007a2:	3708      	adds	r7, #8
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bdb0      	pop	{r4, r5, r7, pc}
 80007a8:	40040800 	.word	0x40040800

080007ac <deconfigure_in_endpoint>:
 * @parem[in]		- none
 * @return			- none
 * @note			- none
 */
static void deconfigure_in_endpoint(uint8_t endpoint_num)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b084      	sub	sp, #16
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	4603      	mov	r3, r0
 80007b4:	71fb      	strb	r3, [r7, #7]
	USB_OTG_INEndpointTypeDef *in_endpoint = IN_ENDPOINT(endpoint_num);
 80007b6:	79fb      	ldrb	r3, [r7, #7]
 80007b8:	4618      	mov	r0, r3
 80007ba:	f7ff fd69 	bl	8000290 <IN_ENDPOINT>
 80007be:	60f8      	str	r0, [r7, #12]
	USB_OTG_OUTEndpointTypeDef *out_endpoint = OUT_ENDPOINT(endpoint_num);
 80007c0:	79fb      	ldrb	r3, [r7, #7]
 80007c2:	4618      	mov	r0, r3
 80007c4:	f7ff fd74 	bl	80002b0 <OUT_ENDPOINT>
 80007c8:	60b8      	str	r0, [r7, #8]

	//masks interrupts of IN/OUT endpoint
	CLEAR_BIT(USB_OTG_HS_DEVICE->DAINTMSK,(1 << endpoint_num| 1 << (16 << endpoint_num)));
 80007ca:	4b27      	ldr	r3, [pc, #156]	; (8000868 <deconfigure_in_endpoint+0xbc>)
 80007cc:	69db      	ldr	r3, [r3, #28]
 80007ce:	79fa      	ldrb	r2, [r7, #7]
 80007d0:	2101      	movs	r1, #1
 80007d2:	4091      	lsls	r1, r2
 80007d4:	79fa      	ldrb	r2, [r7, #7]
 80007d6:	2010      	movs	r0, #16
 80007d8:	fa00 f202 	lsl.w	r2, r0, r2
 80007dc:	2001      	movs	r0, #1
 80007de:	fa00 f202 	lsl.w	r2, r0, r2
 80007e2:	430a      	orrs	r2, r1
 80007e4:	43d2      	mvns	r2, r2
 80007e6:	4611      	mov	r1, r2
 80007e8:	4a1f      	ldr	r2, [pc, #124]	; (8000868 <deconfigure_in_endpoint+0xbc>)
 80007ea:	400b      	ands	r3, r1
 80007ec:	61d3      	str	r3, [r2, #28]

	//Clear pending endpoint interrupts
	SET_BIT(in_endpoint->DIEPINT, 0x29FF);
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	689b      	ldr	r3, [r3, #8]
 80007f2:	f443 5327 	orr.w	r3, r3, #10688	; 0x29c0
 80007f6:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 80007fa:	68fa      	ldr	r2, [r7, #12]
 80007fc:	6093      	str	r3, [r2, #8]
	SET_BIT(out_endpoint->DOEPINT, 0x715F);
 80007fe:	68bb      	ldr	r3, [r7, #8]
 8000800:	689b      	ldr	r3, [r3, #8]
 8000802:	f443 43e2 	orr.w	r3, r3, #28928	; 0x7100
 8000806:	f043 035f 	orr.w	r3, r3, #95	; 0x5f
 800080a:	68ba      	ldr	r2, [r7, #8]
 800080c:	6093      	str	r3, [r2, #8]

	//Check if transmission is enabled
	if(in_endpoint->DIEPCTL & USB_OTG_DIEPCTL_EPENA)
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	2b00      	cmp	r3, #0
 8000814:	da05      	bge.n	8000822 <deconfigure_in_endpoint+0x76>
	{
		//Disable endpoint transmission
		SET_BIT(in_endpoint->DIEPCTL,USB_OTG_DIEPCTL_EPDIS);
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	601a      	str	r2, [r3, #0]
	}

	//Disable IN endpoints
	CLEAR_BIT(in_endpoint->DIEPCTL,USB_OTG_DIEPCTL_USBAEP);
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	601a      	str	r2, [r3, #0]

	if(endpoint_num != 0)
 800082e:	79fb      	ldrb	r3, [r7, #7]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d009      	beq.n	8000848 <deconfigure_in_endpoint+0x9c>
	{
		//Check if transmission is enabled
		if(out_endpoint->DOEPCTL & USB_OTG_DOEPCTL_EPENA)
 8000834:	68bb      	ldr	r3, [r7, #8]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	2b00      	cmp	r3, #0
 800083a:	da05      	bge.n	8000848 <deconfigure_in_endpoint+0x9c>
		{
			//Disable endpoint transmission
			SET_BIT(out_endpoint->DOEPCTL,USB_OTG_DOEPCTL_EPDIS);
 800083c:	68bb      	ldr	r3, [r7, #8]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8000844:	68bb      	ldr	r3, [r7, #8]
 8000846:	601a      	str	r2, [r3, #0]
		}
	}
	//Disable OUT endpoints
	CLEAR_BIT(out_endpoint->DOEPCTL,USB_OTG_DOEPCTL_USBAEP);
 8000848:	68bb      	ldr	r3, [r7, #8]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000850:	68bb      	ldr	r3, [r7, #8]
 8000852:	601a      	str	r2, [r3, #0]

	//Flush the FIFOS.
	flush_txfifo(endpoint_num);
 8000854:	79fb      	ldrb	r3, [r7, #7]
 8000856:	4618      	mov	r0, r3
 8000858:	f7ff fe10 	bl	800047c <flush_txfifo>
	flush_rxfifo();
 800085c:	f7ff fdfe 	bl	800045c <flush_rxfifo>
}
 8000860:	bf00      	nop
 8000862:	3710      	adds	r7, #16
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	40040800 	.word	0x40040800

0800086c <refresh_fifo_start_addr>:
 * @parem[in]		- none
 * @return			- none
 * @note			- none
 */
static void refresh_fifo_start_addr(void)
{
 800086c:	b480      	push	{r7}
 800086e:	b083      	sub	sp, #12
 8000870:	af00      	add	r7, sp, #0
	//starting address begins after the region of RxFIFO
	uint32_t start_addr = _FLD2VAL(USB_OTG_GRXFSIZ_RXFD,USB_OTG_HS->GRXFSIZ)*4;
 8000872:	4b1d      	ldr	r3, [pc, #116]	; (80008e8 <refresh_fifo_start_addr+0x7c>)
 8000874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000876:	b29b      	uxth	r3, r3
 8000878:	009b      	lsls	r3, r3, #2
 800087a:	607b      	str	r3, [r7, #4]

	//Update the start address of TxFIFO0.
	MODIFY_REG(USB_OTG_HS->DIEPTXF0_HNPTXFSIZ,USB_OTG_TX0FSA,_VAL2FLD(USB_OTG_TX0FSA,start_addr));
 800087c:	4b1a      	ldr	r3, [pc, #104]	; (80008e8 <refresh_fifo_start_addr+0x7c>)
 800087e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000880:	0c1b      	lsrs	r3, r3, #16
 8000882:	041b      	lsls	r3, r3, #16
 8000884:	687a      	ldr	r2, [r7, #4]
 8000886:	b292      	uxth	r2, r2
 8000888:	4917      	ldr	r1, [pc, #92]	; (80008e8 <refresh_fifo_start_addr+0x7c>)
 800088a:	4313      	orrs	r3, r2
 800088c:	628b      	str	r3, [r1, #40]	; 0x28

	// Updates the start addresses of the rest TxFIFOs.
	for (uint8_t txfifo_number = 0; txfifo_number < ENDPOINT_COUNT - 1; txfifo_number++)
 800088e:	2300      	movs	r3, #0
 8000890:	70fb      	strb	r3, [r7, #3]
 8000892:	e020      	b.n	80008d6 <refresh_fifo_start_addr+0x6a>
	{
		MODIFY_REG(USB_OTG_HS->DIEPTXF[txfifo_number],USB_OTG_NPTXFSA,_VAL2FLD(USB_OTG_NPTXFSA, start_addr));
 8000894:	4a14      	ldr	r2, [pc, #80]	; (80008e8 <refresh_fifo_start_addr+0x7c>)
 8000896:	78fb      	ldrb	r3, [r7, #3]
 8000898:	3340      	adds	r3, #64	; 0x40
 800089a:	009b      	lsls	r3, r3, #2
 800089c:	4413      	add	r3, r2
 800089e:	685b      	ldr	r3, [r3, #4]
 80008a0:	0c1b      	lsrs	r3, r3, #16
 80008a2:	041b      	lsls	r3, r3, #16
 80008a4:	687a      	ldr	r2, [r7, #4]
 80008a6:	b292      	uxth	r2, r2
 80008a8:	480f      	ldr	r0, [pc, #60]	; (80008e8 <refresh_fifo_start_addr+0x7c>)
 80008aa:	78f9      	ldrb	r1, [r7, #3]
 80008ac:	431a      	orrs	r2, r3
 80008ae:	f101 0340 	add.w	r3, r1, #64	; 0x40
 80008b2:	009b      	lsls	r3, r3, #2
 80008b4:	4403      	add	r3, r0
 80008b6:	605a      	str	r2, [r3, #4]
		start_addr += _FLD2VAL(USB_OTG_NPTXFD, USB_OTG_HS->DIEPTXF[txfifo_number]) * 4;
 80008b8:	4a0b      	ldr	r2, [pc, #44]	; (80008e8 <refresh_fifo_start_addr+0x7c>)
 80008ba:	78fb      	ldrb	r3, [r7, #3]
 80008bc:	3340      	adds	r3, #64	; 0x40
 80008be:	009b      	lsls	r3, r3, #2
 80008c0:	4413      	add	r3, r2
 80008c2:	685b      	ldr	r3, [r3, #4]
 80008c4:	0c1b      	lsrs	r3, r3, #16
 80008c6:	b29b      	uxth	r3, r3
 80008c8:	009b      	lsls	r3, r3, #2
 80008ca:	687a      	ldr	r2, [r7, #4]
 80008cc:	4413      	add	r3, r2
 80008ce:	607b      	str	r3, [r7, #4]
	for (uint8_t txfifo_number = 0; txfifo_number < ENDPOINT_COUNT - 1; txfifo_number++)
 80008d0:	78fb      	ldrb	r3, [r7, #3]
 80008d2:	3301      	adds	r3, #1
 80008d4:	70fb      	strb	r3, [r7, #3]
 80008d6:	78fb      	ldrb	r3, [r7, #3]
 80008d8:	2b04      	cmp	r3, #4
 80008da:	d9db      	bls.n	8000894 <refresh_fifo_start_addr+0x28>
	}
}
 80008dc:	bf00      	nop
 80008de:	370c      	adds	r7, #12
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr
 80008e8:	40040000 	.word	0x40040000

080008ec <configure_txfifo_size>:
 * @parem[in]		- none
 * @return			- none
 * @note			- none
 */
static void configure_txfifo_size(uint8_t endpoint_num,uint16_t size)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	4603      	mov	r3, r0
 80008f4:	460a      	mov	r2, r1
 80008f6:	71fb      	strb	r3, [r7, #7]
 80008f8:	4613      	mov	r3, r2
 80008fa:	80bb      	strh	r3, [r7, #4]
	//Get the fifo size in terms of 32bit words
	size = (size + 3) / 4;
 80008fc:	88bb      	ldrh	r3, [r7, #4]
 80008fe:	3303      	adds	r3, #3
 8000900:	2b00      	cmp	r3, #0
 8000902:	da00      	bge.n	8000906 <configure_txfifo_size+0x1a>
 8000904:	3303      	adds	r3, #3
 8000906:	109b      	asrs	r3, r3, #2
 8000908:	80bb      	strh	r3, [r7, #4]

	//Configure the depth of the fifo
	if(endpoint_num == 0)
 800090a:	79fb      	ldrb	r3, [r7, #7]
 800090c:	2b00      	cmp	r3, #0
 800090e:	d108      	bne.n	8000922 <configure_txfifo_size+0x36>
	{
		MODIFY_REG(USB_OTG_HS->DIEPTXF0_HNPTXFSIZ,USB_OTG_TX0FD,_VAL2FLD(USB_OTG_TX0FD,size));
 8000910:	4b10      	ldr	r3, [pc, #64]	; (8000954 <configure_txfifo_size+0x68>)
 8000912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000914:	b29a      	uxth	r2, r3
 8000916:	88bb      	ldrh	r3, [r7, #4]
 8000918:	041b      	lsls	r3, r3, #16
 800091a:	490e      	ldr	r1, [pc, #56]	; (8000954 <configure_txfifo_size+0x68>)
 800091c:	4313      	orrs	r3, r2
 800091e:	628b      	str	r3, [r1, #40]	; 0x28
 8000920:	e011      	b.n	8000946 <configure_txfifo_size+0x5a>
	}
	else
	{
		MODIFY_REG(USB_OTG_HS->DIEPTXF[endpoint_num -1],USB_OTG_NPTXFD,_VAL2FLD(USB_OTG_NPTXFD,size));
 8000922:	4a0c      	ldr	r2, [pc, #48]	; (8000954 <configure_txfifo_size+0x68>)
 8000924:	79fb      	ldrb	r3, [r7, #7]
 8000926:	3b01      	subs	r3, #1
 8000928:	3340      	adds	r3, #64	; 0x40
 800092a:	009b      	lsls	r3, r3, #2
 800092c:	4413      	add	r3, r2
 800092e:	685b      	ldr	r3, [r3, #4]
 8000930:	b299      	uxth	r1, r3
 8000932:	88bb      	ldrh	r3, [r7, #4]
 8000934:	041a      	lsls	r2, r3, #16
 8000936:	4807      	ldr	r0, [pc, #28]	; (8000954 <configure_txfifo_size+0x68>)
 8000938:	79fb      	ldrb	r3, [r7, #7]
 800093a:	3b01      	subs	r3, #1
 800093c:	430a      	orrs	r2, r1
 800093e:	3340      	adds	r3, #64	; 0x40
 8000940:	009b      	lsls	r3, r3, #2
 8000942:	4403      	add	r3, r0
 8000944:	605a      	str	r2, [r3, #4]
	}
	refresh_fifo_start_addr();
 8000946:	f7ff ff91 	bl	800086c <refresh_fifo_start_addr>
}
 800094a:	bf00      	nop
 800094c:	3708      	adds	r7, #8
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	40040000 	.word	0x40040000

08000958 <configure_rxfifo_size>:
 * @parem[in]		- none
 * @return			- none
 * @note			- none
 */
static void configure_rxfifo_size(uint16_t size)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
 800095e:	4603      	mov	r3, r0
 8000960:	80fb      	strh	r3, [r7, #6]
	size = 10 + (2* ((size/4) + 1 ));
 8000962:	88fb      	ldrh	r3, [r7, #6]
 8000964:	089b      	lsrs	r3, r3, #2
 8000966:	b29b      	uxth	r3, r3
 8000968:	3306      	adds	r3, #6
 800096a:	b29b      	uxth	r3, r3
 800096c:	005b      	lsls	r3, r3, #1
 800096e:	80fb      	strh	r3, [r7, #6]

	//Configure the depth of the fifo
	MODIFY_REG(USB_OTG_HS->GRXFSIZ,USB_OTG_GRXFSIZ_RXFD,_VAL2FLD(USB_OTG_GRXFSIZ_RXFD,size));
 8000970:	4b06      	ldr	r3, [pc, #24]	; (800098c <configure_rxfifo_size+0x34>)
 8000972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000974:	0c1b      	lsrs	r3, r3, #16
 8000976:	041b      	lsls	r3, r3, #16
 8000978:	88fa      	ldrh	r2, [r7, #6]
 800097a:	4904      	ldr	r1, [pc, #16]	; (800098c <configure_rxfifo_size+0x34>)
 800097c:	4313      	orrs	r3, r2
 800097e:	624b      	str	r3, [r1, #36]	; 0x24
	refresh_fifo_start_addr();
 8000980:	f7ff ff74 	bl	800086c <refresh_fifo_start_addr>
}
 8000984:	bf00      	nop
 8000986:	3708      	adds	r7, #8
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	40040000 	.word	0x40040000

08000990 <read_packet>:
 * @parem[in]		- none
 * @return			- none
 * @note			- none
 */
static void read_packet(const void *buffer, uint16_t size)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
 8000998:	460b      	mov	r3, r1
 800099a:	807b      	strh	r3, [r7, #2]
	//Only one RxFIFO
	volatile uint32_t *fifo = FIFO(0);
 800099c:	2000      	movs	r0, #0
 800099e:	f7ff fc97 	bl	80002d0 <FIFO>
 80009a2:	60b8      	str	r0, [r7, #8]
	uint32_t data;

	for(;size >=4; size-=4, buffer +=4)
 80009a4:	e00b      	b.n	80009be <read_packet+0x2e>
	{
		//Pop 32bit word from the que
		data = *(fifo);
 80009a6:	68bb      	ldr	r3, [r7, #8]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	60fb      	str	r3, [r7, #12]
		//Store the data in the buffer
		*((uint32_t*)buffer) = data;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	68fa      	ldr	r2, [r7, #12]
 80009b0:	601a      	str	r2, [r3, #0]
	for(;size >=4; size-=4, buffer +=4)
 80009b2:	887b      	ldrh	r3, [r7, #2]
 80009b4:	3b04      	subs	r3, #4
 80009b6:	807b      	strh	r3, [r7, #2]
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	3304      	adds	r3, #4
 80009bc:	607b      	str	r3, [r7, #4]
 80009be:	887b      	ldrh	r3, [r7, #2]
 80009c0:	2b03      	cmp	r3, #3
 80009c2:	d8f0      	bhi.n	80009a6 <read_packet+0x16>
	}

	if(size > 0)
 80009c4:	887b      	ldrh	r3, [r7, #2]
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d010      	beq.n	80009ec <read_packet+0x5c>
	{
		data = *(fifo);
 80009ca:	68bb      	ldr	r3, [r7, #8]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	60fb      	str	r3, [r7, #12]
		for(;size >= 0; size--, buffer++, data >>= 8)
		{
			//Store the remaining data in the buffer with correct alignment
			*((uint8_t*)buffer) = 0xFF & data;//?? Wrong aligment?
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	b2da      	uxtb	r2, r3
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	701a      	strb	r2, [r3, #0]
		for(;size >= 0; size--, buffer++, data >>= 8)
 80009d8:	887b      	ldrh	r3, [r7, #2]
 80009da:	3b01      	subs	r3, #1
 80009dc:	807b      	strh	r3, [r7, #2]
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	3301      	adds	r3, #1
 80009e2:	607b      	str	r3, [r7, #4]
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	0a1b      	lsrs	r3, r3, #8
 80009e8:	60fb      	str	r3, [r7, #12]
			*((uint8_t*)buffer) = 0xFF & data;//?? Wrong aligment?
 80009ea:	e7f1      	b.n	80009d0 <read_packet+0x40>
		}
	}
}
 80009ec:	bf00      	nop
 80009ee:	3710      	adds	r7, #16
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}

080009f4 <write_packet>:
 * @parem[in]		- none
 * @return			- none
 * @note			- none
 */
static void write_packet(uint8_t endpoint_num, void const *buffer, uint16_t size)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b084      	sub	sp, #16
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	4603      	mov	r3, r0
 80009fc:	6039      	str	r1, [r7, #0]
 80009fe:	71fb      	strb	r3, [r7, #7]
 8000a00:	4613      	mov	r3, r2
 8000a02:	80bb      	strh	r3, [r7, #4]
	volatile uint32_t *fifo = FIFO(endpoint_num);
 8000a04:	79fb      	ldrb	r3, [r7, #7]
 8000a06:	4618      	mov	r0, r3
 8000a08:	f7ff fc62 	bl	80002d0 <FIFO>
 8000a0c:	60f8      	str	r0, [r7, #12]
	USB_OTG_INEndpointTypeDef *in_endpoint = IN_ENDPOINT(endpoint_num);
 8000a0e:	79fb      	ldrb	r3, [r7, #7]
 8000a10:	4618      	mov	r0, r3
 8000a12:	f7ff fc3d 	bl	8000290 <IN_ENDPOINT>
 8000a16:	60b8      	str	r0, [r7, #8]


	// Configures the number of packets to 1
	MODIFY_REG(in_endpoint->DIEPTSIZ,USB_OTG_DIEPTSIZ_PKTCNT,_VAL2FLD(USB_OTG_DIEPTSIZ_PKTCNT, 1));
 8000a18:	68bb      	ldr	r3, [r7, #8]
 8000a1a:	691b      	ldr	r3, [r3, #16]
 8000a1c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8000a20:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8000a24:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000a28:	68bb      	ldr	r3, [r7, #8]
 8000a2a:	611a      	str	r2, [r3, #16]
	//Configure number of bytes in the packet
	MODIFY_REG(in_endpoint->DIEPTSIZ,USB_OTG_DIEPTSIZ_XFRSIZ,_VAL2FLD(USB_OTG_DIEPTSIZ_XFRSIZ, size));
 8000a2c:	68bb      	ldr	r3, [r7, #8]
 8000a2e:	691b      	ldr	r3, [r3, #16]
 8000a30:	0cdb      	lsrs	r3, r3, #19
 8000a32:	04db      	lsls	r3, r3, #19
 8000a34:	88ba      	ldrh	r2, [r7, #4]
 8000a36:	431a      	orrs	r2, r3
 8000a38:	68bb      	ldr	r3, [r7, #8]
 8000a3a:	611a      	str	r2, [r3, #16]

	// Enables the transmission after clearing both STALL and NAK of the endpoint.
	MODIFY_REG(in_endpoint->DIEPCTL,USB_OTG_DIEPCTL_STALL,USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8000a3c:	68bb      	ldr	r3, [r7, #8]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	f023 4304 	bic.w	r3, r3, #2214592512	; 0x84000000
 8000a44:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000a48:	f043 4204 	orr.w	r2, r3, #2214592512	; 0x84000000
 8000a4c:	68bb      	ldr	r3, [r7, #8]
 8000a4e:	601a      	str	r2, [r3, #0]

	// Gets the size in term of 32-bit words (to avoid integer overflow in the loop).
	size = (size + 3) / 4;
 8000a50:	88bb      	ldrh	r3, [r7, #4]
 8000a52:	3303      	adds	r3, #3
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	da00      	bge.n	8000a5a <write_packet+0x66>
 8000a58:	3303      	adds	r3, #3
 8000a5a:	109b      	asrs	r3, r3, #2
 8000a5c:	80bb      	strh	r3, [r7, #4]

	for (; size > 0; size--, buffer += 4)
 8000a5e:	e009      	b.n	8000a74 <write_packet+0x80>
	{
		// Pushes the data to the TxFIFO.
		*fifo = *((uint32_t *)buffer);
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	681a      	ldr	r2, [r3, #0]
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	601a      	str	r2, [r3, #0]
	for (; size > 0; size--, buffer += 4)
 8000a68:	88bb      	ldrh	r3, [r7, #4]
 8000a6a:	3b01      	subs	r3, #1
 8000a6c:	80bb      	strh	r3, [r7, #4]
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	3304      	adds	r3, #4
 8000a72:	603b      	str	r3, [r7, #0]
 8000a74:	88bb      	ldrh	r3, [r7, #4]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d1f2      	bne.n	8000a60 <write_packet+0x6c>
	}
}
 8000a7a:	bf00      	nop
 8000a7c:	3710      	adds	r7, #16
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
	...

08000a84 <USBInterrupt_handler>:
 * @parem[in]		- none
 * @return			- none
 * @note			- none
 */
static void USBInterrupt_handler()
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
	volatile uint32_t gintstReg = USB_OTG_HS_GLOBAL->GINTSTS;
 8000a8a:	4b27      	ldr	r3, [pc, #156]	; (8000b28 <USBInterrupt_handler+0xa4>)
 8000a8c:	695b      	ldr	r3, [r3, #20]
 8000a8e:	607b      	str	r3, [r7, #4]

	if(gintstReg & USB_OTG_GINTSTS_USBRST)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d008      	beq.n	8000aac <USBInterrupt_handler+0x28>
	{
		USBReset_handler();
 8000a9a:	f7ff fd4b 	bl	8000534 <USBReset_handler>
		SET_BIT(USB_OTG_HS->GINTSTS,USB_OTG_GINTSTS_USBRST);
 8000a9e:	4b22      	ldr	r3, [pc, #136]	; (8000b28 <USBInterrupt_handler+0xa4>)
 8000aa0:	695b      	ldr	r3, [r3, #20]
 8000aa2:	4a21      	ldr	r2, [pc, #132]	; (8000b28 <USBInterrupt_handler+0xa4>)
 8000aa4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000aa8:	6153      	str	r3, [r2, #20]
 8000aaa:	e036      	b.n	8000b1a <USBInterrupt_handler+0x96>
	}
	else if(gintstReg & USB_OTG_GINTSTS_ENUMDNE)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d008      	beq.n	8000ac8 <USBInterrupt_handler+0x44>
	{
		EnumerationDone_handler();
 8000ab6:	f7ff fd57 	bl	8000568 <EnumerationDone_handler>
		SET_BIT(USB_OTG_HS->GINTSTS,USB_OTG_GINTSTS_ENUMDNE);
 8000aba:	4b1b      	ldr	r3, [pc, #108]	; (8000b28 <USBInterrupt_handler+0xa4>)
 8000abc:	695b      	ldr	r3, [r3, #20]
 8000abe:	4a1a      	ldr	r2, [pc, #104]	; (8000b28 <USBInterrupt_handler+0xa4>)
 8000ac0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000ac4:	6153      	str	r3, [r2, #20]
 8000ac6:	e028      	b.n	8000b1a <USBInterrupt_handler+0x96>
	}
	else if(gintstReg & USB_OTG_GINTSTS_RXFLVL)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	f003 0310 	and.w	r3, r3, #16
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d008      	beq.n	8000ae4 <USBInterrupt_handler+0x60>
	{
		RxFifoNonEmpty_handler();
 8000ad2:	f7ff fd55 	bl	8000580 <RxFifoNonEmpty_handler>
		SET_BIT(USB_OTG_HS->GINTSTS,USB_OTG_GINTSTS_RXFLVL);
 8000ad6:	4b14      	ldr	r3, [pc, #80]	; (8000b28 <USBInterrupt_handler+0xa4>)
 8000ad8:	695b      	ldr	r3, [r3, #20]
 8000ada:	4a13      	ldr	r2, [pc, #76]	; (8000b28 <USBInterrupt_handler+0xa4>)
 8000adc:	f043 0310 	orr.w	r3, r3, #16
 8000ae0:	6153      	str	r3, [r2, #20]
 8000ae2:	e01a      	b.n	8000b1a <USBInterrupt_handler+0x96>
	}
	else if (gintstReg & USB_OTG_GINTSTS_IEPINT)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d008      	beq.n	8000b00 <USBInterrupt_handler+0x7c>
	{
		INEndpoint_hander();
 8000aee:	f7ff fd93 	bl	8000618 <INEndpoint_hander>
		SET_BIT(USB_OTG_HS->GINTSTS,USB_OTG_GINTSTS_IEPINT);
 8000af2:	4b0d      	ldr	r3, [pc, #52]	; (8000b28 <USBInterrupt_handler+0xa4>)
 8000af4:	695b      	ldr	r3, [r3, #20]
 8000af6:	4a0c      	ldr	r2, [pc, #48]	; (8000b28 <USBInterrupt_handler+0xa4>)
 8000af8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000afc:	6153      	str	r3, [r2, #20]
 8000afe:	e00c      	b.n	8000b1a <USBInterrupt_handler+0x96>
	}
	else if (gintstReg & USB_OTG_GINTSTS_OEPINT)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d007      	beq.n	8000b1a <USBInterrupt_handler+0x96>
	{
		OUTEndpoint_hander();
 8000b0a:	f7ff fdb1 	bl	8000670 <OUTEndpoint_hander>
		SET_BIT(USB_OTG_HS->GINTSTS,USB_OTG_GINTSTS_OEPINT);
 8000b0e:	4b06      	ldr	r3, [pc, #24]	; (8000b28 <USBInterrupt_handler+0xa4>)
 8000b10:	695b      	ldr	r3, [r3, #20]
 8000b12:	4a05      	ldr	r2, [pc, #20]	; (8000b28 <USBInterrupt_handler+0xa4>)
 8000b14:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000b18:	6153      	str	r3, [r2, #20]
	}

	usb_events.on_usb_polled();
 8000b1a:	4b04      	ldr	r3, [pc, #16]	; (8000b2c <USBInterrupt_handler+0xa8>)
 8000b1c:	695b      	ldr	r3, [r3, #20]
 8000b1e:	4798      	blx	r3
}
 8000b20:	bf00      	nop
 8000b22:	3708      	adds	r7, #8
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	40040000 	.word	0x40040000
 8000b2c:	20000000 	.word	0x20000000

08000b30 <USB_Init>:


static UsbDevice *usbd_handle;

void USB_Init(UsbDevice *Usb_device)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
	usbd_handle = Usb_device;
 8000b38:	4a07      	ldr	r2, [pc, #28]	; (8000b58 <USB_Init+0x28>)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	6013      	str	r3, [r2, #0]
	usb_driver.USB_Gpio_Init();
 8000b3e:	4b07      	ldr	r3, [pc, #28]	; (8000b5c <USB_Init+0x2c>)
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	4798      	blx	r3
	usb_driver.USB_Core_Init();
 8000b44:	4b05      	ldr	r3, [pc, #20]	; (8000b5c <USB_Init+0x2c>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4798      	blx	r3
	usb_driver.connect();
 8000b4a:	4b04      	ldr	r3, [pc, #16]	; (8000b5c <USB_Init+0x2c>)
 8000b4c:	68db      	ldr	r3, [r3, #12]
 8000b4e:	4798      	blx	r3

}
 8000b50:	bf00      	nop
 8000b52:	3708      	adds	r7, #8
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	2000009c 	.word	0x2000009c
 8000b5c:	080023c4 	.word	0x080023c4

08000b60 <process_standard_device_request>:
 * @parem[in]		- none
 * @return			- none
 * @note			- none
 */
static void process_standard_device_request()
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
	UsbRequest const * request = usbd_handle->ptr_out_buffer;
 8000b66:	4b23      	ldr	r3, [pc, #140]	; (8000bf4 <process_standard_device_request+0x94>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	685b      	ldr	r3, [r3, #4]
 8000b6c:	607b      	str	r3, [r7, #4]
	switch (request->bRequest)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	785b      	ldrb	r3, [r3, #1]
 8000b72:	2b05      	cmp	r3, #5
 8000b74:	d025      	beq.n	8000bc2 <process_standard_device_request+0x62>
 8000b76:	2b06      	cmp	r3, #6
 8000b78:	d000      	beq.n	8000b7c <process_standard_device_request+0x1c>




	}
}
 8000b7a:	e036      	b.n	8000bea <process_standard_device_request+0x8a>
			log_info("Standard get descriptor request received.");
 8000b7c:	481e      	ldr	r0, [pc, #120]	; (8000bf8 <process_standard_device_request+0x98>)
 8000b7e:	f000 f9fb 	bl	8000f78 <log_info>
			const uint8_t descriptorType = request->wValue >> 8;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	885b      	ldrh	r3, [r3, #2]
 8000b86:	0a1b      	lsrs	r3, r3, #8
 8000b88:	b29b      	uxth	r3, r3
 8000b8a:	70fb      	strb	r3, [r7, #3]
			const uint8_t descriptorLength = request->wLength;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	88db      	ldrh	r3, [r3, #6]
 8000b90:	70bb      	strb	r3, [r7, #2]
			switch(descriptorType)
 8000b92:	78fb      	ldrb	r3, [r7, #3]
 8000b94:	2b01      	cmp	r3, #1
 8000b96:	d000      	beq.n	8000b9a <process_standard_device_request+0x3a>
			break;
 8000b98:	e027      	b.n	8000bea <process_standard_device_request+0x8a>
					log_info("- Get Device Descriptor.");
 8000b9a:	4818      	ldr	r0, [pc, #96]	; (8000bfc <process_standard_device_request+0x9c>)
 8000b9c:	f000 f9ec 	bl	8000f78 <log_info>
					usbd_handle->ptr_in_buffer = &device_descriptor;
 8000ba0:	4b14      	ldr	r3, [pc, #80]	; (8000bf4 <process_standard_device_request+0x94>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a16      	ldr	r2, [pc, #88]	; (8000c00 <process_standard_device_request+0xa0>)
 8000ba6:	60da      	str	r2, [r3, #12]
					usbd_handle->in_data_size = descriptorLength;
 8000ba8:	4b12      	ldr	r3, [pc, #72]	; (8000bf4 <process_standard_device_request+0x94>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	78ba      	ldrb	r2, [r7, #2]
 8000bae:	611a      	str	r2, [r3, #16]
					log_info("Switching control stage to IN-DATA.");
 8000bb0:	4814      	ldr	r0, [pc, #80]	; (8000c04 <process_standard_device_request+0xa4>)
 8000bb2:	f000 f9e1 	bl	8000f78 <log_info>
					usbd_handle->control_transfer_stage = USB_CONTROL_STAGE_STATUS_IN;
 8000bb6:	4b0f      	ldr	r3, [pc, #60]	; (8000bf4 <process_standard_device_request+0x94>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	2206      	movs	r2, #6
 8000bbc:	705a      	strb	r2, [r3, #1]
					break;
 8000bbe:	bf00      	nop
			break;
 8000bc0:	e013      	b.n	8000bea <process_standard_device_request+0x8a>
			log_info("Standard Set Address request received");
 8000bc2:	4811      	ldr	r0, [pc, #68]	; (8000c08 <process_standard_device_request+0xa8>)
 8000bc4:	f000 f9d8 	bl	8000f78 <log_info>
			const uint16_t deviceAddr = request->wValue;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	885b      	ldrh	r3, [r3, #2]
 8000bcc:	803b      	strh	r3, [r7, #0]
			usb_driver.set_device_addr(deviceAddr);
 8000bce:	4b0f      	ldr	r3, [pc, #60]	; (8000c0c <process_standard_device_request+0xac>)
 8000bd0:	689b      	ldr	r3, [r3, #8]
 8000bd2:	883a      	ldrh	r2, [r7, #0]
 8000bd4:	b2d2      	uxtb	r2, r2
 8000bd6:	4610      	mov	r0, r2
 8000bd8:	4798      	blx	r3
			log_info("Switching control stage to IN-DATA.");
 8000bda:	480a      	ldr	r0, [pc, #40]	; (8000c04 <process_standard_device_request+0xa4>)
 8000bdc:	f000 f9cc 	bl	8000f78 <log_info>
			usbd_handle->device_state = USB_CONTROL_STAGE_STATUS_IN;
 8000be0:	4b04      	ldr	r3, [pc, #16]	; (8000bf4 <process_standard_device_request+0x94>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	2206      	movs	r2, #6
 8000be6:	701a      	strb	r2, [r3, #0]
			break;
 8000be8:	bf00      	nop
}
 8000bea:	bf00      	nop
 8000bec:	3708      	adds	r7, #8
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	2000009c 	.word	0x2000009c
 8000bf8:	080021e0 	.word	0x080021e0
 8000bfc:	0800220c 	.word	0x0800220c
 8000c00:	080023f0 	.word	0x080023f0
 8000c04:	08002228 	.word	0x08002228
 8000c08:	0800224c 	.word	0x0800224c
 8000c0c:	080023c4 	.word	0x080023c4

08000c10 <process_request>:
 * @parem[in]		- none
 * @return			- none
 * @note			- none
 */
static void process_request()
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
	UsbRequest const * request = usbd_handle->ptr_out_buffer;
 8000c16:	4b09      	ldr	r3, [pc, #36]	; (8000c3c <process_request+0x2c>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	607b      	str	r3, [r7, #4]
	switch(request->bmRequestType & (USB_BM_REQUEST_TYPE_DIRECTION_MASK | USB_BM_REQUEST_TYPE_RECIPIENT_MASK ))
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	f003 0383 	and.w	r3, r3, #131	; 0x83
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d000      	beq.n	8000c2c <process_request+0x1c>
	{
		case ( USB_BM_REQUEST_TYPE_TYPE_STANDARD | USB_BM_REQUEST_TYPE_RECIPIENT_DEVICE ):
				process_standard_device_request();
				break;
	}
}
 8000c2a:	e002      	b.n	8000c32 <process_request+0x22>
				process_standard_device_request();
 8000c2c:	f7ff ff98 	bl	8000b60 <process_standard_device_request>
				break;
 8000c30:	bf00      	nop
}
 8000c32:	bf00      	nop
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	2000009c 	.word	0x2000009c

08000c40 <process_control_transfer_stage>:
 * @parem[in]		- none
 * @return			- none
 * @note			- none
 */
static void process_control_transfer_stage()
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
	switch(usbd_handle->control_transfer_stage)
 8000c46:	4b34      	ldr	r3, [pc, #208]	; (8000d18 <process_control_transfer_stage+0xd8>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	785b      	ldrb	r3, [r3, #1]
 8000c4c:	2b05      	cmp	r3, #5
 8000c4e:	d85f      	bhi.n	8000d10 <process_control_transfer_stage+0xd0>
 8000c50:	a201      	add	r2, pc, #4	; (adr r2, 8000c58 <process_control_transfer_stage+0x18>)
 8000c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c56:	bf00      	nop
 8000c58:	08000d0b 	.word	0x08000d0b
 8000c5c:	08000d11 	.word	0x08000d11
 8000c60:	08000c71 	.word	0x08000c71
 8000c64:	08000d0b 	.word	0x08000d0b
 8000c68:	08000d11 	.word	0x08000d11
 8000c6c:	08000cfb 	.word	0x08000cfb
	{
		case USB_CONTROL_STAGE_SETUP:
			break;
		case USB_CONTROL_STAGE_DATA_IN:
			log_info("Processing IN-DATA Stage");
 8000c70:	482a      	ldr	r0, [pc, #168]	; (8000d1c <process_control_transfer_stage+0xdc>)
 8000c72:	f000 f981 	bl	8000f78 <log_info>

			//Check for the case when packet size is smaller than max packet size
			uint8_t dataSize = MIN(usbd_handle->in_data_size,device_descriptor.bMaxPacketSize0);
 8000c76:	2308      	movs	r3, #8
 8000c78:	461a      	mov	r2, r3
 8000c7a:	4b27      	ldr	r3, [pc, #156]	; (8000d18 <process_control_transfer_stage+0xd8>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	691b      	ldr	r3, [r3, #16]
 8000c80:	4293      	cmp	r3, r2
 8000c82:	bf28      	it	cs
 8000c84:	4613      	movcs	r3, r2
 8000c86:	71fb      	strb	r3, [r7, #7]

			usb_driver.write_packet(0,usbd_handle->ptr_in_buffer,dataSize);
 8000c88:	4b25      	ldr	r3, [pc, #148]	; (8000d20 <process_control_transfer_stage+0xe0>)
 8000c8a:	6a1b      	ldr	r3, [r3, #32]
 8000c8c:	4a22      	ldr	r2, [pc, #136]	; (8000d18 <process_control_transfer_stage+0xd8>)
 8000c8e:	6812      	ldr	r2, [r2, #0]
 8000c90:	68d1      	ldr	r1, [r2, #12]
 8000c92:	79fa      	ldrb	r2, [r7, #7]
 8000c94:	b292      	uxth	r2, r2
 8000c96:	2000      	movs	r0, #0
 8000c98:	4798      	blx	r3

			//Update the the pointer
			usbd_handle->in_data_size -= dataSize;
 8000c9a:	4b1f      	ldr	r3, [pc, #124]	; (8000d18 <process_control_transfer_stage+0xd8>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	6919      	ldr	r1, [r3, #16]
 8000ca0:	79fa      	ldrb	r2, [r7, #7]
 8000ca2:	4b1d      	ldr	r3, [pc, #116]	; (8000d18 <process_control_transfer_stage+0xd8>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	1a8a      	subs	r2, r1, r2
 8000ca8:	611a      	str	r2, [r3, #16]
			usbd_handle->ptr_in_buffer += dataSize;
 8000caa:	4b1b      	ldr	r3, [pc, #108]	; (8000d18 <process_control_transfer_stage+0xd8>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	68d9      	ldr	r1, [r3, #12]
 8000cb0:	79fa      	ldrb	r2, [r7, #7]
 8000cb2:	4b19      	ldr	r3, [pc, #100]	; (8000d18 <process_control_transfer_stage+0xd8>)
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	440a      	add	r2, r1
 8000cb8:	60da      	str	r2, [r3, #12]

			log_info("Switching control stage to IN-Data IDLE");
 8000cba:	481a      	ldr	r0, [pc, #104]	; (8000d24 <process_control_transfer_stage+0xe4>)
 8000cbc:	f000 f95c 	bl	8000f78 <log_info>
			//Change the control stage in order for the host to fetch data
			usbd_handle->control_transfer_stage = USB_CONTROL_STAGE_DATA_IN_IDLE;
 8000cc0:	4b15      	ldr	r3, [pc, #84]	; (8000d18 <process_control_transfer_stage+0xd8>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	2203      	movs	r2, #3
 8000cc6:	705a      	strb	r2, [r3, #1]

			if(usbd_handle->in_data_size == 0)
 8000cc8:	4b13      	ldr	r3, [pc, #76]	; (8000d18 <process_control_transfer_stage+0xd8>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	691b      	ldr	r3, [r3, #16]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d11d      	bne.n	8000d0e <process_control_transfer_stage+0xce>
			{
				//Case when last packet sent is max packet size
				if(dataSize == device_descriptor.bMaxPacketSize0)
 8000cd2:	2208      	movs	r2, #8
 8000cd4:	79fb      	ldrb	r3, [r7, #7]
 8000cd6:	4293      	cmp	r3, r2
 8000cd8:	d107      	bne.n	8000cea <process_control_transfer_stage+0xaa>
				{
					log_info("Switching control stage to IN-Data ZERO stage");
 8000cda:	4813      	ldr	r0, [pc, #76]	; (8000d28 <process_control_transfer_stage+0xe8>)
 8000cdc:	f000 f94c 	bl	8000f78 <log_info>
					usbd_handle->control_transfer_stage = USB_CONTROL_STAGE_DATA_IN_ZERO;
 8000ce0:	4b0d      	ldr	r3, [pc, #52]	; (8000d18 <process_control_transfer_stage+0xd8>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	2204      	movs	r2, #4
 8000ce6:	705a      	strb	r2, [r3, #1]
				{
					log_info("Switching control stage to OUT-Status");
					usbd_handle->control_transfer_stage = USB_CONTROL_STAGE_STATUS_OUT;
				}
			}
			break;
 8000ce8:	e011      	b.n	8000d0e <process_control_transfer_stage+0xce>
					log_info("Switching control stage to OUT-Status");
 8000cea:	4810      	ldr	r0, [pc, #64]	; (8000d2c <process_control_transfer_stage+0xec>)
 8000cec:	f000 f944 	bl	8000f78 <log_info>
					usbd_handle->control_transfer_stage = USB_CONTROL_STAGE_STATUS_OUT;
 8000cf0:	4b09      	ldr	r3, [pc, #36]	; (8000d18 <process_control_transfer_stage+0xd8>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	2205      	movs	r2, #5
 8000cf6:	705a      	strb	r2, [r3, #1]
			break;
 8000cf8:	e009      	b.n	8000d0e <process_control_transfer_stage+0xce>

		case USB_CONTROL_STAGE_DATA_IN_IDLE:
			break;

		case USB_CONTROL_STAGE_STATUS_OUT:
			log_info("Switching control stage to Setup");
 8000cfa:	480d      	ldr	r0, [pc, #52]	; (8000d30 <process_control_transfer_stage+0xf0>)
 8000cfc:	f000 f93c 	bl	8000f78 <log_info>
			usbd_handle->control_transfer_stage = USB_CONTROL_STAGE_SETUP;
 8000d00:	4b05      	ldr	r3, [pc, #20]	; (8000d18 <process_control_transfer_stage+0xd8>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	2200      	movs	r2, #0
 8000d06:	705a      	strb	r2, [r3, #1]
			break;
 8000d08:	e002      	b.n	8000d10 <process_control_transfer_stage+0xd0>
			break;
 8000d0a:	bf00      	nop
 8000d0c:	e000      	b.n	8000d10 <process_control_transfer_stage+0xd0>
			break;
 8000d0e:	bf00      	nop

	}
}
 8000d10:	bf00      	nop
 8000d12:	3708      	adds	r7, #8
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	2000009c 	.word	0x2000009c
 8000d1c:	08002274 	.word	0x08002274
 8000d20:	080023c4 	.word	0x080023c4
 8000d24:	08002290 	.word	0x08002290
 8000d28:	080022b8 	.word	0x080022b8
 8000d2c:	080022e8 	.word	0x080022e8
 8000d30:	08002310 	.word	0x08002310

08000d34 <usb_polled_handler>:

static void usb_polled_handler()
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
	process_control_transfer_stage();
 8000d38:	f7ff ff82 	bl	8000c40 <process_control_transfer_stage>
}
 8000d3c:	bf00      	nop
 8000d3e:	bd80      	pop	{r7, pc}

08000d40 <usbd_poll>:
 * @parem[in]		- none
 * @return			- none
 * @note			- function is used for bus polling
 */
void usbd_poll()
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
	usb_driver.poll();
 8000d44:	4b02      	ldr	r3, [pc, #8]	; (8000d50 <usbd_poll+0x10>)
 8000d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d48:	4798      	blx	r3
}
 8000d4a:	bf00      	nop
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	080023c4 	.word	0x080023c4

08000d54 <USB_reset_receive_handler>:
 * @parem[in]		- none
 * @return			- none
 * @note			- none
 */
static void USB_reset_receive_handler()
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
	usbd_handle->in_data_size = 0;
 8000d58:	4b0c      	ldr	r3, [pc, #48]	; (8000d8c <USB_reset_receive_handler+0x38>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	611a      	str	r2, [r3, #16]
	usbd_handle->out_data_size= 0;
 8000d60:	4b0a      	ldr	r3, [pc, #40]	; (8000d8c <USB_reset_receive_handler+0x38>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	2200      	movs	r2, #0
 8000d66:	609a      	str	r2, [r3, #8]
	usbd_handle->configuration_value =0;
 8000d68:	4b08      	ldr	r3, [pc, #32]	; (8000d8c <USB_reset_receive_handler+0x38>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	709a      	strb	r2, [r3, #2]
	usbd_handle->device_state = USB_DEVICE_STATE_DEFAULT;
 8000d70:	4b06      	ldr	r3, [pc, #24]	; (8000d8c <USB_reset_receive_handler+0x38>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	2200      	movs	r2, #0
 8000d76:	701a      	strb	r2, [r3, #0]
	usbd_handle->control_transfer_stage = USB_CONTROL_STAGE_SETUP;
 8000d78:	4b04      	ldr	r3, [pc, #16]	; (8000d8c <USB_reset_receive_handler+0x38>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	705a      	strb	r2, [r3, #1]
	usb_driver.set_device_addr(0);
 8000d80:	4b03      	ldr	r3, [pc, #12]	; (8000d90 <USB_reset_receive_handler+0x3c>)
 8000d82:	689b      	ldr	r3, [r3, #8]
 8000d84:	2000      	movs	r0, #0
 8000d86:	4798      	blx	r3
}
 8000d88:	bf00      	nop
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	2000009c 	.word	0x2000009c
 8000d90:	080023c4 	.word	0x080023c4

08000d94 <setup_data_received_handler>:
 * @parem[in]		- none
 * @return			- none
 * @note			- none
 */
static void setup_data_received_handler(uint8_t endpointNum, uint16_t byte_count)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	460a      	mov	r2, r1
 8000d9e:	71fb      	strb	r3, [r7, #7]
 8000da0:	4613      	mov	r3, r2
 8000da2:	80bb      	strh	r3, [r7, #4]
	usb_driver.read_packet(usbd_handle->ptr_out_buffer,byte_count);
 8000da4:	4b0a      	ldr	r3, [pc, #40]	; (8000dd0 <setup_data_received_handler+0x3c>)
 8000da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000da8:	4a0a      	ldr	r2, [pc, #40]	; (8000dd4 <setup_data_received_handler+0x40>)
 8000daa:	6812      	ldr	r2, [r2, #0]
 8000dac:	6852      	ldr	r2, [r2, #4]
 8000dae:	88b9      	ldrh	r1, [r7, #4]
 8000db0:	4610      	mov	r0, r2
 8000db2:	4798      	blx	r3

	log_debug_array("Setup data:",usbd_handle->ptr_out_buffer, byte_count);
 8000db4:	4b07      	ldr	r3, [pc, #28]	; (8000dd4 <setup_data_received_handler+0x40>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	88ba      	ldrh	r2, [r7, #4]
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4806      	ldr	r0, [pc, #24]	; (8000dd8 <setup_data_received_handler+0x44>)
 8000dc0:	f000 f8ee 	bl	8000fa0 <log_debug_array>
	process_request();
 8000dc4:	f7ff ff24 	bl	8000c10 <process_request>
}
 8000dc8:	bf00      	nop
 8000dca:	3708      	adds	r7, #8
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	080023c4 	.word	0x080023c4
 8000dd4:	2000009c 	.word	0x2000009c
 8000dd8:	08002334 	.word	0x08002334

08000ddc <in_transfer_completed_handler>:
 * @return			- none
 * @note			- none
 */

static void in_transfer_completed_handler(uint8_t endpointNum)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4603      	mov	r3, r0
 8000de4:	71fb      	strb	r3, [r7, #7]
	if(usbd_handle->in_data_size)
 8000de6:	4b11      	ldr	r3, [pc, #68]	; (8000e2c <in_transfer_completed_handler+0x50>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	691b      	ldr	r3, [r3, #16]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d007      	beq.n	8000e00 <in_transfer_completed_handler+0x24>
	{
		log_info("Switching control stage to IN-Data");
 8000df0:	480f      	ldr	r0, [pc, #60]	; (8000e30 <in_transfer_completed_handler+0x54>)
 8000df2:	f000 f8c1 	bl	8000f78 <log_info>
		usbd_handle->control_transfer_stage = USB_CONTROL_STAGE_DATA_IN;
 8000df6:	4b0d      	ldr	r3, [pc, #52]	; (8000e2c <in_transfer_completed_handler+0x50>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	2202      	movs	r2, #2
 8000dfc:	705a      	strb	r2, [r3, #1]
		//Send a zero length data to host no more data to be sent
		usb_driver.write_packet(0,NULL,0);
		log_info("Switching control stage to OUT-Status");
		usbd_handle->control_transfer_stage = USB_CONTROL_STAGE_STATUS_OUT;
	}
}
 8000dfe:	e011      	b.n	8000e24 <in_transfer_completed_handler+0x48>
	else if(usbd_handle->control_transfer_stage == USB_CONTROL_STAGE_DATA_IN_ZERO)
 8000e00:	4b0a      	ldr	r3, [pc, #40]	; (8000e2c <in_transfer_completed_handler+0x50>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	785b      	ldrb	r3, [r3, #1]
 8000e06:	2b04      	cmp	r3, #4
 8000e08:	d10c      	bne.n	8000e24 <in_transfer_completed_handler+0x48>
		usb_driver.write_packet(0,NULL,0);
 8000e0a:	4b0a      	ldr	r3, [pc, #40]	; (8000e34 <in_transfer_completed_handler+0x58>)
 8000e0c:	6a1b      	ldr	r3, [r3, #32]
 8000e0e:	2200      	movs	r2, #0
 8000e10:	2100      	movs	r1, #0
 8000e12:	2000      	movs	r0, #0
 8000e14:	4798      	blx	r3
		log_info("Switching control stage to OUT-Status");
 8000e16:	4808      	ldr	r0, [pc, #32]	; (8000e38 <in_transfer_completed_handler+0x5c>)
 8000e18:	f000 f8ae 	bl	8000f78 <log_info>
		usbd_handle->control_transfer_stage = USB_CONTROL_STAGE_STATUS_OUT;
 8000e1c:	4b03      	ldr	r3, [pc, #12]	; (8000e2c <in_transfer_completed_handler+0x50>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	2205      	movs	r2, #5
 8000e22:	705a      	strb	r2, [r3, #1]
}
 8000e24:	bf00      	nop
 8000e26:	3708      	adds	r7, #8
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	2000009c 	.word	0x2000009c
 8000e30:	08002340 	.word	0x08002340
 8000e34:	080023c4 	.word	0x080023c4
 8000e38:	080022e8 	.word	0x080022e8

08000e3c <out_transfer_completed_handler>:

static void out_transfer_completed_handler(uint8_t endpointNum)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	71fb      	strb	r3, [r7, #7]

}
 8000e46:	bf00      	nop
 8000e48:	370c      	adds	r7, #12
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr

08000e52 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000e52:	b480      	push	{r7}
 8000e54:	b083      	sub	sp, #12
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000e5a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000e5e:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000e62:	f003 0301 	and.w	r3, r3, #1
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d013      	beq.n	8000e92 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000e6a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000e6e:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000e72:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d00b      	beq.n	8000e92 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000e7a:	e000      	b.n	8000e7e <ITM_SendChar+0x2c>
    {
      __NOP();
 8000e7c:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000e7e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d0f9      	beq.n	8000e7c <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000e88:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000e8c:	687a      	ldr	r2, [r7, #4]
 8000e8e:	b2d2      	uxtb	r2, r2
 8000e90:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000e92:	687b      	ldr	r3, [r7, #4]
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	370c      	adds	r7, #12
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr

08000ea0 <_write>:

/** \brief Redirects `printf()` output to the serial wire out (SWO).
 * This function overrides a weak function symbol and is not to be used directly.
 */
int _write(int file, char *ptr, int len)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b086      	sub	sp, #24
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	60b9      	str	r1, [r7, #8]
 8000eaa:	607a      	str	r2, [r7, #4]
  int i=0;
 8000eac:	2300      	movs	r3, #0
 8000eae:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	617b      	str	r3, [r7, #20]
 8000eb4:	e009      	b.n	8000eca <_write+0x2a>
    ITM_SendChar((*ptr++));
 8000eb6:	68bb      	ldr	r3, [r7, #8]
 8000eb8:	1c5a      	adds	r2, r3, #1
 8000eba:	60ba      	str	r2, [r7, #8]
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f7ff ffc7 	bl	8000e52 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	3301      	adds	r3, #1
 8000ec8:	617b      	str	r3, [r7, #20]
 8000eca:	697a      	ldr	r2, [r7, #20]
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	429a      	cmp	r2, r3
 8000ed0:	dbf1      	blt.n	8000eb6 <_write+0x16>

  return len;
 8000ed2:	687b      	ldr	r3, [r7, #4]
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	3718      	adds	r7, #24
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}

08000edc <_get_log_level_string>:

char const * const _get_log_level_string(LogLvl const log_level)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	71fb      	strb	r3, [r7, #7]
    switch(log_level)
 8000ee6:	79fb      	ldrb	r3, [r7, #7]
 8000ee8:	2b01      	cmp	r3, #1
 8000eea:	d005      	beq.n	8000ef8 <_get_log_level_string+0x1c>
 8000eec:	2b02      	cmp	r3, #2
 8000eee:	d005      	beq.n	8000efc <_get_log_level_string+0x20>
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d105      	bne.n	8000f00 <_get_log_level_string+0x24>
    {
        case LOG_LEVEL_ERROR:
            return "ERROR";
 8000ef4:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <_get_log_level_string+0x34>)
 8000ef6:	e004      	b.n	8000f02 <_get_log_level_string+0x26>
        case LOG_LEVEL_INFO:
            return "INFO";
 8000ef8:	4b06      	ldr	r3, [pc, #24]	; (8000f14 <_get_log_level_string+0x38>)
 8000efa:	e002      	b.n	8000f02 <_get_log_level_string+0x26>
        case LOG_LEVEL_DEBUG:
            return "DEBUG";
 8000efc:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <_get_log_level_string+0x3c>)
 8000efe:	e000      	b.n	8000f02 <_get_log_level_string+0x26>
        default:
        	return "No Arg";
 8000f00:	4b06      	ldr	r3, [pc, #24]	; (8000f1c <_get_log_level_string+0x40>)
    }
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	370c      	adds	r7, #12
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	08002364 	.word	0x08002364
 8000f14:	0800236c 	.word	0x0800236c
 8000f18:	08002374 	.word	0x08002374
 8000f1c:	0800237c 	.word	0x0800237c

08000f20 <_log>:

static void _log(LogLvl const log_level, char const * const format, va_list args)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b084      	sub	sp, #16
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	4603      	mov	r3, r0
 8000f28:	60b9      	str	r1, [r7, #8]
 8000f2a:	607a      	str	r2, [r7, #4]
 8000f2c:	73fb      	strb	r3, [r7, #15]
    if (log_level > system_log_level)
 8000f2e:	4b0f      	ldr	r3, [pc, #60]	; (8000f6c <_log+0x4c>)
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	7bfa      	ldrb	r2, [r7, #15]
 8000f34:	429a      	cmp	r2, r3
 8000f36:	d814      	bhi.n	8000f62 <_log+0x42>
    {
    	return;
    }


	printf("[%s] ", _get_log_level_string(log_level));
 8000f38:	7bfb      	ldrb	r3, [r7, #15]
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f7ff ffce 	bl	8000edc <_get_log_level_string>
 8000f40:	4603      	mov	r3, r0
 8000f42:	4619      	mov	r1, r3
 8000f44:	480a      	ldr	r0, [pc, #40]	; (8000f70 <_log+0x50>)
 8000f46:	f000 fc1d 	bl	8001784 <iprintf>
	vfprintf(stdout, format, args);
 8000f4a:	4b0a      	ldr	r3, [pc, #40]	; (8000f74 <_log+0x54>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	689b      	ldr	r3, [r3, #8]
 8000f50:	687a      	ldr	r2, [r7, #4]
 8000f52:	68b9      	ldr	r1, [r7, #8]
 8000f54:	4618      	mov	r0, r3
 8000f56:	f000 fa83 	bl	8001460 <vfiprintf>
	printf("\n");
 8000f5a:	200a      	movs	r0, #10
 8000f5c:	f000 fc2a 	bl	80017b4 <putchar>
 8000f60:	e000      	b.n	8000f64 <_log+0x44>
    	return;
 8000f62:	bf00      	nop
}
 8000f64:	3710      	adds	r7, #16
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	20000018 	.word	0x20000018
 8000f70:	08002384 	.word	0x08002384
 8000f74:	2000001c 	.word	0x2000001c

08000f78 <log_info>:
    _log(LOG_LEVEL_ERROR, format, args);
    va_end(args);
}

void log_info(char const * const format, ...)
{
 8000f78:	b40f      	push	{r0, r1, r2, r3}
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	b082      	sub	sp, #8
 8000f7e:	af00      	add	r7, sp, #0
    va_list args;
	va_start(args, format);
 8000f80:	f107 0314 	add.w	r3, r7, #20
 8000f84:	607b      	str	r3, [r7, #4]
    _log(LOG_LEVEL_INFO, format, args);
 8000f86:	687a      	ldr	r2, [r7, #4]
 8000f88:	6939      	ldr	r1, [r7, #16]
 8000f8a:	2001      	movs	r0, #1
 8000f8c:	f7ff ffc8 	bl	8000f20 <_log>
    va_end(args);
}
 8000f90:	bf00      	nop
 8000f92:	3708      	adds	r7, #8
 8000f94:	46bd      	mov	sp, r7
 8000f96:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f9a:	b004      	add	sp, #16
 8000f9c:	4770      	bx	lr
	...

08000fa0 <log_debug_array>:
 * \param label The label of the array.
 * \param array Pointer to the array.
 * \param len The length of data in bytes.
 */
void log_debug_array(char const * const label, void const *array, uint16_t const len)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b086      	sub	sp, #24
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	60f8      	str	r0, [r7, #12]
 8000fa8:	60b9      	str	r1, [r7, #8]
 8000faa:	4613      	mov	r3, r2
 8000fac:	80fb      	strh	r3, [r7, #6]
    if (LOG_LEVEL_DEBUG > system_log_level)
 8000fae:	4b18      	ldr	r3, [pc, #96]	; (8001010 <log_debug_array+0x70>)
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	2b01      	cmp	r3, #1
 8000fb4:	d928      	bls.n	8001008 <log_debug_array+0x68>
    {
    	return;
    }

	printf("[%s] %s[%d]: {", _get_log_level_string(LOG_LEVEL_DEBUG), label, len);
 8000fb6:	2002      	movs	r0, #2
 8000fb8:	f7ff ff90 	bl	8000edc <_get_log_level_string>
 8000fbc:	4601      	mov	r1, r0
 8000fbe:	88fb      	ldrh	r3, [r7, #6]
 8000fc0:	68fa      	ldr	r2, [r7, #12]
 8000fc2:	4814      	ldr	r0, [pc, #80]	; (8001014 <log_debug_array+0x74>)
 8000fc4:	f000 fbde 	bl	8001784 <iprintf>
    for (uint16_t i = 0; i < len; i++)
 8000fc8:	2300      	movs	r3, #0
 8000fca:	82fb      	strh	r3, [r7, #22]
 8000fcc:	e014      	b.n	8000ff8 <log_debug_array+0x58>
    {
    	uint8_t val = *((uint8_t *)(array + i));
 8000fce:	8afb      	ldrh	r3, [r7, #22]
 8000fd0:	68ba      	ldr	r2, [r7, #8]
 8000fd2:	4413      	add	r3, r2
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	757b      	strb	r3, [r7, #21]
    	printf("0x%02X", val);
 8000fd8:	7d7b      	ldrb	r3, [r7, #21]
 8000fda:	4619      	mov	r1, r3
 8000fdc:	480e      	ldr	r0, [pc, #56]	; (8001018 <log_debug_array+0x78>)
 8000fde:	f000 fbd1 	bl	8001784 <iprintf>
    	
    	// Add ", " after all elements except the last one.
    	if (i < len - 1)
 8000fe2:	8afa      	ldrh	r2, [r7, #22]
 8000fe4:	88fb      	ldrh	r3, [r7, #6]
 8000fe6:	3b01      	subs	r3, #1
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	da02      	bge.n	8000ff2 <log_debug_array+0x52>
    	{
    	    printf(", ");
 8000fec:	480b      	ldr	r0, [pc, #44]	; (800101c <log_debug_array+0x7c>)
 8000fee:	f000 fbc9 	bl	8001784 <iprintf>
    for (uint16_t i = 0; i < len; i++)
 8000ff2:	8afb      	ldrh	r3, [r7, #22]
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	82fb      	strh	r3, [r7, #22]
 8000ff8:	8afa      	ldrh	r2, [r7, #22]
 8000ffa:	88fb      	ldrh	r3, [r7, #6]
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	d3e6      	bcc.n	8000fce <log_debug_array+0x2e>
    	}
    }
	printf("}\n");
 8001000:	4807      	ldr	r0, [pc, #28]	; (8001020 <log_debug_array+0x80>)
 8001002:	f000 fc47 	bl	8001894 <puts>
 8001006:	e000      	b.n	800100a <log_debug_array+0x6a>
    	return;
 8001008:	bf00      	nop
}
 800100a:	3718      	adds	r7, #24
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	20000018 	.word	0x20000018
 8001014:	0800238c 	.word	0x0800238c
 8001018:	0800239c 	.word	0x0800239c
 800101c:	080023a4 	.word	0x080023a4
 8001020:	080023a8 	.word	0x080023a8

08001024 <main>:

UsbDevice usb_device;
uint32_t buffer[8];

int main(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
	USBPins.GPIO_PinConfig.GPIO_PinNumber =12;
	GPIO_Init(&USBPins);*/



	log_info("Program entry point.");
 8001028:	4805      	ldr	r0, [pc, #20]	; (8001040 <main+0x1c>)
 800102a:	f7ff ffa5 	bl	8000f78 <log_info>
	usb_device.ptr_out_buffer = &buffer;
 800102e:	4b05      	ldr	r3, [pc, #20]	; (8001044 <main+0x20>)
 8001030:	4a05      	ldr	r2, [pc, #20]	; (8001048 <main+0x24>)
 8001032:	605a      	str	r2, [r3, #4]
	USB_Init(&usb_device);
 8001034:	4803      	ldr	r0, [pc, #12]	; (8001044 <main+0x20>)
 8001036:	f7ff fd7b 	bl	8000b30 <USB_Init>
	for(;;)
	{
		usbd_poll();
 800103a:	f7ff fe81 	bl	8000d40 <usbd_poll>
 800103e:	e7fc      	b.n	800103a <main+0x16>
 8001040:	080023ac 	.word	0x080023ac
 8001044:	200000ac 	.word	0x200000ac
 8001048:	200000c0 	.word	0x200000c0

0800104c <configureClock>:
//HCLK = 72MHz
//PLL: M = 4, N = 72, P = 2, Q = 3
//APB1 prescaler =2 APB2 prescaler  = 1

static void configureClock(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0

	MODIFY_REG(FLASH->ACR,FLASH_ACR_LATENCY,FLASH_ACR_LATENCY_2WS << FLASH_ACR_LATENCY_Pos);
 8001050:	4b2c      	ldr	r3, [pc, #176]	; (8001104 <configureClock+0xb8>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f023 030f 	bic.w	r3, r3, #15
 8001058:	4a2a      	ldr	r2, [pc, #168]	; (8001104 <configureClock+0xb8>)
 800105a:	f043 0302 	orr.w	r3, r3, #2
 800105e:	6013      	str	r3, [r2, #0]

	//Enable HSE
	SET_BIT(RCC->CR,RCC_CR_HSEON);
 8001060:	4b29      	ldr	r3, [pc, #164]	; (8001108 <configureClock+0xbc>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a28      	ldr	r2, [pc, #160]	; (8001108 <configureClock+0xbc>)
 8001066:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800106a:	6013      	str	r3, [r2, #0]

	//Wait for HSE to be ready
	while(!READ_BIT(RCC->CR,RCC_CR_HSERDY));
 800106c:	bf00      	nop
 800106e:	4b26      	ldr	r3, [pc, #152]	; (8001108 <configureClock+0xbc>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001076:	2b00      	cmp	r3, #0
 8001078:	d0f9      	beq.n	800106e <configureClock+0x22>

	//Turn off PLL
	CLEAR_BIT(RCC->CR,RCC_CR_PLLON);
 800107a:	4b23      	ldr	r3, [pc, #140]	; (8001108 <configureClock+0xbc>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a22      	ldr	r2, [pc, #136]	; (8001108 <configureClock+0xbc>)
 8001080:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001084:	6013      	str	r3, [r2, #0]

	//Wait for PLL to be ready be cleared
	while(READ_BIT(RCC->CR,RCC_CR_PLLRDY));
 8001086:	bf00      	nop
 8001088:	4b1f      	ldr	r3, [pc, #124]	; (8001108 <configureClock+0xbc>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001090:	2b00      	cmp	r3, #0
 8001092:	d1f9      	bne.n	8001088 <configureClock+0x3c>


	//Configure PLL: source = HSE, SYCLK=72Mhz
	MODIFY_REG(RCC->PLLCFGR,
 8001094:	4b1c      	ldr	r3, [pc, #112]	; (8001108 <configureClock+0xbc>)
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	4a1c      	ldr	r2, [pc, #112]	; (800110c <configureClock+0xc0>)
 800109a:	401a      	ands	r2, r3
 800109c:	491a      	ldr	r1, [pc, #104]	; (8001108 <configureClock+0xbc>)
 800109e:	4b1c      	ldr	r3, [pc, #112]	; (8001110 <configureClock+0xc4>)
 80010a0:	4313      	orrs	r3, r2
 80010a2:	604b      	str	r3, [r1, #4]
			RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLQ | RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLP,
			_VAL2FLD(RCC_PLLCFGR_PLLM, 4) | _VAL2FLD(RCC_PLLCFGR_PLLN, 72) | _VAL2FLD(RCC_PLLCFGR_PLLQ, 3) | RCC_PLLCFGR_PLLSRC_HSE);

	// Configures PPRE1 = 2
		MODIFY_REG(RCC->CFGR,
 80010a4:	4b18      	ldr	r3, [pc, #96]	; (8001108 <configureClock+0xbc>)
 80010a6:	689b      	ldr	r3, [r3, #8]
 80010a8:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80010ac:	4a16      	ldr	r2, [pc, #88]	; (8001108 <configureClock+0xbc>)
 80010ae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80010b2:	6093      	str	r3, [r2, #8]
			RCC_CFGR_PPRE1,_VAL2FLD(RCC_CFGR_PPRE1, 4));

	//Enable PLL Module
	SET_BIT(RCC->CR,RCC_CR_PLLON);
 80010b4:	4b14      	ldr	r3, [pc, #80]	; (8001108 <configureClock+0xbc>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a13      	ldr	r2, [pc, #76]	; (8001108 <configureClock+0xbc>)
 80010ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80010be:	6013      	str	r3, [r2, #0]

	//Wait until PLL is stable
	while(!READ_BIT(RCC->CR,RCC_CR_PLLRDY));
 80010c0:	bf00      	nop
 80010c2:	4b11      	ldr	r3, [pc, #68]	; (8001108 <configureClock+0xbc>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d0f9      	beq.n	80010c2 <configureClock+0x76>

	//Modify System clock to PLL
	MODIFY_REG(RCC->CFGR,
 80010ce:	4b0e      	ldr	r3, [pc, #56]	; (8001108 <configureClock+0xbc>)
 80010d0:	689b      	ldr	r3, [r3, #8]
 80010d2:	f023 0303 	bic.w	r3, r3, #3
 80010d6:	4a0c      	ldr	r2, [pc, #48]	; (8001108 <configureClock+0xbc>)
 80010d8:	f043 0302 	orr.w	r3, r3, #2
 80010dc:	6093      	str	r3, [r2, #8]
			RCC_CFGR_SW,
			_VAL2FLD(RCC_CFGR_SW,RCC_CFGR_SW_PLL));


	//Wait until PLL is switched
	while(READ_BIT(RCC->CFGR,RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
 80010de:	bf00      	nop
 80010e0:	4b09      	ldr	r3, [pc, #36]	; (8001108 <configureClock+0xbc>)
 80010e2:	689b      	ldr	r3, [r3, #8]
 80010e4:	f003 030c 	and.w	r3, r3, #12
 80010e8:	2b08      	cmp	r3, #8
 80010ea:	d1f9      	bne.n	80010e0 <configureClock+0x94>

	//Disable HSI
	CLEAR_BIT(RCC->CR,RCC_CR_HSION);
 80010ec:	4b06      	ldr	r3, [pc, #24]	; (8001108 <configureClock+0xbc>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a05      	ldr	r2, [pc, #20]	; (8001108 <configureClock+0xbc>)
 80010f2:	f023 0301 	bic.w	r3, r3, #1
 80010f6:	6013      	str	r3, [r2, #0]
}
 80010f8:	bf00      	nop
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	40023c00 	.word	0x40023c00
 8001108:	40023800 	.word	0x40023800
 800110c:	f0bc8000 	.word	0xf0bc8000
 8001110:	03401204 	.word	0x03401204

08001114 <SystemInit>:

void SystemInit(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
	configureClock();
 8001118:	f7ff ff98 	bl	800104c <configureClock>
}
 800111c:	bf00      	nop
 800111e:	bd80      	pop	{r7, pc}

08001120 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001120:	480d      	ldr	r0, [pc, #52]	; (8001158 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001122:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001124:	480d      	ldr	r0, [pc, #52]	; (800115c <LoopForever+0x6>)
  ldr r1, =_edata
 8001126:	490e      	ldr	r1, [pc, #56]	; (8001160 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001128:	4a0e      	ldr	r2, [pc, #56]	; (8001164 <LoopForever+0xe>)
  movs r3, #0
 800112a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800112c:	e002      	b.n	8001134 <LoopCopyDataInit>

0800112e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800112e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001130:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001132:	3304      	adds	r3, #4

08001134 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001134:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001136:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001138:	d3f9      	bcc.n	800112e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800113a:	4a0b      	ldr	r2, [pc, #44]	; (8001168 <LoopForever+0x12>)
  ldr r4, =_ebss
 800113c:	4c0b      	ldr	r4, [pc, #44]	; (800116c <LoopForever+0x16>)
  movs r3, #0
 800113e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001140:	e001      	b.n	8001146 <LoopFillZerobss>

08001142 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001142:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001144:	3204      	adds	r2, #4

08001146 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001146:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001148:	d3fb      	bcc.n	8001142 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800114a:	f7ff ffe3 	bl	8001114 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800114e:	f000 f81b 	bl	8001188 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001152:	f7ff ff67 	bl	8001024 <main>

08001156 <LoopForever>:

LoopForever:
    b LoopForever
 8001156:	e7fe      	b.n	8001156 <LoopForever>
  ldr   r0, =_estack
 8001158:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800115c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001160:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001164:	080024a4 	.word	0x080024a4
  ldr r2, =_sbss
 8001168:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 800116c:	200000e4 	.word	0x200000e4

08001170 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001170:	e7fe      	b.n	8001170 <ADC_IRQHandler>

08001172 <ffs>:
 8001172:	2800      	cmp	r0, #0
 8001174:	fa90 f3a0 	rbit	r3, r0
 8001178:	fab3 f383 	clz	r3, r3
 800117c:	bf08      	it	eq
 800117e:	f04f 33ff 	moveq.w	r3, #4294967295
 8001182:	1c58      	adds	r0, r3, #1
 8001184:	4770      	bx	lr
	...

08001188 <__libc_init_array>:
 8001188:	b570      	push	{r4, r5, r6, lr}
 800118a:	4e0d      	ldr	r6, [pc, #52]	; (80011c0 <__libc_init_array+0x38>)
 800118c:	4c0d      	ldr	r4, [pc, #52]	; (80011c4 <__libc_init_array+0x3c>)
 800118e:	1ba4      	subs	r4, r4, r6
 8001190:	10a4      	asrs	r4, r4, #2
 8001192:	2500      	movs	r5, #0
 8001194:	42a5      	cmp	r5, r4
 8001196:	d109      	bne.n	80011ac <__libc_init_array+0x24>
 8001198:	4e0b      	ldr	r6, [pc, #44]	; (80011c8 <__libc_init_array+0x40>)
 800119a:	4c0c      	ldr	r4, [pc, #48]	; (80011cc <__libc_init_array+0x44>)
 800119c:	f000 fff2 	bl	8002184 <_init>
 80011a0:	1ba4      	subs	r4, r4, r6
 80011a2:	10a4      	asrs	r4, r4, #2
 80011a4:	2500      	movs	r5, #0
 80011a6:	42a5      	cmp	r5, r4
 80011a8:	d105      	bne.n	80011b6 <__libc_init_array+0x2e>
 80011aa:	bd70      	pop	{r4, r5, r6, pc}
 80011ac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80011b0:	4798      	blx	r3
 80011b2:	3501      	adds	r5, #1
 80011b4:	e7ee      	b.n	8001194 <__libc_init_array+0xc>
 80011b6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80011ba:	4798      	blx	r3
 80011bc:	3501      	adds	r5, #1
 80011be:	e7f2      	b.n	80011a6 <__libc_init_array+0x1e>
 80011c0:	0800249c 	.word	0x0800249c
 80011c4:	0800249c 	.word	0x0800249c
 80011c8:	0800249c 	.word	0x0800249c
 80011cc:	080024a0 	.word	0x080024a0

080011d0 <memset>:
 80011d0:	4402      	add	r2, r0
 80011d2:	4603      	mov	r3, r0
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d100      	bne.n	80011da <memset+0xa>
 80011d8:	4770      	bx	lr
 80011da:	f803 1b01 	strb.w	r1, [r3], #1
 80011de:	e7f9      	b.n	80011d4 <memset+0x4>

080011e0 <__sfputc_r>:
 80011e0:	6893      	ldr	r3, [r2, #8]
 80011e2:	3b01      	subs	r3, #1
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	b410      	push	{r4}
 80011e8:	6093      	str	r3, [r2, #8]
 80011ea:	da08      	bge.n	80011fe <__sfputc_r+0x1e>
 80011ec:	6994      	ldr	r4, [r2, #24]
 80011ee:	42a3      	cmp	r3, r4
 80011f0:	db01      	blt.n	80011f6 <__sfputc_r+0x16>
 80011f2:	290a      	cmp	r1, #10
 80011f4:	d103      	bne.n	80011fe <__sfputc_r+0x1e>
 80011f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80011fa:	f000 bb53 	b.w	80018a4 <__swbuf_r>
 80011fe:	6813      	ldr	r3, [r2, #0]
 8001200:	1c58      	adds	r0, r3, #1
 8001202:	6010      	str	r0, [r2, #0]
 8001204:	7019      	strb	r1, [r3, #0]
 8001206:	4608      	mov	r0, r1
 8001208:	f85d 4b04 	ldr.w	r4, [sp], #4
 800120c:	4770      	bx	lr

0800120e <__sfputs_r>:
 800120e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001210:	4606      	mov	r6, r0
 8001212:	460f      	mov	r7, r1
 8001214:	4614      	mov	r4, r2
 8001216:	18d5      	adds	r5, r2, r3
 8001218:	42ac      	cmp	r4, r5
 800121a:	d101      	bne.n	8001220 <__sfputs_r+0x12>
 800121c:	2000      	movs	r0, #0
 800121e:	e007      	b.n	8001230 <__sfputs_r+0x22>
 8001220:	463a      	mov	r2, r7
 8001222:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001226:	4630      	mov	r0, r6
 8001228:	f7ff ffda 	bl	80011e0 <__sfputc_r>
 800122c:	1c43      	adds	r3, r0, #1
 800122e:	d1f3      	bne.n	8001218 <__sfputs_r+0xa>
 8001230:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001234 <_vfiprintf_r>:
 8001234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001238:	460c      	mov	r4, r1
 800123a:	b09d      	sub	sp, #116	; 0x74
 800123c:	4617      	mov	r7, r2
 800123e:	461d      	mov	r5, r3
 8001240:	4606      	mov	r6, r0
 8001242:	b118      	cbz	r0, 800124c <_vfiprintf_r+0x18>
 8001244:	6983      	ldr	r3, [r0, #24]
 8001246:	b90b      	cbnz	r3, 800124c <_vfiprintf_r+0x18>
 8001248:	f000 fcdc 	bl	8001c04 <__sinit>
 800124c:	4b7c      	ldr	r3, [pc, #496]	; (8001440 <_vfiprintf_r+0x20c>)
 800124e:	429c      	cmp	r4, r3
 8001250:	d158      	bne.n	8001304 <_vfiprintf_r+0xd0>
 8001252:	6874      	ldr	r4, [r6, #4]
 8001254:	89a3      	ldrh	r3, [r4, #12]
 8001256:	0718      	lsls	r0, r3, #28
 8001258:	d55e      	bpl.n	8001318 <_vfiprintf_r+0xe4>
 800125a:	6923      	ldr	r3, [r4, #16]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d05b      	beq.n	8001318 <_vfiprintf_r+0xe4>
 8001260:	2300      	movs	r3, #0
 8001262:	9309      	str	r3, [sp, #36]	; 0x24
 8001264:	2320      	movs	r3, #32
 8001266:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800126a:	2330      	movs	r3, #48	; 0x30
 800126c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001270:	9503      	str	r5, [sp, #12]
 8001272:	f04f 0b01 	mov.w	fp, #1
 8001276:	46b8      	mov	r8, r7
 8001278:	4645      	mov	r5, r8
 800127a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800127e:	b10b      	cbz	r3, 8001284 <_vfiprintf_r+0x50>
 8001280:	2b25      	cmp	r3, #37	; 0x25
 8001282:	d154      	bne.n	800132e <_vfiprintf_r+0xfa>
 8001284:	ebb8 0a07 	subs.w	sl, r8, r7
 8001288:	d00b      	beq.n	80012a2 <_vfiprintf_r+0x6e>
 800128a:	4653      	mov	r3, sl
 800128c:	463a      	mov	r2, r7
 800128e:	4621      	mov	r1, r4
 8001290:	4630      	mov	r0, r6
 8001292:	f7ff ffbc 	bl	800120e <__sfputs_r>
 8001296:	3001      	adds	r0, #1
 8001298:	f000 80c2 	beq.w	8001420 <_vfiprintf_r+0x1ec>
 800129c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800129e:	4453      	add	r3, sl
 80012a0:	9309      	str	r3, [sp, #36]	; 0x24
 80012a2:	f898 3000 	ldrb.w	r3, [r8]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	f000 80ba 	beq.w	8001420 <_vfiprintf_r+0x1ec>
 80012ac:	2300      	movs	r3, #0
 80012ae:	f04f 32ff 	mov.w	r2, #4294967295
 80012b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80012b6:	9304      	str	r3, [sp, #16]
 80012b8:	9307      	str	r3, [sp, #28]
 80012ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80012be:	931a      	str	r3, [sp, #104]	; 0x68
 80012c0:	46a8      	mov	r8, r5
 80012c2:	2205      	movs	r2, #5
 80012c4:	f818 1b01 	ldrb.w	r1, [r8], #1
 80012c8:	485e      	ldr	r0, [pc, #376]	; (8001444 <_vfiprintf_r+0x210>)
 80012ca:	f7fe ff91 	bl	80001f0 <memchr>
 80012ce:	9b04      	ldr	r3, [sp, #16]
 80012d0:	bb78      	cbnz	r0, 8001332 <_vfiprintf_r+0xfe>
 80012d2:	06d9      	lsls	r1, r3, #27
 80012d4:	bf44      	itt	mi
 80012d6:	2220      	movmi	r2, #32
 80012d8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80012dc:	071a      	lsls	r2, r3, #28
 80012de:	bf44      	itt	mi
 80012e0:	222b      	movmi	r2, #43	; 0x2b
 80012e2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80012e6:	782a      	ldrb	r2, [r5, #0]
 80012e8:	2a2a      	cmp	r2, #42	; 0x2a
 80012ea:	d02a      	beq.n	8001342 <_vfiprintf_r+0x10e>
 80012ec:	9a07      	ldr	r2, [sp, #28]
 80012ee:	46a8      	mov	r8, r5
 80012f0:	2000      	movs	r0, #0
 80012f2:	250a      	movs	r5, #10
 80012f4:	4641      	mov	r1, r8
 80012f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80012fa:	3b30      	subs	r3, #48	; 0x30
 80012fc:	2b09      	cmp	r3, #9
 80012fe:	d969      	bls.n	80013d4 <_vfiprintf_r+0x1a0>
 8001300:	b360      	cbz	r0, 800135c <_vfiprintf_r+0x128>
 8001302:	e024      	b.n	800134e <_vfiprintf_r+0x11a>
 8001304:	4b50      	ldr	r3, [pc, #320]	; (8001448 <_vfiprintf_r+0x214>)
 8001306:	429c      	cmp	r4, r3
 8001308:	d101      	bne.n	800130e <_vfiprintf_r+0xda>
 800130a:	68b4      	ldr	r4, [r6, #8]
 800130c:	e7a2      	b.n	8001254 <_vfiprintf_r+0x20>
 800130e:	4b4f      	ldr	r3, [pc, #316]	; (800144c <_vfiprintf_r+0x218>)
 8001310:	429c      	cmp	r4, r3
 8001312:	bf08      	it	eq
 8001314:	68f4      	ldreq	r4, [r6, #12]
 8001316:	e79d      	b.n	8001254 <_vfiprintf_r+0x20>
 8001318:	4621      	mov	r1, r4
 800131a:	4630      	mov	r0, r6
 800131c:	f000 fb14 	bl	8001948 <__swsetup_r>
 8001320:	2800      	cmp	r0, #0
 8001322:	d09d      	beq.n	8001260 <_vfiprintf_r+0x2c>
 8001324:	f04f 30ff 	mov.w	r0, #4294967295
 8001328:	b01d      	add	sp, #116	; 0x74
 800132a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800132e:	46a8      	mov	r8, r5
 8001330:	e7a2      	b.n	8001278 <_vfiprintf_r+0x44>
 8001332:	4a44      	ldr	r2, [pc, #272]	; (8001444 <_vfiprintf_r+0x210>)
 8001334:	1a80      	subs	r0, r0, r2
 8001336:	fa0b f000 	lsl.w	r0, fp, r0
 800133a:	4318      	orrs	r0, r3
 800133c:	9004      	str	r0, [sp, #16]
 800133e:	4645      	mov	r5, r8
 8001340:	e7be      	b.n	80012c0 <_vfiprintf_r+0x8c>
 8001342:	9a03      	ldr	r2, [sp, #12]
 8001344:	1d11      	adds	r1, r2, #4
 8001346:	6812      	ldr	r2, [r2, #0]
 8001348:	9103      	str	r1, [sp, #12]
 800134a:	2a00      	cmp	r2, #0
 800134c:	db01      	blt.n	8001352 <_vfiprintf_r+0x11e>
 800134e:	9207      	str	r2, [sp, #28]
 8001350:	e004      	b.n	800135c <_vfiprintf_r+0x128>
 8001352:	4252      	negs	r2, r2
 8001354:	f043 0302 	orr.w	r3, r3, #2
 8001358:	9207      	str	r2, [sp, #28]
 800135a:	9304      	str	r3, [sp, #16]
 800135c:	f898 3000 	ldrb.w	r3, [r8]
 8001360:	2b2e      	cmp	r3, #46	; 0x2e
 8001362:	d10e      	bne.n	8001382 <_vfiprintf_r+0x14e>
 8001364:	f898 3001 	ldrb.w	r3, [r8, #1]
 8001368:	2b2a      	cmp	r3, #42	; 0x2a
 800136a:	d138      	bne.n	80013de <_vfiprintf_r+0x1aa>
 800136c:	9b03      	ldr	r3, [sp, #12]
 800136e:	1d1a      	adds	r2, r3, #4
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	9203      	str	r2, [sp, #12]
 8001374:	2b00      	cmp	r3, #0
 8001376:	bfb8      	it	lt
 8001378:	f04f 33ff 	movlt.w	r3, #4294967295
 800137c:	f108 0802 	add.w	r8, r8, #2
 8001380:	9305      	str	r3, [sp, #20]
 8001382:	4d33      	ldr	r5, [pc, #204]	; (8001450 <_vfiprintf_r+0x21c>)
 8001384:	f898 1000 	ldrb.w	r1, [r8]
 8001388:	2203      	movs	r2, #3
 800138a:	4628      	mov	r0, r5
 800138c:	f7fe ff30 	bl	80001f0 <memchr>
 8001390:	b140      	cbz	r0, 80013a4 <_vfiprintf_r+0x170>
 8001392:	2340      	movs	r3, #64	; 0x40
 8001394:	1b40      	subs	r0, r0, r5
 8001396:	fa03 f000 	lsl.w	r0, r3, r0
 800139a:	9b04      	ldr	r3, [sp, #16]
 800139c:	4303      	orrs	r3, r0
 800139e:	f108 0801 	add.w	r8, r8, #1
 80013a2:	9304      	str	r3, [sp, #16]
 80013a4:	f898 1000 	ldrb.w	r1, [r8]
 80013a8:	482a      	ldr	r0, [pc, #168]	; (8001454 <_vfiprintf_r+0x220>)
 80013aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80013ae:	2206      	movs	r2, #6
 80013b0:	f108 0701 	add.w	r7, r8, #1
 80013b4:	f7fe ff1c 	bl	80001f0 <memchr>
 80013b8:	2800      	cmp	r0, #0
 80013ba:	d037      	beq.n	800142c <_vfiprintf_r+0x1f8>
 80013bc:	4b26      	ldr	r3, [pc, #152]	; (8001458 <_vfiprintf_r+0x224>)
 80013be:	bb1b      	cbnz	r3, 8001408 <_vfiprintf_r+0x1d4>
 80013c0:	9b03      	ldr	r3, [sp, #12]
 80013c2:	3307      	adds	r3, #7
 80013c4:	f023 0307 	bic.w	r3, r3, #7
 80013c8:	3308      	adds	r3, #8
 80013ca:	9303      	str	r3, [sp, #12]
 80013cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80013ce:	444b      	add	r3, r9
 80013d0:	9309      	str	r3, [sp, #36]	; 0x24
 80013d2:	e750      	b.n	8001276 <_vfiprintf_r+0x42>
 80013d4:	fb05 3202 	mla	r2, r5, r2, r3
 80013d8:	2001      	movs	r0, #1
 80013da:	4688      	mov	r8, r1
 80013dc:	e78a      	b.n	80012f4 <_vfiprintf_r+0xc0>
 80013de:	2300      	movs	r3, #0
 80013e0:	f108 0801 	add.w	r8, r8, #1
 80013e4:	9305      	str	r3, [sp, #20]
 80013e6:	4619      	mov	r1, r3
 80013e8:	250a      	movs	r5, #10
 80013ea:	4640      	mov	r0, r8
 80013ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80013f0:	3a30      	subs	r2, #48	; 0x30
 80013f2:	2a09      	cmp	r2, #9
 80013f4:	d903      	bls.n	80013fe <_vfiprintf_r+0x1ca>
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d0c3      	beq.n	8001382 <_vfiprintf_r+0x14e>
 80013fa:	9105      	str	r1, [sp, #20]
 80013fc:	e7c1      	b.n	8001382 <_vfiprintf_r+0x14e>
 80013fe:	fb05 2101 	mla	r1, r5, r1, r2
 8001402:	2301      	movs	r3, #1
 8001404:	4680      	mov	r8, r0
 8001406:	e7f0      	b.n	80013ea <_vfiprintf_r+0x1b6>
 8001408:	ab03      	add	r3, sp, #12
 800140a:	9300      	str	r3, [sp, #0]
 800140c:	4622      	mov	r2, r4
 800140e:	4b13      	ldr	r3, [pc, #76]	; (800145c <_vfiprintf_r+0x228>)
 8001410:	a904      	add	r1, sp, #16
 8001412:	4630      	mov	r0, r6
 8001414:	f3af 8000 	nop.w
 8001418:	f1b0 3fff 	cmp.w	r0, #4294967295
 800141c:	4681      	mov	r9, r0
 800141e:	d1d5      	bne.n	80013cc <_vfiprintf_r+0x198>
 8001420:	89a3      	ldrh	r3, [r4, #12]
 8001422:	065b      	lsls	r3, r3, #25
 8001424:	f53f af7e 	bmi.w	8001324 <_vfiprintf_r+0xf0>
 8001428:	9809      	ldr	r0, [sp, #36]	; 0x24
 800142a:	e77d      	b.n	8001328 <_vfiprintf_r+0xf4>
 800142c:	ab03      	add	r3, sp, #12
 800142e:	9300      	str	r3, [sp, #0]
 8001430:	4622      	mov	r2, r4
 8001432:	4b0a      	ldr	r3, [pc, #40]	; (800145c <_vfiprintf_r+0x228>)
 8001434:	a904      	add	r1, sp, #16
 8001436:	4630      	mov	r0, r6
 8001438:	f000 f892 	bl	8001560 <_printf_i>
 800143c:	e7ec      	b.n	8001418 <_vfiprintf_r+0x1e4>
 800143e:	bf00      	nop
 8001440:	0800245c 	.word	0x0800245c
 8001444:	08002408 	.word	0x08002408
 8001448:	0800247c 	.word	0x0800247c
 800144c:	0800243c 	.word	0x0800243c
 8001450:	0800240e 	.word	0x0800240e
 8001454:	08002412 	.word	0x08002412
 8001458:	00000000 	.word	0x00000000
 800145c:	0800120f 	.word	0x0800120f

08001460 <vfiprintf>:
 8001460:	4613      	mov	r3, r2
 8001462:	460a      	mov	r2, r1
 8001464:	4601      	mov	r1, r0
 8001466:	4802      	ldr	r0, [pc, #8]	; (8001470 <vfiprintf+0x10>)
 8001468:	6800      	ldr	r0, [r0, #0]
 800146a:	f7ff bee3 	b.w	8001234 <_vfiprintf_r>
 800146e:	bf00      	nop
 8001470:	2000001c 	.word	0x2000001c

08001474 <_printf_common>:
 8001474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001478:	4691      	mov	r9, r2
 800147a:	461f      	mov	r7, r3
 800147c:	688a      	ldr	r2, [r1, #8]
 800147e:	690b      	ldr	r3, [r1, #16]
 8001480:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001484:	4293      	cmp	r3, r2
 8001486:	bfb8      	it	lt
 8001488:	4613      	movlt	r3, r2
 800148a:	f8c9 3000 	str.w	r3, [r9]
 800148e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001492:	4606      	mov	r6, r0
 8001494:	460c      	mov	r4, r1
 8001496:	b112      	cbz	r2, 800149e <_printf_common+0x2a>
 8001498:	3301      	adds	r3, #1
 800149a:	f8c9 3000 	str.w	r3, [r9]
 800149e:	6823      	ldr	r3, [r4, #0]
 80014a0:	0699      	lsls	r1, r3, #26
 80014a2:	bf42      	ittt	mi
 80014a4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80014a8:	3302      	addmi	r3, #2
 80014aa:	f8c9 3000 	strmi.w	r3, [r9]
 80014ae:	6825      	ldr	r5, [r4, #0]
 80014b0:	f015 0506 	ands.w	r5, r5, #6
 80014b4:	d107      	bne.n	80014c6 <_printf_common+0x52>
 80014b6:	f104 0a19 	add.w	sl, r4, #25
 80014ba:	68e3      	ldr	r3, [r4, #12]
 80014bc:	f8d9 2000 	ldr.w	r2, [r9]
 80014c0:	1a9b      	subs	r3, r3, r2
 80014c2:	42ab      	cmp	r3, r5
 80014c4:	dc28      	bgt.n	8001518 <_printf_common+0xa4>
 80014c6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80014ca:	6822      	ldr	r2, [r4, #0]
 80014cc:	3300      	adds	r3, #0
 80014ce:	bf18      	it	ne
 80014d0:	2301      	movne	r3, #1
 80014d2:	0692      	lsls	r2, r2, #26
 80014d4:	d42d      	bmi.n	8001532 <_printf_common+0xbe>
 80014d6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80014da:	4639      	mov	r1, r7
 80014dc:	4630      	mov	r0, r6
 80014de:	47c0      	blx	r8
 80014e0:	3001      	adds	r0, #1
 80014e2:	d020      	beq.n	8001526 <_printf_common+0xb2>
 80014e4:	6823      	ldr	r3, [r4, #0]
 80014e6:	68e5      	ldr	r5, [r4, #12]
 80014e8:	f8d9 2000 	ldr.w	r2, [r9]
 80014ec:	f003 0306 	and.w	r3, r3, #6
 80014f0:	2b04      	cmp	r3, #4
 80014f2:	bf08      	it	eq
 80014f4:	1aad      	subeq	r5, r5, r2
 80014f6:	68a3      	ldr	r3, [r4, #8]
 80014f8:	6922      	ldr	r2, [r4, #16]
 80014fa:	bf0c      	ite	eq
 80014fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001500:	2500      	movne	r5, #0
 8001502:	4293      	cmp	r3, r2
 8001504:	bfc4      	itt	gt
 8001506:	1a9b      	subgt	r3, r3, r2
 8001508:	18ed      	addgt	r5, r5, r3
 800150a:	f04f 0900 	mov.w	r9, #0
 800150e:	341a      	adds	r4, #26
 8001510:	454d      	cmp	r5, r9
 8001512:	d11a      	bne.n	800154a <_printf_common+0xd6>
 8001514:	2000      	movs	r0, #0
 8001516:	e008      	b.n	800152a <_printf_common+0xb6>
 8001518:	2301      	movs	r3, #1
 800151a:	4652      	mov	r2, sl
 800151c:	4639      	mov	r1, r7
 800151e:	4630      	mov	r0, r6
 8001520:	47c0      	blx	r8
 8001522:	3001      	adds	r0, #1
 8001524:	d103      	bne.n	800152e <_printf_common+0xba>
 8001526:	f04f 30ff 	mov.w	r0, #4294967295
 800152a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800152e:	3501      	adds	r5, #1
 8001530:	e7c3      	b.n	80014ba <_printf_common+0x46>
 8001532:	18e1      	adds	r1, r4, r3
 8001534:	1c5a      	adds	r2, r3, #1
 8001536:	2030      	movs	r0, #48	; 0x30
 8001538:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800153c:	4422      	add	r2, r4
 800153e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001542:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001546:	3302      	adds	r3, #2
 8001548:	e7c5      	b.n	80014d6 <_printf_common+0x62>
 800154a:	2301      	movs	r3, #1
 800154c:	4622      	mov	r2, r4
 800154e:	4639      	mov	r1, r7
 8001550:	4630      	mov	r0, r6
 8001552:	47c0      	blx	r8
 8001554:	3001      	adds	r0, #1
 8001556:	d0e6      	beq.n	8001526 <_printf_common+0xb2>
 8001558:	f109 0901 	add.w	r9, r9, #1
 800155c:	e7d8      	b.n	8001510 <_printf_common+0x9c>
	...

08001560 <_printf_i>:
 8001560:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001564:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8001568:	460c      	mov	r4, r1
 800156a:	7e09      	ldrb	r1, [r1, #24]
 800156c:	b085      	sub	sp, #20
 800156e:	296e      	cmp	r1, #110	; 0x6e
 8001570:	4617      	mov	r7, r2
 8001572:	4606      	mov	r6, r0
 8001574:	4698      	mov	r8, r3
 8001576:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001578:	f000 80b3 	beq.w	80016e2 <_printf_i+0x182>
 800157c:	d822      	bhi.n	80015c4 <_printf_i+0x64>
 800157e:	2963      	cmp	r1, #99	; 0x63
 8001580:	d036      	beq.n	80015f0 <_printf_i+0x90>
 8001582:	d80a      	bhi.n	800159a <_printf_i+0x3a>
 8001584:	2900      	cmp	r1, #0
 8001586:	f000 80b9 	beq.w	80016fc <_printf_i+0x19c>
 800158a:	2958      	cmp	r1, #88	; 0x58
 800158c:	f000 8083 	beq.w	8001696 <_printf_i+0x136>
 8001590:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001594:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8001598:	e032      	b.n	8001600 <_printf_i+0xa0>
 800159a:	2964      	cmp	r1, #100	; 0x64
 800159c:	d001      	beq.n	80015a2 <_printf_i+0x42>
 800159e:	2969      	cmp	r1, #105	; 0x69
 80015a0:	d1f6      	bne.n	8001590 <_printf_i+0x30>
 80015a2:	6820      	ldr	r0, [r4, #0]
 80015a4:	6813      	ldr	r3, [r2, #0]
 80015a6:	0605      	lsls	r5, r0, #24
 80015a8:	f103 0104 	add.w	r1, r3, #4
 80015ac:	d52a      	bpl.n	8001604 <_printf_i+0xa4>
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	6011      	str	r1, [r2, #0]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	da03      	bge.n	80015be <_printf_i+0x5e>
 80015b6:	222d      	movs	r2, #45	; 0x2d
 80015b8:	425b      	negs	r3, r3
 80015ba:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80015be:	486f      	ldr	r0, [pc, #444]	; (800177c <_printf_i+0x21c>)
 80015c0:	220a      	movs	r2, #10
 80015c2:	e039      	b.n	8001638 <_printf_i+0xd8>
 80015c4:	2973      	cmp	r1, #115	; 0x73
 80015c6:	f000 809d 	beq.w	8001704 <_printf_i+0x1a4>
 80015ca:	d808      	bhi.n	80015de <_printf_i+0x7e>
 80015cc:	296f      	cmp	r1, #111	; 0x6f
 80015ce:	d020      	beq.n	8001612 <_printf_i+0xb2>
 80015d0:	2970      	cmp	r1, #112	; 0x70
 80015d2:	d1dd      	bne.n	8001590 <_printf_i+0x30>
 80015d4:	6823      	ldr	r3, [r4, #0]
 80015d6:	f043 0320 	orr.w	r3, r3, #32
 80015da:	6023      	str	r3, [r4, #0]
 80015dc:	e003      	b.n	80015e6 <_printf_i+0x86>
 80015de:	2975      	cmp	r1, #117	; 0x75
 80015e0:	d017      	beq.n	8001612 <_printf_i+0xb2>
 80015e2:	2978      	cmp	r1, #120	; 0x78
 80015e4:	d1d4      	bne.n	8001590 <_printf_i+0x30>
 80015e6:	2378      	movs	r3, #120	; 0x78
 80015e8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80015ec:	4864      	ldr	r0, [pc, #400]	; (8001780 <_printf_i+0x220>)
 80015ee:	e055      	b.n	800169c <_printf_i+0x13c>
 80015f0:	6813      	ldr	r3, [r2, #0]
 80015f2:	1d19      	adds	r1, r3, #4
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	6011      	str	r1, [r2, #0]
 80015f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80015fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001600:	2301      	movs	r3, #1
 8001602:	e08c      	b.n	800171e <_printf_i+0x1be>
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	6011      	str	r1, [r2, #0]
 8001608:	f010 0f40 	tst.w	r0, #64	; 0x40
 800160c:	bf18      	it	ne
 800160e:	b21b      	sxthne	r3, r3
 8001610:	e7cf      	b.n	80015b2 <_printf_i+0x52>
 8001612:	6813      	ldr	r3, [r2, #0]
 8001614:	6825      	ldr	r5, [r4, #0]
 8001616:	1d18      	adds	r0, r3, #4
 8001618:	6010      	str	r0, [r2, #0]
 800161a:	0628      	lsls	r0, r5, #24
 800161c:	d501      	bpl.n	8001622 <_printf_i+0xc2>
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	e002      	b.n	8001628 <_printf_i+0xc8>
 8001622:	0668      	lsls	r0, r5, #25
 8001624:	d5fb      	bpl.n	800161e <_printf_i+0xbe>
 8001626:	881b      	ldrh	r3, [r3, #0]
 8001628:	4854      	ldr	r0, [pc, #336]	; (800177c <_printf_i+0x21c>)
 800162a:	296f      	cmp	r1, #111	; 0x6f
 800162c:	bf14      	ite	ne
 800162e:	220a      	movne	r2, #10
 8001630:	2208      	moveq	r2, #8
 8001632:	2100      	movs	r1, #0
 8001634:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001638:	6865      	ldr	r5, [r4, #4]
 800163a:	60a5      	str	r5, [r4, #8]
 800163c:	2d00      	cmp	r5, #0
 800163e:	f2c0 8095 	blt.w	800176c <_printf_i+0x20c>
 8001642:	6821      	ldr	r1, [r4, #0]
 8001644:	f021 0104 	bic.w	r1, r1, #4
 8001648:	6021      	str	r1, [r4, #0]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d13d      	bne.n	80016ca <_printf_i+0x16a>
 800164e:	2d00      	cmp	r5, #0
 8001650:	f040 808e 	bne.w	8001770 <_printf_i+0x210>
 8001654:	4665      	mov	r5, ip
 8001656:	2a08      	cmp	r2, #8
 8001658:	d10b      	bne.n	8001672 <_printf_i+0x112>
 800165a:	6823      	ldr	r3, [r4, #0]
 800165c:	07db      	lsls	r3, r3, #31
 800165e:	d508      	bpl.n	8001672 <_printf_i+0x112>
 8001660:	6923      	ldr	r3, [r4, #16]
 8001662:	6862      	ldr	r2, [r4, #4]
 8001664:	429a      	cmp	r2, r3
 8001666:	bfde      	ittt	le
 8001668:	2330      	movle	r3, #48	; 0x30
 800166a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800166e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001672:	ebac 0305 	sub.w	r3, ip, r5
 8001676:	6123      	str	r3, [r4, #16]
 8001678:	f8cd 8000 	str.w	r8, [sp]
 800167c:	463b      	mov	r3, r7
 800167e:	aa03      	add	r2, sp, #12
 8001680:	4621      	mov	r1, r4
 8001682:	4630      	mov	r0, r6
 8001684:	f7ff fef6 	bl	8001474 <_printf_common>
 8001688:	3001      	adds	r0, #1
 800168a:	d14d      	bne.n	8001728 <_printf_i+0x1c8>
 800168c:	f04f 30ff 	mov.w	r0, #4294967295
 8001690:	b005      	add	sp, #20
 8001692:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001696:	4839      	ldr	r0, [pc, #228]	; (800177c <_printf_i+0x21c>)
 8001698:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800169c:	6813      	ldr	r3, [r2, #0]
 800169e:	6821      	ldr	r1, [r4, #0]
 80016a0:	1d1d      	adds	r5, r3, #4
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	6015      	str	r5, [r2, #0]
 80016a6:	060a      	lsls	r2, r1, #24
 80016a8:	d50b      	bpl.n	80016c2 <_printf_i+0x162>
 80016aa:	07ca      	lsls	r2, r1, #31
 80016ac:	bf44      	itt	mi
 80016ae:	f041 0120 	orrmi.w	r1, r1, #32
 80016b2:	6021      	strmi	r1, [r4, #0]
 80016b4:	b91b      	cbnz	r3, 80016be <_printf_i+0x15e>
 80016b6:	6822      	ldr	r2, [r4, #0]
 80016b8:	f022 0220 	bic.w	r2, r2, #32
 80016bc:	6022      	str	r2, [r4, #0]
 80016be:	2210      	movs	r2, #16
 80016c0:	e7b7      	b.n	8001632 <_printf_i+0xd2>
 80016c2:	064d      	lsls	r5, r1, #25
 80016c4:	bf48      	it	mi
 80016c6:	b29b      	uxthmi	r3, r3
 80016c8:	e7ef      	b.n	80016aa <_printf_i+0x14a>
 80016ca:	4665      	mov	r5, ip
 80016cc:	fbb3 f1f2 	udiv	r1, r3, r2
 80016d0:	fb02 3311 	mls	r3, r2, r1, r3
 80016d4:	5cc3      	ldrb	r3, [r0, r3]
 80016d6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80016da:	460b      	mov	r3, r1
 80016dc:	2900      	cmp	r1, #0
 80016de:	d1f5      	bne.n	80016cc <_printf_i+0x16c>
 80016e0:	e7b9      	b.n	8001656 <_printf_i+0xf6>
 80016e2:	6813      	ldr	r3, [r2, #0]
 80016e4:	6825      	ldr	r5, [r4, #0]
 80016e6:	6961      	ldr	r1, [r4, #20]
 80016e8:	1d18      	adds	r0, r3, #4
 80016ea:	6010      	str	r0, [r2, #0]
 80016ec:	0628      	lsls	r0, r5, #24
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	d501      	bpl.n	80016f6 <_printf_i+0x196>
 80016f2:	6019      	str	r1, [r3, #0]
 80016f4:	e002      	b.n	80016fc <_printf_i+0x19c>
 80016f6:	066a      	lsls	r2, r5, #25
 80016f8:	d5fb      	bpl.n	80016f2 <_printf_i+0x192>
 80016fa:	8019      	strh	r1, [r3, #0]
 80016fc:	2300      	movs	r3, #0
 80016fe:	6123      	str	r3, [r4, #16]
 8001700:	4665      	mov	r5, ip
 8001702:	e7b9      	b.n	8001678 <_printf_i+0x118>
 8001704:	6813      	ldr	r3, [r2, #0]
 8001706:	1d19      	adds	r1, r3, #4
 8001708:	6011      	str	r1, [r2, #0]
 800170a:	681d      	ldr	r5, [r3, #0]
 800170c:	6862      	ldr	r2, [r4, #4]
 800170e:	2100      	movs	r1, #0
 8001710:	4628      	mov	r0, r5
 8001712:	f7fe fd6d 	bl	80001f0 <memchr>
 8001716:	b108      	cbz	r0, 800171c <_printf_i+0x1bc>
 8001718:	1b40      	subs	r0, r0, r5
 800171a:	6060      	str	r0, [r4, #4]
 800171c:	6863      	ldr	r3, [r4, #4]
 800171e:	6123      	str	r3, [r4, #16]
 8001720:	2300      	movs	r3, #0
 8001722:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001726:	e7a7      	b.n	8001678 <_printf_i+0x118>
 8001728:	6923      	ldr	r3, [r4, #16]
 800172a:	462a      	mov	r2, r5
 800172c:	4639      	mov	r1, r7
 800172e:	4630      	mov	r0, r6
 8001730:	47c0      	blx	r8
 8001732:	3001      	adds	r0, #1
 8001734:	d0aa      	beq.n	800168c <_printf_i+0x12c>
 8001736:	6823      	ldr	r3, [r4, #0]
 8001738:	079b      	lsls	r3, r3, #30
 800173a:	d413      	bmi.n	8001764 <_printf_i+0x204>
 800173c:	68e0      	ldr	r0, [r4, #12]
 800173e:	9b03      	ldr	r3, [sp, #12]
 8001740:	4298      	cmp	r0, r3
 8001742:	bfb8      	it	lt
 8001744:	4618      	movlt	r0, r3
 8001746:	e7a3      	b.n	8001690 <_printf_i+0x130>
 8001748:	2301      	movs	r3, #1
 800174a:	464a      	mov	r2, r9
 800174c:	4639      	mov	r1, r7
 800174e:	4630      	mov	r0, r6
 8001750:	47c0      	blx	r8
 8001752:	3001      	adds	r0, #1
 8001754:	d09a      	beq.n	800168c <_printf_i+0x12c>
 8001756:	3501      	adds	r5, #1
 8001758:	68e3      	ldr	r3, [r4, #12]
 800175a:	9a03      	ldr	r2, [sp, #12]
 800175c:	1a9b      	subs	r3, r3, r2
 800175e:	42ab      	cmp	r3, r5
 8001760:	dcf2      	bgt.n	8001748 <_printf_i+0x1e8>
 8001762:	e7eb      	b.n	800173c <_printf_i+0x1dc>
 8001764:	2500      	movs	r5, #0
 8001766:	f104 0919 	add.w	r9, r4, #25
 800176a:	e7f5      	b.n	8001758 <_printf_i+0x1f8>
 800176c:	2b00      	cmp	r3, #0
 800176e:	d1ac      	bne.n	80016ca <_printf_i+0x16a>
 8001770:	7803      	ldrb	r3, [r0, #0]
 8001772:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001776:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800177a:	e76c      	b.n	8001656 <_printf_i+0xf6>
 800177c:	08002419 	.word	0x08002419
 8001780:	0800242a 	.word	0x0800242a

08001784 <iprintf>:
 8001784:	b40f      	push	{r0, r1, r2, r3}
 8001786:	4b0a      	ldr	r3, [pc, #40]	; (80017b0 <iprintf+0x2c>)
 8001788:	b513      	push	{r0, r1, r4, lr}
 800178a:	681c      	ldr	r4, [r3, #0]
 800178c:	b124      	cbz	r4, 8001798 <iprintf+0x14>
 800178e:	69a3      	ldr	r3, [r4, #24]
 8001790:	b913      	cbnz	r3, 8001798 <iprintf+0x14>
 8001792:	4620      	mov	r0, r4
 8001794:	f000 fa36 	bl	8001c04 <__sinit>
 8001798:	ab05      	add	r3, sp, #20
 800179a:	9a04      	ldr	r2, [sp, #16]
 800179c:	68a1      	ldr	r1, [r4, #8]
 800179e:	9301      	str	r3, [sp, #4]
 80017a0:	4620      	mov	r0, r4
 80017a2:	f7ff fd47 	bl	8001234 <_vfiprintf_r>
 80017a6:	b002      	add	sp, #8
 80017a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80017ac:	b004      	add	sp, #16
 80017ae:	4770      	bx	lr
 80017b0:	2000001c 	.word	0x2000001c

080017b4 <putchar>:
 80017b4:	b538      	push	{r3, r4, r5, lr}
 80017b6:	4b08      	ldr	r3, [pc, #32]	; (80017d8 <putchar+0x24>)
 80017b8:	681c      	ldr	r4, [r3, #0]
 80017ba:	4605      	mov	r5, r0
 80017bc:	b124      	cbz	r4, 80017c8 <putchar+0x14>
 80017be:	69a3      	ldr	r3, [r4, #24]
 80017c0:	b913      	cbnz	r3, 80017c8 <putchar+0x14>
 80017c2:	4620      	mov	r0, r4
 80017c4:	f000 fa1e 	bl	8001c04 <__sinit>
 80017c8:	68a2      	ldr	r2, [r4, #8]
 80017ca:	4629      	mov	r1, r5
 80017cc:	4620      	mov	r0, r4
 80017ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80017d2:	f000 bbad 	b.w	8001f30 <_putc_r>
 80017d6:	bf00      	nop
 80017d8:	2000001c 	.word	0x2000001c

080017dc <_puts_r>:
 80017dc:	b570      	push	{r4, r5, r6, lr}
 80017de:	460e      	mov	r6, r1
 80017e0:	4605      	mov	r5, r0
 80017e2:	b118      	cbz	r0, 80017ec <_puts_r+0x10>
 80017e4:	6983      	ldr	r3, [r0, #24]
 80017e6:	b90b      	cbnz	r3, 80017ec <_puts_r+0x10>
 80017e8:	f000 fa0c 	bl	8001c04 <__sinit>
 80017ec:	69ab      	ldr	r3, [r5, #24]
 80017ee:	68ac      	ldr	r4, [r5, #8]
 80017f0:	b913      	cbnz	r3, 80017f8 <_puts_r+0x1c>
 80017f2:	4628      	mov	r0, r5
 80017f4:	f000 fa06 	bl	8001c04 <__sinit>
 80017f8:	4b23      	ldr	r3, [pc, #140]	; (8001888 <_puts_r+0xac>)
 80017fa:	429c      	cmp	r4, r3
 80017fc:	d117      	bne.n	800182e <_puts_r+0x52>
 80017fe:	686c      	ldr	r4, [r5, #4]
 8001800:	89a3      	ldrh	r3, [r4, #12]
 8001802:	071b      	lsls	r3, r3, #28
 8001804:	d51d      	bpl.n	8001842 <_puts_r+0x66>
 8001806:	6923      	ldr	r3, [r4, #16]
 8001808:	b1db      	cbz	r3, 8001842 <_puts_r+0x66>
 800180a:	3e01      	subs	r6, #1
 800180c:	68a3      	ldr	r3, [r4, #8]
 800180e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001812:	3b01      	subs	r3, #1
 8001814:	60a3      	str	r3, [r4, #8]
 8001816:	b9e9      	cbnz	r1, 8001854 <_puts_r+0x78>
 8001818:	2b00      	cmp	r3, #0
 800181a:	da2e      	bge.n	800187a <_puts_r+0x9e>
 800181c:	4622      	mov	r2, r4
 800181e:	210a      	movs	r1, #10
 8001820:	4628      	mov	r0, r5
 8001822:	f000 f83f 	bl	80018a4 <__swbuf_r>
 8001826:	3001      	adds	r0, #1
 8001828:	d011      	beq.n	800184e <_puts_r+0x72>
 800182a:	200a      	movs	r0, #10
 800182c:	e011      	b.n	8001852 <_puts_r+0x76>
 800182e:	4b17      	ldr	r3, [pc, #92]	; (800188c <_puts_r+0xb0>)
 8001830:	429c      	cmp	r4, r3
 8001832:	d101      	bne.n	8001838 <_puts_r+0x5c>
 8001834:	68ac      	ldr	r4, [r5, #8]
 8001836:	e7e3      	b.n	8001800 <_puts_r+0x24>
 8001838:	4b15      	ldr	r3, [pc, #84]	; (8001890 <_puts_r+0xb4>)
 800183a:	429c      	cmp	r4, r3
 800183c:	bf08      	it	eq
 800183e:	68ec      	ldreq	r4, [r5, #12]
 8001840:	e7de      	b.n	8001800 <_puts_r+0x24>
 8001842:	4621      	mov	r1, r4
 8001844:	4628      	mov	r0, r5
 8001846:	f000 f87f 	bl	8001948 <__swsetup_r>
 800184a:	2800      	cmp	r0, #0
 800184c:	d0dd      	beq.n	800180a <_puts_r+0x2e>
 800184e:	f04f 30ff 	mov.w	r0, #4294967295
 8001852:	bd70      	pop	{r4, r5, r6, pc}
 8001854:	2b00      	cmp	r3, #0
 8001856:	da04      	bge.n	8001862 <_puts_r+0x86>
 8001858:	69a2      	ldr	r2, [r4, #24]
 800185a:	429a      	cmp	r2, r3
 800185c:	dc06      	bgt.n	800186c <_puts_r+0x90>
 800185e:	290a      	cmp	r1, #10
 8001860:	d004      	beq.n	800186c <_puts_r+0x90>
 8001862:	6823      	ldr	r3, [r4, #0]
 8001864:	1c5a      	adds	r2, r3, #1
 8001866:	6022      	str	r2, [r4, #0]
 8001868:	7019      	strb	r1, [r3, #0]
 800186a:	e7cf      	b.n	800180c <_puts_r+0x30>
 800186c:	4622      	mov	r2, r4
 800186e:	4628      	mov	r0, r5
 8001870:	f000 f818 	bl	80018a4 <__swbuf_r>
 8001874:	3001      	adds	r0, #1
 8001876:	d1c9      	bne.n	800180c <_puts_r+0x30>
 8001878:	e7e9      	b.n	800184e <_puts_r+0x72>
 800187a:	6823      	ldr	r3, [r4, #0]
 800187c:	200a      	movs	r0, #10
 800187e:	1c5a      	adds	r2, r3, #1
 8001880:	6022      	str	r2, [r4, #0]
 8001882:	7018      	strb	r0, [r3, #0]
 8001884:	e7e5      	b.n	8001852 <_puts_r+0x76>
 8001886:	bf00      	nop
 8001888:	0800245c 	.word	0x0800245c
 800188c:	0800247c 	.word	0x0800247c
 8001890:	0800243c 	.word	0x0800243c

08001894 <puts>:
 8001894:	4b02      	ldr	r3, [pc, #8]	; (80018a0 <puts+0xc>)
 8001896:	4601      	mov	r1, r0
 8001898:	6818      	ldr	r0, [r3, #0]
 800189a:	f7ff bf9f 	b.w	80017dc <_puts_r>
 800189e:	bf00      	nop
 80018a0:	2000001c 	.word	0x2000001c

080018a4 <__swbuf_r>:
 80018a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018a6:	460e      	mov	r6, r1
 80018a8:	4614      	mov	r4, r2
 80018aa:	4605      	mov	r5, r0
 80018ac:	b118      	cbz	r0, 80018b6 <__swbuf_r+0x12>
 80018ae:	6983      	ldr	r3, [r0, #24]
 80018b0:	b90b      	cbnz	r3, 80018b6 <__swbuf_r+0x12>
 80018b2:	f000 f9a7 	bl	8001c04 <__sinit>
 80018b6:	4b21      	ldr	r3, [pc, #132]	; (800193c <__swbuf_r+0x98>)
 80018b8:	429c      	cmp	r4, r3
 80018ba:	d12a      	bne.n	8001912 <__swbuf_r+0x6e>
 80018bc:	686c      	ldr	r4, [r5, #4]
 80018be:	69a3      	ldr	r3, [r4, #24]
 80018c0:	60a3      	str	r3, [r4, #8]
 80018c2:	89a3      	ldrh	r3, [r4, #12]
 80018c4:	071a      	lsls	r2, r3, #28
 80018c6:	d52e      	bpl.n	8001926 <__swbuf_r+0x82>
 80018c8:	6923      	ldr	r3, [r4, #16]
 80018ca:	b363      	cbz	r3, 8001926 <__swbuf_r+0x82>
 80018cc:	6923      	ldr	r3, [r4, #16]
 80018ce:	6820      	ldr	r0, [r4, #0]
 80018d0:	1ac0      	subs	r0, r0, r3
 80018d2:	6963      	ldr	r3, [r4, #20]
 80018d4:	b2f6      	uxtb	r6, r6
 80018d6:	4283      	cmp	r3, r0
 80018d8:	4637      	mov	r7, r6
 80018da:	dc04      	bgt.n	80018e6 <__swbuf_r+0x42>
 80018dc:	4621      	mov	r1, r4
 80018de:	4628      	mov	r0, r5
 80018e0:	f000 f926 	bl	8001b30 <_fflush_r>
 80018e4:	bb28      	cbnz	r0, 8001932 <__swbuf_r+0x8e>
 80018e6:	68a3      	ldr	r3, [r4, #8]
 80018e8:	3b01      	subs	r3, #1
 80018ea:	60a3      	str	r3, [r4, #8]
 80018ec:	6823      	ldr	r3, [r4, #0]
 80018ee:	1c5a      	adds	r2, r3, #1
 80018f0:	6022      	str	r2, [r4, #0]
 80018f2:	701e      	strb	r6, [r3, #0]
 80018f4:	6963      	ldr	r3, [r4, #20]
 80018f6:	3001      	adds	r0, #1
 80018f8:	4283      	cmp	r3, r0
 80018fa:	d004      	beq.n	8001906 <__swbuf_r+0x62>
 80018fc:	89a3      	ldrh	r3, [r4, #12]
 80018fe:	07db      	lsls	r3, r3, #31
 8001900:	d519      	bpl.n	8001936 <__swbuf_r+0x92>
 8001902:	2e0a      	cmp	r6, #10
 8001904:	d117      	bne.n	8001936 <__swbuf_r+0x92>
 8001906:	4621      	mov	r1, r4
 8001908:	4628      	mov	r0, r5
 800190a:	f000 f911 	bl	8001b30 <_fflush_r>
 800190e:	b190      	cbz	r0, 8001936 <__swbuf_r+0x92>
 8001910:	e00f      	b.n	8001932 <__swbuf_r+0x8e>
 8001912:	4b0b      	ldr	r3, [pc, #44]	; (8001940 <__swbuf_r+0x9c>)
 8001914:	429c      	cmp	r4, r3
 8001916:	d101      	bne.n	800191c <__swbuf_r+0x78>
 8001918:	68ac      	ldr	r4, [r5, #8]
 800191a:	e7d0      	b.n	80018be <__swbuf_r+0x1a>
 800191c:	4b09      	ldr	r3, [pc, #36]	; (8001944 <__swbuf_r+0xa0>)
 800191e:	429c      	cmp	r4, r3
 8001920:	bf08      	it	eq
 8001922:	68ec      	ldreq	r4, [r5, #12]
 8001924:	e7cb      	b.n	80018be <__swbuf_r+0x1a>
 8001926:	4621      	mov	r1, r4
 8001928:	4628      	mov	r0, r5
 800192a:	f000 f80d 	bl	8001948 <__swsetup_r>
 800192e:	2800      	cmp	r0, #0
 8001930:	d0cc      	beq.n	80018cc <__swbuf_r+0x28>
 8001932:	f04f 37ff 	mov.w	r7, #4294967295
 8001936:	4638      	mov	r0, r7
 8001938:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800193a:	bf00      	nop
 800193c:	0800245c 	.word	0x0800245c
 8001940:	0800247c 	.word	0x0800247c
 8001944:	0800243c 	.word	0x0800243c

08001948 <__swsetup_r>:
 8001948:	4b32      	ldr	r3, [pc, #200]	; (8001a14 <__swsetup_r+0xcc>)
 800194a:	b570      	push	{r4, r5, r6, lr}
 800194c:	681d      	ldr	r5, [r3, #0]
 800194e:	4606      	mov	r6, r0
 8001950:	460c      	mov	r4, r1
 8001952:	b125      	cbz	r5, 800195e <__swsetup_r+0x16>
 8001954:	69ab      	ldr	r3, [r5, #24]
 8001956:	b913      	cbnz	r3, 800195e <__swsetup_r+0x16>
 8001958:	4628      	mov	r0, r5
 800195a:	f000 f953 	bl	8001c04 <__sinit>
 800195e:	4b2e      	ldr	r3, [pc, #184]	; (8001a18 <__swsetup_r+0xd0>)
 8001960:	429c      	cmp	r4, r3
 8001962:	d10f      	bne.n	8001984 <__swsetup_r+0x3c>
 8001964:	686c      	ldr	r4, [r5, #4]
 8001966:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800196a:	b29a      	uxth	r2, r3
 800196c:	0715      	lsls	r5, r2, #28
 800196e:	d42c      	bmi.n	80019ca <__swsetup_r+0x82>
 8001970:	06d0      	lsls	r0, r2, #27
 8001972:	d411      	bmi.n	8001998 <__swsetup_r+0x50>
 8001974:	2209      	movs	r2, #9
 8001976:	6032      	str	r2, [r6, #0]
 8001978:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800197c:	81a3      	strh	r3, [r4, #12]
 800197e:	f04f 30ff 	mov.w	r0, #4294967295
 8001982:	e03e      	b.n	8001a02 <__swsetup_r+0xba>
 8001984:	4b25      	ldr	r3, [pc, #148]	; (8001a1c <__swsetup_r+0xd4>)
 8001986:	429c      	cmp	r4, r3
 8001988:	d101      	bne.n	800198e <__swsetup_r+0x46>
 800198a:	68ac      	ldr	r4, [r5, #8]
 800198c:	e7eb      	b.n	8001966 <__swsetup_r+0x1e>
 800198e:	4b24      	ldr	r3, [pc, #144]	; (8001a20 <__swsetup_r+0xd8>)
 8001990:	429c      	cmp	r4, r3
 8001992:	bf08      	it	eq
 8001994:	68ec      	ldreq	r4, [r5, #12]
 8001996:	e7e6      	b.n	8001966 <__swsetup_r+0x1e>
 8001998:	0751      	lsls	r1, r2, #29
 800199a:	d512      	bpl.n	80019c2 <__swsetup_r+0x7a>
 800199c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800199e:	b141      	cbz	r1, 80019b2 <__swsetup_r+0x6a>
 80019a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80019a4:	4299      	cmp	r1, r3
 80019a6:	d002      	beq.n	80019ae <__swsetup_r+0x66>
 80019a8:	4630      	mov	r0, r6
 80019aa:	f000 fa19 	bl	8001de0 <_free_r>
 80019ae:	2300      	movs	r3, #0
 80019b0:	6363      	str	r3, [r4, #52]	; 0x34
 80019b2:	89a3      	ldrh	r3, [r4, #12]
 80019b4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80019b8:	81a3      	strh	r3, [r4, #12]
 80019ba:	2300      	movs	r3, #0
 80019bc:	6063      	str	r3, [r4, #4]
 80019be:	6923      	ldr	r3, [r4, #16]
 80019c0:	6023      	str	r3, [r4, #0]
 80019c2:	89a3      	ldrh	r3, [r4, #12]
 80019c4:	f043 0308 	orr.w	r3, r3, #8
 80019c8:	81a3      	strh	r3, [r4, #12]
 80019ca:	6923      	ldr	r3, [r4, #16]
 80019cc:	b94b      	cbnz	r3, 80019e2 <__swsetup_r+0x9a>
 80019ce:	89a3      	ldrh	r3, [r4, #12]
 80019d0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80019d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019d8:	d003      	beq.n	80019e2 <__swsetup_r+0x9a>
 80019da:	4621      	mov	r1, r4
 80019dc:	4630      	mov	r0, r6
 80019de:	f000 f9bf 	bl	8001d60 <__smakebuf_r>
 80019e2:	89a2      	ldrh	r2, [r4, #12]
 80019e4:	f012 0301 	ands.w	r3, r2, #1
 80019e8:	d00c      	beq.n	8001a04 <__swsetup_r+0xbc>
 80019ea:	2300      	movs	r3, #0
 80019ec:	60a3      	str	r3, [r4, #8]
 80019ee:	6963      	ldr	r3, [r4, #20]
 80019f0:	425b      	negs	r3, r3
 80019f2:	61a3      	str	r3, [r4, #24]
 80019f4:	6923      	ldr	r3, [r4, #16]
 80019f6:	b953      	cbnz	r3, 8001a0e <__swsetup_r+0xc6>
 80019f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80019fc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8001a00:	d1ba      	bne.n	8001978 <__swsetup_r+0x30>
 8001a02:	bd70      	pop	{r4, r5, r6, pc}
 8001a04:	0792      	lsls	r2, r2, #30
 8001a06:	bf58      	it	pl
 8001a08:	6963      	ldrpl	r3, [r4, #20]
 8001a0a:	60a3      	str	r3, [r4, #8]
 8001a0c:	e7f2      	b.n	80019f4 <__swsetup_r+0xac>
 8001a0e:	2000      	movs	r0, #0
 8001a10:	e7f7      	b.n	8001a02 <__swsetup_r+0xba>
 8001a12:	bf00      	nop
 8001a14:	2000001c 	.word	0x2000001c
 8001a18:	0800245c 	.word	0x0800245c
 8001a1c:	0800247c 	.word	0x0800247c
 8001a20:	0800243c 	.word	0x0800243c

08001a24 <__sflush_r>:
 8001a24:	898a      	ldrh	r2, [r1, #12]
 8001a26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a2a:	4605      	mov	r5, r0
 8001a2c:	0710      	lsls	r0, r2, #28
 8001a2e:	460c      	mov	r4, r1
 8001a30:	d458      	bmi.n	8001ae4 <__sflush_r+0xc0>
 8001a32:	684b      	ldr	r3, [r1, #4]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	dc05      	bgt.n	8001a44 <__sflush_r+0x20>
 8001a38:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	dc02      	bgt.n	8001a44 <__sflush_r+0x20>
 8001a3e:	2000      	movs	r0, #0
 8001a40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001a44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001a46:	2e00      	cmp	r6, #0
 8001a48:	d0f9      	beq.n	8001a3e <__sflush_r+0x1a>
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001a50:	682f      	ldr	r7, [r5, #0]
 8001a52:	6a21      	ldr	r1, [r4, #32]
 8001a54:	602b      	str	r3, [r5, #0]
 8001a56:	d032      	beq.n	8001abe <__sflush_r+0x9a>
 8001a58:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001a5a:	89a3      	ldrh	r3, [r4, #12]
 8001a5c:	075a      	lsls	r2, r3, #29
 8001a5e:	d505      	bpl.n	8001a6c <__sflush_r+0x48>
 8001a60:	6863      	ldr	r3, [r4, #4]
 8001a62:	1ac0      	subs	r0, r0, r3
 8001a64:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001a66:	b10b      	cbz	r3, 8001a6c <__sflush_r+0x48>
 8001a68:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001a6a:	1ac0      	subs	r0, r0, r3
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	4602      	mov	r2, r0
 8001a70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001a72:	6a21      	ldr	r1, [r4, #32]
 8001a74:	4628      	mov	r0, r5
 8001a76:	47b0      	blx	r6
 8001a78:	1c43      	adds	r3, r0, #1
 8001a7a:	89a3      	ldrh	r3, [r4, #12]
 8001a7c:	d106      	bne.n	8001a8c <__sflush_r+0x68>
 8001a7e:	6829      	ldr	r1, [r5, #0]
 8001a80:	291d      	cmp	r1, #29
 8001a82:	d848      	bhi.n	8001b16 <__sflush_r+0xf2>
 8001a84:	4a29      	ldr	r2, [pc, #164]	; (8001b2c <__sflush_r+0x108>)
 8001a86:	40ca      	lsrs	r2, r1
 8001a88:	07d6      	lsls	r6, r2, #31
 8001a8a:	d544      	bpl.n	8001b16 <__sflush_r+0xf2>
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	6062      	str	r2, [r4, #4]
 8001a90:	04d9      	lsls	r1, r3, #19
 8001a92:	6922      	ldr	r2, [r4, #16]
 8001a94:	6022      	str	r2, [r4, #0]
 8001a96:	d504      	bpl.n	8001aa2 <__sflush_r+0x7e>
 8001a98:	1c42      	adds	r2, r0, #1
 8001a9a:	d101      	bne.n	8001aa0 <__sflush_r+0x7c>
 8001a9c:	682b      	ldr	r3, [r5, #0]
 8001a9e:	b903      	cbnz	r3, 8001aa2 <__sflush_r+0x7e>
 8001aa0:	6560      	str	r0, [r4, #84]	; 0x54
 8001aa2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001aa4:	602f      	str	r7, [r5, #0]
 8001aa6:	2900      	cmp	r1, #0
 8001aa8:	d0c9      	beq.n	8001a3e <__sflush_r+0x1a>
 8001aaa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001aae:	4299      	cmp	r1, r3
 8001ab0:	d002      	beq.n	8001ab8 <__sflush_r+0x94>
 8001ab2:	4628      	mov	r0, r5
 8001ab4:	f000 f994 	bl	8001de0 <_free_r>
 8001ab8:	2000      	movs	r0, #0
 8001aba:	6360      	str	r0, [r4, #52]	; 0x34
 8001abc:	e7c0      	b.n	8001a40 <__sflush_r+0x1c>
 8001abe:	2301      	movs	r3, #1
 8001ac0:	4628      	mov	r0, r5
 8001ac2:	47b0      	blx	r6
 8001ac4:	1c41      	adds	r1, r0, #1
 8001ac6:	d1c8      	bne.n	8001a5a <__sflush_r+0x36>
 8001ac8:	682b      	ldr	r3, [r5, #0]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d0c5      	beq.n	8001a5a <__sflush_r+0x36>
 8001ace:	2b1d      	cmp	r3, #29
 8001ad0:	d001      	beq.n	8001ad6 <__sflush_r+0xb2>
 8001ad2:	2b16      	cmp	r3, #22
 8001ad4:	d101      	bne.n	8001ada <__sflush_r+0xb6>
 8001ad6:	602f      	str	r7, [r5, #0]
 8001ad8:	e7b1      	b.n	8001a3e <__sflush_r+0x1a>
 8001ada:	89a3      	ldrh	r3, [r4, #12]
 8001adc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ae0:	81a3      	strh	r3, [r4, #12]
 8001ae2:	e7ad      	b.n	8001a40 <__sflush_r+0x1c>
 8001ae4:	690f      	ldr	r7, [r1, #16]
 8001ae6:	2f00      	cmp	r7, #0
 8001ae8:	d0a9      	beq.n	8001a3e <__sflush_r+0x1a>
 8001aea:	0793      	lsls	r3, r2, #30
 8001aec:	680e      	ldr	r6, [r1, #0]
 8001aee:	bf08      	it	eq
 8001af0:	694b      	ldreq	r3, [r1, #20]
 8001af2:	600f      	str	r7, [r1, #0]
 8001af4:	bf18      	it	ne
 8001af6:	2300      	movne	r3, #0
 8001af8:	eba6 0807 	sub.w	r8, r6, r7
 8001afc:	608b      	str	r3, [r1, #8]
 8001afe:	f1b8 0f00 	cmp.w	r8, #0
 8001b02:	dd9c      	ble.n	8001a3e <__sflush_r+0x1a>
 8001b04:	4643      	mov	r3, r8
 8001b06:	463a      	mov	r2, r7
 8001b08:	6a21      	ldr	r1, [r4, #32]
 8001b0a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001b0c:	4628      	mov	r0, r5
 8001b0e:	47b0      	blx	r6
 8001b10:	2800      	cmp	r0, #0
 8001b12:	dc06      	bgt.n	8001b22 <__sflush_r+0xfe>
 8001b14:	89a3      	ldrh	r3, [r4, #12]
 8001b16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b1a:	81a3      	strh	r3, [r4, #12]
 8001b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b20:	e78e      	b.n	8001a40 <__sflush_r+0x1c>
 8001b22:	4407      	add	r7, r0
 8001b24:	eba8 0800 	sub.w	r8, r8, r0
 8001b28:	e7e9      	b.n	8001afe <__sflush_r+0xda>
 8001b2a:	bf00      	nop
 8001b2c:	20400001 	.word	0x20400001

08001b30 <_fflush_r>:
 8001b30:	b538      	push	{r3, r4, r5, lr}
 8001b32:	690b      	ldr	r3, [r1, #16]
 8001b34:	4605      	mov	r5, r0
 8001b36:	460c      	mov	r4, r1
 8001b38:	b1db      	cbz	r3, 8001b72 <_fflush_r+0x42>
 8001b3a:	b118      	cbz	r0, 8001b44 <_fflush_r+0x14>
 8001b3c:	6983      	ldr	r3, [r0, #24]
 8001b3e:	b90b      	cbnz	r3, 8001b44 <_fflush_r+0x14>
 8001b40:	f000 f860 	bl	8001c04 <__sinit>
 8001b44:	4b0c      	ldr	r3, [pc, #48]	; (8001b78 <_fflush_r+0x48>)
 8001b46:	429c      	cmp	r4, r3
 8001b48:	d109      	bne.n	8001b5e <_fflush_r+0x2e>
 8001b4a:	686c      	ldr	r4, [r5, #4]
 8001b4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001b50:	b17b      	cbz	r3, 8001b72 <_fflush_r+0x42>
 8001b52:	4621      	mov	r1, r4
 8001b54:	4628      	mov	r0, r5
 8001b56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001b5a:	f7ff bf63 	b.w	8001a24 <__sflush_r>
 8001b5e:	4b07      	ldr	r3, [pc, #28]	; (8001b7c <_fflush_r+0x4c>)
 8001b60:	429c      	cmp	r4, r3
 8001b62:	d101      	bne.n	8001b68 <_fflush_r+0x38>
 8001b64:	68ac      	ldr	r4, [r5, #8]
 8001b66:	e7f1      	b.n	8001b4c <_fflush_r+0x1c>
 8001b68:	4b05      	ldr	r3, [pc, #20]	; (8001b80 <_fflush_r+0x50>)
 8001b6a:	429c      	cmp	r4, r3
 8001b6c:	bf08      	it	eq
 8001b6e:	68ec      	ldreq	r4, [r5, #12]
 8001b70:	e7ec      	b.n	8001b4c <_fflush_r+0x1c>
 8001b72:	2000      	movs	r0, #0
 8001b74:	bd38      	pop	{r3, r4, r5, pc}
 8001b76:	bf00      	nop
 8001b78:	0800245c 	.word	0x0800245c
 8001b7c:	0800247c 	.word	0x0800247c
 8001b80:	0800243c 	.word	0x0800243c

08001b84 <std>:
 8001b84:	2300      	movs	r3, #0
 8001b86:	b510      	push	{r4, lr}
 8001b88:	4604      	mov	r4, r0
 8001b8a:	e9c0 3300 	strd	r3, r3, [r0]
 8001b8e:	6083      	str	r3, [r0, #8]
 8001b90:	8181      	strh	r1, [r0, #12]
 8001b92:	6643      	str	r3, [r0, #100]	; 0x64
 8001b94:	81c2      	strh	r2, [r0, #14]
 8001b96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001b9a:	6183      	str	r3, [r0, #24]
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	2208      	movs	r2, #8
 8001ba0:	305c      	adds	r0, #92	; 0x5c
 8001ba2:	f7ff fb15 	bl	80011d0 <memset>
 8001ba6:	4b05      	ldr	r3, [pc, #20]	; (8001bbc <std+0x38>)
 8001ba8:	6263      	str	r3, [r4, #36]	; 0x24
 8001baa:	4b05      	ldr	r3, [pc, #20]	; (8001bc0 <std+0x3c>)
 8001bac:	62a3      	str	r3, [r4, #40]	; 0x28
 8001bae:	4b05      	ldr	r3, [pc, #20]	; (8001bc4 <std+0x40>)
 8001bb0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001bb2:	4b05      	ldr	r3, [pc, #20]	; (8001bc8 <std+0x44>)
 8001bb4:	6224      	str	r4, [r4, #32]
 8001bb6:	6323      	str	r3, [r4, #48]	; 0x30
 8001bb8:	bd10      	pop	{r4, pc}
 8001bba:	bf00      	nop
 8001bbc:	08001fbd 	.word	0x08001fbd
 8001bc0:	08001fdf 	.word	0x08001fdf
 8001bc4:	08002017 	.word	0x08002017
 8001bc8:	0800203b 	.word	0x0800203b

08001bcc <_cleanup_r>:
 8001bcc:	4901      	ldr	r1, [pc, #4]	; (8001bd4 <_cleanup_r+0x8>)
 8001bce:	f000 b885 	b.w	8001cdc <_fwalk_reent>
 8001bd2:	bf00      	nop
 8001bd4:	08001b31 	.word	0x08001b31

08001bd8 <__sfmoreglue>:
 8001bd8:	b570      	push	{r4, r5, r6, lr}
 8001bda:	1e4a      	subs	r2, r1, #1
 8001bdc:	2568      	movs	r5, #104	; 0x68
 8001bde:	4355      	muls	r5, r2
 8001be0:	460e      	mov	r6, r1
 8001be2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001be6:	f000 f949 	bl	8001e7c <_malloc_r>
 8001bea:	4604      	mov	r4, r0
 8001bec:	b140      	cbz	r0, 8001c00 <__sfmoreglue+0x28>
 8001bee:	2100      	movs	r1, #0
 8001bf0:	e9c0 1600 	strd	r1, r6, [r0]
 8001bf4:	300c      	adds	r0, #12
 8001bf6:	60a0      	str	r0, [r4, #8]
 8001bf8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001bfc:	f7ff fae8 	bl	80011d0 <memset>
 8001c00:	4620      	mov	r0, r4
 8001c02:	bd70      	pop	{r4, r5, r6, pc}

08001c04 <__sinit>:
 8001c04:	6983      	ldr	r3, [r0, #24]
 8001c06:	b510      	push	{r4, lr}
 8001c08:	4604      	mov	r4, r0
 8001c0a:	bb33      	cbnz	r3, 8001c5a <__sinit+0x56>
 8001c0c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8001c10:	6503      	str	r3, [r0, #80]	; 0x50
 8001c12:	4b12      	ldr	r3, [pc, #72]	; (8001c5c <__sinit+0x58>)
 8001c14:	4a12      	ldr	r2, [pc, #72]	; (8001c60 <__sinit+0x5c>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	6282      	str	r2, [r0, #40]	; 0x28
 8001c1a:	4298      	cmp	r0, r3
 8001c1c:	bf04      	itt	eq
 8001c1e:	2301      	moveq	r3, #1
 8001c20:	6183      	streq	r3, [r0, #24]
 8001c22:	f000 f81f 	bl	8001c64 <__sfp>
 8001c26:	6060      	str	r0, [r4, #4]
 8001c28:	4620      	mov	r0, r4
 8001c2a:	f000 f81b 	bl	8001c64 <__sfp>
 8001c2e:	60a0      	str	r0, [r4, #8]
 8001c30:	4620      	mov	r0, r4
 8001c32:	f000 f817 	bl	8001c64 <__sfp>
 8001c36:	2200      	movs	r2, #0
 8001c38:	60e0      	str	r0, [r4, #12]
 8001c3a:	2104      	movs	r1, #4
 8001c3c:	6860      	ldr	r0, [r4, #4]
 8001c3e:	f7ff ffa1 	bl	8001b84 <std>
 8001c42:	2201      	movs	r2, #1
 8001c44:	2109      	movs	r1, #9
 8001c46:	68a0      	ldr	r0, [r4, #8]
 8001c48:	f7ff ff9c 	bl	8001b84 <std>
 8001c4c:	2202      	movs	r2, #2
 8001c4e:	2112      	movs	r1, #18
 8001c50:	68e0      	ldr	r0, [r4, #12]
 8001c52:	f7ff ff97 	bl	8001b84 <std>
 8001c56:	2301      	movs	r3, #1
 8001c58:	61a3      	str	r3, [r4, #24]
 8001c5a:	bd10      	pop	{r4, pc}
 8001c5c:	08002404 	.word	0x08002404
 8001c60:	08001bcd 	.word	0x08001bcd

08001c64 <__sfp>:
 8001c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c66:	4b1b      	ldr	r3, [pc, #108]	; (8001cd4 <__sfp+0x70>)
 8001c68:	681e      	ldr	r6, [r3, #0]
 8001c6a:	69b3      	ldr	r3, [r6, #24]
 8001c6c:	4607      	mov	r7, r0
 8001c6e:	b913      	cbnz	r3, 8001c76 <__sfp+0x12>
 8001c70:	4630      	mov	r0, r6
 8001c72:	f7ff ffc7 	bl	8001c04 <__sinit>
 8001c76:	3648      	adds	r6, #72	; 0x48
 8001c78:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001c7c:	3b01      	subs	r3, #1
 8001c7e:	d503      	bpl.n	8001c88 <__sfp+0x24>
 8001c80:	6833      	ldr	r3, [r6, #0]
 8001c82:	b133      	cbz	r3, 8001c92 <__sfp+0x2e>
 8001c84:	6836      	ldr	r6, [r6, #0]
 8001c86:	e7f7      	b.n	8001c78 <__sfp+0x14>
 8001c88:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001c8c:	b16d      	cbz	r5, 8001caa <__sfp+0x46>
 8001c8e:	3468      	adds	r4, #104	; 0x68
 8001c90:	e7f4      	b.n	8001c7c <__sfp+0x18>
 8001c92:	2104      	movs	r1, #4
 8001c94:	4638      	mov	r0, r7
 8001c96:	f7ff ff9f 	bl	8001bd8 <__sfmoreglue>
 8001c9a:	6030      	str	r0, [r6, #0]
 8001c9c:	2800      	cmp	r0, #0
 8001c9e:	d1f1      	bne.n	8001c84 <__sfp+0x20>
 8001ca0:	230c      	movs	r3, #12
 8001ca2:	603b      	str	r3, [r7, #0]
 8001ca4:	4604      	mov	r4, r0
 8001ca6:	4620      	mov	r0, r4
 8001ca8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001caa:	4b0b      	ldr	r3, [pc, #44]	; (8001cd8 <__sfp+0x74>)
 8001cac:	6665      	str	r5, [r4, #100]	; 0x64
 8001cae:	e9c4 5500 	strd	r5, r5, [r4]
 8001cb2:	60a5      	str	r5, [r4, #8]
 8001cb4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8001cb8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8001cbc:	2208      	movs	r2, #8
 8001cbe:	4629      	mov	r1, r5
 8001cc0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001cc4:	f7ff fa84 	bl	80011d0 <memset>
 8001cc8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001ccc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001cd0:	e7e9      	b.n	8001ca6 <__sfp+0x42>
 8001cd2:	bf00      	nop
 8001cd4:	08002404 	.word	0x08002404
 8001cd8:	ffff0001 	.word	0xffff0001

08001cdc <_fwalk_reent>:
 8001cdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001ce0:	4680      	mov	r8, r0
 8001ce2:	4689      	mov	r9, r1
 8001ce4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001ce8:	2600      	movs	r6, #0
 8001cea:	b914      	cbnz	r4, 8001cf2 <_fwalk_reent+0x16>
 8001cec:	4630      	mov	r0, r6
 8001cee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001cf2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8001cf6:	3f01      	subs	r7, #1
 8001cf8:	d501      	bpl.n	8001cfe <_fwalk_reent+0x22>
 8001cfa:	6824      	ldr	r4, [r4, #0]
 8001cfc:	e7f5      	b.n	8001cea <_fwalk_reent+0xe>
 8001cfe:	89ab      	ldrh	r3, [r5, #12]
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d907      	bls.n	8001d14 <_fwalk_reent+0x38>
 8001d04:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001d08:	3301      	adds	r3, #1
 8001d0a:	d003      	beq.n	8001d14 <_fwalk_reent+0x38>
 8001d0c:	4629      	mov	r1, r5
 8001d0e:	4640      	mov	r0, r8
 8001d10:	47c8      	blx	r9
 8001d12:	4306      	orrs	r6, r0
 8001d14:	3568      	adds	r5, #104	; 0x68
 8001d16:	e7ee      	b.n	8001cf6 <_fwalk_reent+0x1a>

08001d18 <__swhatbuf_r>:
 8001d18:	b570      	push	{r4, r5, r6, lr}
 8001d1a:	460e      	mov	r6, r1
 8001d1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d20:	2900      	cmp	r1, #0
 8001d22:	b096      	sub	sp, #88	; 0x58
 8001d24:	4614      	mov	r4, r2
 8001d26:	461d      	mov	r5, r3
 8001d28:	da07      	bge.n	8001d3a <__swhatbuf_r+0x22>
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	602b      	str	r3, [r5, #0]
 8001d2e:	89b3      	ldrh	r3, [r6, #12]
 8001d30:	061a      	lsls	r2, r3, #24
 8001d32:	d410      	bmi.n	8001d56 <__swhatbuf_r+0x3e>
 8001d34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d38:	e00e      	b.n	8001d58 <__swhatbuf_r+0x40>
 8001d3a:	466a      	mov	r2, sp
 8001d3c:	f000 f9a4 	bl	8002088 <_fstat_r>
 8001d40:	2800      	cmp	r0, #0
 8001d42:	dbf2      	blt.n	8001d2a <__swhatbuf_r+0x12>
 8001d44:	9a01      	ldr	r2, [sp, #4]
 8001d46:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001d4a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001d4e:	425a      	negs	r2, r3
 8001d50:	415a      	adcs	r2, r3
 8001d52:	602a      	str	r2, [r5, #0]
 8001d54:	e7ee      	b.n	8001d34 <__swhatbuf_r+0x1c>
 8001d56:	2340      	movs	r3, #64	; 0x40
 8001d58:	2000      	movs	r0, #0
 8001d5a:	6023      	str	r3, [r4, #0]
 8001d5c:	b016      	add	sp, #88	; 0x58
 8001d5e:	bd70      	pop	{r4, r5, r6, pc}

08001d60 <__smakebuf_r>:
 8001d60:	898b      	ldrh	r3, [r1, #12]
 8001d62:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001d64:	079d      	lsls	r5, r3, #30
 8001d66:	4606      	mov	r6, r0
 8001d68:	460c      	mov	r4, r1
 8001d6a:	d507      	bpl.n	8001d7c <__smakebuf_r+0x1c>
 8001d6c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001d70:	6023      	str	r3, [r4, #0]
 8001d72:	6123      	str	r3, [r4, #16]
 8001d74:	2301      	movs	r3, #1
 8001d76:	6163      	str	r3, [r4, #20]
 8001d78:	b002      	add	sp, #8
 8001d7a:	bd70      	pop	{r4, r5, r6, pc}
 8001d7c:	ab01      	add	r3, sp, #4
 8001d7e:	466a      	mov	r2, sp
 8001d80:	f7ff ffca 	bl	8001d18 <__swhatbuf_r>
 8001d84:	9900      	ldr	r1, [sp, #0]
 8001d86:	4605      	mov	r5, r0
 8001d88:	4630      	mov	r0, r6
 8001d8a:	f000 f877 	bl	8001e7c <_malloc_r>
 8001d8e:	b948      	cbnz	r0, 8001da4 <__smakebuf_r+0x44>
 8001d90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001d94:	059a      	lsls	r2, r3, #22
 8001d96:	d4ef      	bmi.n	8001d78 <__smakebuf_r+0x18>
 8001d98:	f023 0303 	bic.w	r3, r3, #3
 8001d9c:	f043 0302 	orr.w	r3, r3, #2
 8001da0:	81a3      	strh	r3, [r4, #12]
 8001da2:	e7e3      	b.n	8001d6c <__smakebuf_r+0xc>
 8001da4:	4b0d      	ldr	r3, [pc, #52]	; (8001ddc <__smakebuf_r+0x7c>)
 8001da6:	62b3      	str	r3, [r6, #40]	; 0x28
 8001da8:	89a3      	ldrh	r3, [r4, #12]
 8001daa:	6020      	str	r0, [r4, #0]
 8001dac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001db0:	81a3      	strh	r3, [r4, #12]
 8001db2:	9b00      	ldr	r3, [sp, #0]
 8001db4:	6163      	str	r3, [r4, #20]
 8001db6:	9b01      	ldr	r3, [sp, #4]
 8001db8:	6120      	str	r0, [r4, #16]
 8001dba:	b15b      	cbz	r3, 8001dd4 <__smakebuf_r+0x74>
 8001dbc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001dc0:	4630      	mov	r0, r6
 8001dc2:	f000 f973 	bl	80020ac <_isatty_r>
 8001dc6:	b128      	cbz	r0, 8001dd4 <__smakebuf_r+0x74>
 8001dc8:	89a3      	ldrh	r3, [r4, #12]
 8001dca:	f023 0303 	bic.w	r3, r3, #3
 8001dce:	f043 0301 	orr.w	r3, r3, #1
 8001dd2:	81a3      	strh	r3, [r4, #12]
 8001dd4:	89a3      	ldrh	r3, [r4, #12]
 8001dd6:	431d      	orrs	r5, r3
 8001dd8:	81a5      	strh	r5, [r4, #12]
 8001dda:	e7cd      	b.n	8001d78 <__smakebuf_r+0x18>
 8001ddc:	08001bcd 	.word	0x08001bcd

08001de0 <_free_r>:
 8001de0:	b538      	push	{r3, r4, r5, lr}
 8001de2:	4605      	mov	r5, r0
 8001de4:	2900      	cmp	r1, #0
 8001de6:	d045      	beq.n	8001e74 <_free_r+0x94>
 8001de8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001dec:	1f0c      	subs	r4, r1, #4
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	bfb8      	it	lt
 8001df2:	18e4      	addlt	r4, r4, r3
 8001df4:	f000 f97c 	bl	80020f0 <__malloc_lock>
 8001df8:	4a1f      	ldr	r2, [pc, #124]	; (8001e78 <_free_r+0x98>)
 8001dfa:	6813      	ldr	r3, [r2, #0]
 8001dfc:	4610      	mov	r0, r2
 8001dfe:	b933      	cbnz	r3, 8001e0e <_free_r+0x2e>
 8001e00:	6063      	str	r3, [r4, #4]
 8001e02:	6014      	str	r4, [r2, #0]
 8001e04:	4628      	mov	r0, r5
 8001e06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001e0a:	f000 b972 	b.w	80020f2 <__malloc_unlock>
 8001e0e:	42a3      	cmp	r3, r4
 8001e10:	d90c      	bls.n	8001e2c <_free_r+0x4c>
 8001e12:	6821      	ldr	r1, [r4, #0]
 8001e14:	1862      	adds	r2, r4, r1
 8001e16:	4293      	cmp	r3, r2
 8001e18:	bf04      	itt	eq
 8001e1a:	681a      	ldreq	r2, [r3, #0]
 8001e1c:	685b      	ldreq	r3, [r3, #4]
 8001e1e:	6063      	str	r3, [r4, #4]
 8001e20:	bf04      	itt	eq
 8001e22:	1852      	addeq	r2, r2, r1
 8001e24:	6022      	streq	r2, [r4, #0]
 8001e26:	6004      	str	r4, [r0, #0]
 8001e28:	e7ec      	b.n	8001e04 <_free_r+0x24>
 8001e2a:	4613      	mov	r3, r2
 8001e2c:	685a      	ldr	r2, [r3, #4]
 8001e2e:	b10a      	cbz	r2, 8001e34 <_free_r+0x54>
 8001e30:	42a2      	cmp	r2, r4
 8001e32:	d9fa      	bls.n	8001e2a <_free_r+0x4a>
 8001e34:	6819      	ldr	r1, [r3, #0]
 8001e36:	1858      	adds	r0, r3, r1
 8001e38:	42a0      	cmp	r0, r4
 8001e3a:	d10b      	bne.n	8001e54 <_free_r+0x74>
 8001e3c:	6820      	ldr	r0, [r4, #0]
 8001e3e:	4401      	add	r1, r0
 8001e40:	1858      	adds	r0, r3, r1
 8001e42:	4282      	cmp	r2, r0
 8001e44:	6019      	str	r1, [r3, #0]
 8001e46:	d1dd      	bne.n	8001e04 <_free_r+0x24>
 8001e48:	6810      	ldr	r0, [r2, #0]
 8001e4a:	6852      	ldr	r2, [r2, #4]
 8001e4c:	605a      	str	r2, [r3, #4]
 8001e4e:	4401      	add	r1, r0
 8001e50:	6019      	str	r1, [r3, #0]
 8001e52:	e7d7      	b.n	8001e04 <_free_r+0x24>
 8001e54:	d902      	bls.n	8001e5c <_free_r+0x7c>
 8001e56:	230c      	movs	r3, #12
 8001e58:	602b      	str	r3, [r5, #0]
 8001e5a:	e7d3      	b.n	8001e04 <_free_r+0x24>
 8001e5c:	6820      	ldr	r0, [r4, #0]
 8001e5e:	1821      	adds	r1, r4, r0
 8001e60:	428a      	cmp	r2, r1
 8001e62:	bf04      	itt	eq
 8001e64:	6811      	ldreq	r1, [r2, #0]
 8001e66:	6852      	ldreq	r2, [r2, #4]
 8001e68:	6062      	str	r2, [r4, #4]
 8001e6a:	bf04      	itt	eq
 8001e6c:	1809      	addeq	r1, r1, r0
 8001e6e:	6021      	streq	r1, [r4, #0]
 8001e70:	605c      	str	r4, [r3, #4]
 8001e72:	e7c7      	b.n	8001e04 <_free_r+0x24>
 8001e74:	bd38      	pop	{r3, r4, r5, pc}
 8001e76:	bf00      	nop
 8001e78:	200000a0 	.word	0x200000a0

08001e7c <_malloc_r>:
 8001e7c:	b570      	push	{r4, r5, r6, lr}
 8001e7e:	1ccd      	adds	r5, r1, #3
 8001e80:	f025 0503 	bic.w	r5, r5, #3
 8001e84:	3508      	adds	r5, #8
 8001e86:	2d0c      	cmp	r5, #12
 8001e88:	bf38      	it	cc
 8001e8a:	250c      	movcc	r5, #12
 8001e8c:	2d00      	cmp	r5, #0
 8001e8e:	4606      	mov	r6, r0
 8001e90:	db01      	blt.n	8001e96 <_malloc_r+0x1a>
 8001e92:	42a9      	cmp	r1, r5
 8001e94:	d903      	bls.n	8001e9e <_malloc_r+0x22>
 8001e96:	230c      	movs	r3, #12
 8001e98:	6033      	str	r3, [r6, #0]
 8001e9a:	2000      	movs	r0, #0
 8001e9c:	bd70      	pop	{r4, r5, r6, pc}
 8001e9e:	f000 f927 	bl	80020f0 <__malloc_lock>
 8001ea2:	4a21      	ldr	r2, [pc, #132]	; (8001f28 <_malloc_r+0xac>)
 8001ea4:	6814      	ldr	r4, [r2, #0]
 8001ea6:	4621      	mov	r1, r4
 8001ea8:	b991      	cbnz	r1, 8001ed0 <_malloc_r+0x54>
 8001eaa:	4c20      	ldr	r4, [pc, #128]	; (8001f2c <_malloc_r+0xb0>)
 8001eac:	6823      	ldr	r3, [r4, #0]
 8001eae:	b91b      	cbnz	r3, 8001eb8 <_malloc_r+0x3c>
 8001eb0:	4630      	mov	r0, r6
 8001eb2:	f000 f873 	bl	8001f9c <_sbrk_r>
 8001eb6:	6020      	str	r0, [r4, #0]
 8001eb8:	4629      	mov	r1, r5
 8001eba:	4630      	mov	r0, r6
 8001ebc:	f000 f86e 	bl	8001f9c <_sbrk_r>
 8001ec0:	1c43      	adds	r3, r0, #1
 8001ec2:	d124      	bne.n	8001f0e <_malloc_r+0x92>
 8001ec4:	230c      	movs	r3, #12
 8001ec6:	6033      	str	r3, [r6, #0]
 8001ec8:	4630      	mov	r0, r6
 8001eca:	f000 f912 	bl	80020f2 <__malloc_unlock>
 8001ece:	e7e4      	b.n	8001e9a <_malloc_r+0x1e>
 8001ed0:	680b      	ldr	r3, [r1, #0]
 8001ed2:	1b5b      	subs	r3, r3, r5
 8001ed4:	d418      	bmi.n	8001f08 <_malloc_r+0x8c>
 8001ed6:	2b0b      	cmp	r3, #11
 8001ed8:	d90f      	bls.n	8001efa <_malloc_r+0x7e>
 8001eda:	600b      	str	r3, [r1, #0]
 8001edc:	50cd      	str	r5, [r1, r3]
 8001ede:	18cc      	adds	r4, r1, r3
 8001ee0:	4630      	mov	r0, r6
 8001ee2:	f000 f906 	bl	80020f2 <__malloc_unlock>
 8001ee6:	f104 000b 	add.w	r0, r4, #11
 8001eea:	1d23      	adds	r3, r4, #4
 8001eec:	f020 0007 	bic.w	r0, r0, #7
 8001ef0:	1ac3      	subs	r3, r0, r3
 8001ef2:	d0d3      	beq.n	8001e9c <_malloc_r+0x20>
 8001ef4:	425a      	negs	r2, r3
 8001ef6:	50e2      	str	r2, [r4, r3]
 8001ef8:	e7d0      	b.n	8001e9c <_malloc_r+0x20>
 8001efa:	428c      	cmp	r4, r1
 8001efc:	684b      	ldr	r3, [r1, #4]
 8001efe:	bf16      	itet	ne
 8001f00:	6063      	strne	r3, [r4, #4]
 8001f02:	6013      	streq	r3, [r2, #0]
 8001f04:	460c      	movne	r4, r1
 8001f06:	e7eb      	b.n	8001ee0 <_malloc_r+0x64>
 8001f08:	460c      	mov	r4, r1
 8001f0a:	6849      	ldr	r1, [r1, #4]
 8001f0c:	e7cc      	b.n	8001ea8 <_malloc_r+0x2c>
 8001f0e:	1cc4      	adds	r4, r0, #3
 8001f10:	f024 0403 	bic.w	r4, r4, #3
 8001f14:	42a0      	cmp	r0, r4
 8001f16:	d005      	beq.n	8001f24 <_malloc_r+0xa8>
 8001f18:	1a21      	subs	r1, r4, r0
 8001f1a:	4630      	mov	r0, r6
 8001f1c:	f000 f83e 	bl	8001f9c <_sbrk_r>
 8001f20:	3001      	adds	r0, #1
 8001f22:	d0cf      	beq.n	8001ec4 <_malloc_r+0x48>
 8001f24:	6025      	str	r5, [r4, #0]
 8001f26:	e7db      	b.n	8001ee0 <_malloc_r+0x64>
 8001f28:	200000a0 	.word	0x200000a0
 8001f2c:	200000a4 	.word	0x200000a4

08001f30 <_putc_r>:
 8001f30:	b570      	push	{r4, r5, r6, lr}
 8001f32:	460d      	mov	r5, r1
 8001f34:	4614      	mov	r4, r2
 8001f36:	4606      	mov	r6, r0
 8001f38:	b118      	cbz	r0, 8001f42 <_putc_r+0x12>
 8001f3a:	6983      	ldr	r3, [r0, #24]
 8001f3c:	b90b      	cbnz	r3, 8001f42 <_putc_r+0x12>
 8001f3e:	f7ff fe61 	bl	8001c04 <__sinit>
 8001f42:	4b13      	ldr	r3, [pc, #76]	; (8001f90 <_putc_r+0x60>)
 8001f44:	429c      	cmp	r4, r3
 8001f46:	d112      	bne.n	8001f6e <_putc_r+0x3e>
 8001f48:	6874      	ldr	r4, [r6, #4]
 8001f4a:	68a3      	ldr	r3, [r4, #8]
 8001f4c:	3b01      	subs	r3, #1
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	60a3      	str	r3, [r4, #8]
 8001f52:	da16      	bge.n	8001f82 <_putc_r+0x52>
 8001f54:	69a2      	ldr	r2, [r4, #24]
 8001f56:	4293      	cmp	r3, r2
 8001f58:	db02      	blt.n	8001f60 <_putc_r+0x30>
 8001f5a:	b2eb      	uxtb	r3, r5
 8001f5c:	2b0a      	cmp	r3, #10
 8001f5e:	d110      	bne.n	8001f82 <_putc_r+0x52>
 8001f60:	4622      	mov	r2, r4
 8001f62:	4629      	mov	r1, r5
 8001f64:	4630      	mov	r0, r6
 8001f66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001f6a:	f7ff bc9b 	b.w	80018a4 <__swbuf_r>
 8001f6e:	4b09      	ldr	r3, [pc, #36]	; (8001f94 <_putc_r+0x64>)
 8001f70:	429c      	cmp	r4, r3
 8001f72:	d101      	bne.n	8001f78 <_putc_r+0x48>
 8001f74:	68b4      	ldr	r4, [r6, #8]
 8001f76:	e7e8      	b.n	8001f4a <_putc_r+0x1a>
 8001f78:	4b07      	ldr	r3, [pc, #28]	; (8001f98 <_putc_r+0x68>)
 8001f7a:	429c      	cmp	r4, r3
 8001f7c:	bf08      	it	eq
 8001f7e:	68f4      	ldreq	r4, [r6, #12]
 8001f80:	e7e3      	b.n	8001f4a <_putc_r+0x1a>
 8001f82:	6823      	ldr	r3, [r4, #0]
 8001f84:	1c5a      	adds	r2, r3, #1
 8001f86:	6022      	str	r2, [r4, #0]
 8001f88:	701d      	strb	r5, [r3, #0]
 8001f8a:	b2e8      	uxtb	r0, r5
 8001f8c:	bd70      	pop	{r4, r5, r6, pc}
 8001f8e:	bf00      	nop
 8001f90:	0800245c 	.word	0x0800245c
 8001f94:	0800247c 	.word	0x0800247c
 8001f98:	0800243c 	.word	0x0800243c

08001f9c <_sbrk_r>:
 8001f9c:	b538      	push	{r3, r4, r5, lr}
 8001f9e:	4c06      	ldr	r4, [pc, #24]	; (8001fb8 <_sbrk_r+0x1c>)
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	4605      	mov	r5, r0
 8001fa4:	4608      	mov	r0, r1
 8001fa6:	6023      	str	r3, [r4, #0]
 8001fa8:	f000 f8de 	bl	8002168 <_sbrk>
 8001fac:	1c43      	adds	r3, r0, #1
 8001fae:	d102      	bne.n	8001fb6 <_sbrk_r+0x1a>
 8001fb0:	6823      	ldr	r3, [r4, #0]
 8001fb2:	b103      	cbz	r3, 8001fb6 <_sbrk_r+0x1a>
 8001fb4:	602b      	str	r3, [r5, #0]
 8001fb6:	bd38      	pop	{r3, r4, r5, pc}
 8001fb8:	200000e0 	.word	0x200000e0

08001fbc <__sread>:
 8001fbc:	b510      	push	{r4, lr}
 8001fbe:	460c      	mov	r4, r1
 8001fc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001fc4:	f000 f896 	bl	80020f4 <_read_r>
 8001fc8:	2800      	cmp	r0, #0
 8001fca:	bfab      	itete	ge
 8001fcc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001fce:	89a3      	ldrhlt	r3, [r4, #12]
 8001fd0:	181b      	addge	r3, r3, r0
 8001fd2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001fd6:	bfac      	ite	ge
 8001fd8:	6563      	strge	r3, [r4, #84]	; 0x54
 8001fda:	81a3      	strhlt	r3, [r4, #12]
 8001fdc:	bd10      	pop	{r4, pc}

08001fde <__swrite>:
 8001fde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001fe2:	461f      	mov	r7, r3
 8001fe4:	898b      	ldrh	r3, [r1, #12]
 8001fe6:	05db      	lsls	r3, r3, #23
 8001fe8:	4605      	mov	r5, r0
 8001fea:	460c      	mov	r4, r1
 8001fec:	4616      	mov	r6, r2
 8001fee:	d505      	bpl.n	8001ffc <__swrite+0x1e>
 8001ff0:	2302      	movs	r3, #2
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ff8:	f000 f868 	bl	80020cc <_lseek_r>
 8001ffc:	89a3      	ldrh	r3, [r4, #12]
 8001ffe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002002:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002006:	81a3      	strh	r3, [r4, #12]
 8002008:	4632      	mov	r2, r6
 800200a:	463b      	mov	r3, r7
 800200c:	4628      	mov	r0, r5
 800200e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002012:	f000 b817 	b.w	8002044 <_write_r>

08002016 <__sseek>:
 8002016:	b510      	push	{r4, lr}
 8002018:	460c      	mov	r4, r1
 800201a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800201e:	f000 f855 	bl	80020cc <_lseek_r>
 8002022:	1c43      	adds	r3, r0, #1
 8002024:	89a3      	ldrh	r3, [r4, #12]
 8002026:	bf15      	itete	ne
 8002028:	6560      	strne	r0, [r4, #84]	; 0x54
 800202a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800202e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002032:	81a3      	strheq	r3, [r4, #12]
 8002034:	bf18      	it	ne
 8002036:	81a3      	strhne	r3, [r4, #12]
 8002038:	bd10      	pop	{r4, pc}

0800203a <__sclose>:
 800203a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800203e:	f000 b813 	b.w	8002068 <_close_r>
	...

08002044 <_write_r>:
 8002044:	b538      	push	{r3, r4, r5, lr}
 8002046:	4c07      	ldr	r4, [pc, #28]	; (8002064 <_write_r+0x20>)
 8002048:	4605      	mov	r5, r0
 800204a:	4608      	mov	r0, r1
 800204c:	4611      	mov	r1, r2
 800204e:	2200      	movs	r2, #0
 8002050:	6022      	str	r2, [r4, #0]
 8002052:	461a      	mov	r2, r3
 8002054:	f7fe ff24 	bl	8000ea0 <_write>
 8002058:	1c43      	adds	r3, r0, #1
 800205a:	d102      	bne.n	8002062 <_write_r+0x1e>
 800205c:	6823      	ldr	r3, [r4, #0]
 800205e:	b103      	cbz	r3, 8002062 <_write_r+0x1e>
 8002060:	602b      	str	r3, [r5, #0]
 8002062:	bd38      	pop	{r3, r4, r5, pc}
 8002064:	200000e0 	.word	0x200000e0

08002068 <_close_r>:
 8002068:	b538      	push	{r3, r4, r5, lr}
 800206a:	4c06      	ldr	r4, [pc, #24]	; (8002084 <_close_r+0x1c>)
 800206c:	2300      	movs	r3, #0
 800206e:	4605      	mov	r5, r0
 8002070:	4608      	mov	r0, r1
 8002072:	6023      	str	r3, [r4, #0]
 8002074:	f000 f850 	bl	8002118 <_close>
 8002078:	1c43      	adds	r3, r0, #1
 800207a:	d102      	bne.n	8002082 <_close_r+0x1a>
 800207c:	6823      	ldr	r3, [r4, #0]
 800207e:	b103      	cbz	r3, 8002082 <_close_r+0x1a>
 8002080:	602b      	str	r3, [r5, #0]
 8002082:	bd38      	pop	{r3, r4, r5, pc}
 8002084:	200000e0 	.word	0x200000e0

08002088 <_fstat_r>:
 8002088:	b538      	push	{r3, r4, r5, lr}
 800208a:	4c07      	ldr	r4, [pc, #28]	; (80020a8 <_fstat_r+0x20>)
 800208c:	2300      	movs	r3, #0
 800208e:	4605      	mov	r5, r0
 8002090:	4608      	mov	r0, r1
 8002092:	4611      	mov	r1, r2
 8002094:	6023      	str	r3, [r4, #0]
 8002096:	f000 f847 	bl	8002128 <_fstat>
 800209a:	1c43      	adds	r3, r0, #1
 800209c:	d102      	bne.n	80020a4 <_fstat_r+0x1c>
 800209e:	6823      	ldr	r3, [r4, #0]
 80020a0:	b103      	cbz	r3, 80020a4 <_fstat_r+0x1c>
 80020a2:	602b      	str	r3, [r5, #0]
 80020a4:	bd38      	pop	{r3, r4, r5, pc}
 80020a6:	bf00      	nop
 80020a8:	200000e0 	.word	0x200000e0

080020ac <_isatty_r>:
 80020ac:	b538      	push	{r3, r4, r5, lr}
 80020ae:	4c06      	ldr	r4, [pc, #24]	; (80020c8 <_isatty_r+0x1c>)
 80020b0:	2300      	movs	r3, #0
 80020b2:	4605      	mov	r5, r0
 80020b4:	4608      	mov	r0, r1
 80020b6:	6023      	str	r3, [r4, #0]
 80020b8:	f000 f83e 	bl	8002138 <_isatty>
 80020bc:	1c43      	adds	r3, r0, #1
 80020be:	d102      	bne.n	80020c6 <_isatty_r+0x1a>
 80020c0:	6823      	ldr	r3, [r4, #0]
 80020c2:	b103      	cbz	r3, 80020c6 <_isatty_r+0x1a>
 80020c4:	602b      	str	r3, [r5, #0]
 80020c6:	bd38      	pop	{r3, r4, r5, pc}
 80020c8:	200000e0 	.word	0x200000e0

080020cc <_lseek_r>:
 80020cc:	b538      	push	{r3, r4, r5, lr}
 80020ce:	4c07      	ldr	r4, [pc, #28]	; (80020ec <_lseek_r+0x20>)
 80020d0:	4605      	mov	r5, r0
 80020d2:	4608      	mov	r0, r1
 80020d4:	4611      	mov	r1, r2
 80020d6:	2200      	movs	r2, #0
 80020d8:	6022      	str	r2, [r4, #0]
 80020da:	461a      	mov	r2, r3
 80020dc:	f000 f834 	bl	8002148 <_lseek>
 80020e0:	1c43      	adds	r3, r0, #1
 80020e2:	d102      	bne.n	80020ea <_lseek_r+0x1e>
 80020e4:	6823      	ldr	r3, [r4, #0]
 80020e6:	b103      	cbz	r3, 80020ea <_lseek_r+0x1e>
 80020e8:	602b      	str	r3, [r5, #0]
 80020ea:	bd38      	pop	{r3, r4, r5, pc}
 80020ec:	200000e0 	.word	0x200000e0

080020f0 <__malloc_lock>:
 80020f0:	4770      	bx	lr

080020f2 <__malloc_unlock>:
 80020f2:	4770      	bx	lr

080020f4 <_read_r>:
 80020f4:	b538      	push	{r3, r4, r5, lr}
 80020f6:	4c07      	ldr	r4, [pc, #28]	; (8002114 <_read_r+0x20>)
 80020f8:	4605      	mov	r5, r0
 80020fa:	4608      	mov	r0, r1
 80020fc:	4611      	mov	r1, r2
 80020fe:	2200      	movs	r2, #0
 8002100:	6022      	str	r2, [r4, #0]
 8002102:	461a      	mov	r2, r3
 8002104:	f000 f828 	bl	8002158 <_read>
 8002108:	1c43      	adds	r3, r0, #1
 800210a:	d102      	bne.n	8002112 <_read_r+0x1e>
 800210c:	6823      	ldr	r3, [r4, #0]
 800210e:	b103      	cbz	r3, 8002112 <_read_r+0x1e>
 8002110:	602b      	str	r3, [r5, #0]
 8002112:	bd38      	pop	{r3, r4, r5, pc}
 8002114:	200000e0 	.word	0x200000e0

08002118 <_close>:
 8002118:	4b02      	ldr	r3, [pc, #8]	; (8002124 <_close+0xc>)
 800211a:	2258      	movs	r2, #88	; 0x58
 800211c:	601a      	str	r2, [r3, #0]
 800211e:	f04f 30ff 	mov.w	r0, #4294967295
 8002122:	4770      	bx	lr
 8002124:	200000e0 	.word	0x200000e0

08002128 <_fstat>:
 8002128:	4b02      	ldr	r3, [pc, #8]	; (8002134 <_fstat+0xc>)
 800212a:	2258      	movs	r2, #88	; 0x58
 800212c:	601a      	str	r2, [r3, #0]
 800212e:	f04f 30ff 	mov.w	r0, #4294967295
 8002132:	4770      	bx	lr
 8002134:	200000e0 	.word	0x200000e0

08002138 <_isatty>:
 8002138:	4b02      	ldr	r3, [pc, #8]	; (8002144 <_isatty+0xc>)
 800213a:	2258      	movs	r2, #88	; 0x58
 800213c:	601a      	str	r2, [r3, #0]
 800213e:	2000      	movs	r0, #0
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	200000e0 	.word	0x200000e0

08002148 <_lseek>:
 8002148:	4b02      	ldr	r3, [pc, #8]	; (8002154 <_lseek+0xc>)
 800214a:	2258      	movs	r2, #88	; 0x58
 800214c:	601a      	str	r2, [r3, #0]
 800214e:	f04f 30ff 	mov.w	r0, #4294967295
 8002152:	4770      	bx	lr
 8002154:	200000e0 	.word	0x200000e0

08002158 <_read>:
 8002158:	4b02      	ldr	r3, [pc, #8]	; (8002164 <_read+0xc>)
 800215a:	2258      	movs	r2, #88	; 0x58
 800215c:	601a      	str	r2, [r3, #0]
 800215e:	f04f 30ff 	mov.w	r0, #4294967295
 8002162:	4770      	bx	lr
 8002164:	200000e0 	.word	0x200000e0

08002168 <_sbrk>:
 8002168:	4b04      	ldr	r3, [pc, #16]	; (800217c <_sbrk+0x14>)
 800216a:	6819      	ldr	r1, [r3, #0]
 800216c:	4602      	mov	r2, r0
 800216e:	b909      	cbnz	r1, 8002174 <_sbrk+0xc>
 8002170:	4903      	ldr	r1, [pc, #12]	; (8002180 <_sbrk+0x18>)
 8002172:	6019      	str	r1, [r3, #0]
 8002174:	6818      	ldr	r0, [r3, #0]
 8002176:	4402      	add	r2, r0
 8002178:	601a      	str	r2, [r3, #0]
 800217a:	4770      	bx	lr
 800217c:	200000a8 	.word	0x200000a8
 8002180:	200000e8 	.word	0x200000e8

08002184 <_init>:
 8002184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002186:	bf00      	nop
 8002188:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800218a:	bc08      	pop	{r3}
 800218c:	469e      	mov	lr, r3
 800218e:	4770      	bx	lr

08002190 <_fini>:
 8002190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002192:	bf00      	nop
 8002194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002196:	bc08      	pop	{r3}
 8002198:	469e      	mov	lr, r3
 800219a:	4770      	bx	lr
