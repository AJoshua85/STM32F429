
USBF4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000218c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000430  0800233c  0800233c  0001233c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800276c  0800276c  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  0800276c  0800276c  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800276c  0800276c  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800276c  0800276c  0001276c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002770  08002770  00012770  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08002774  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000064  20000080  080027f4  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000e4  080027f4  000200e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003518  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000a08  00000000  00000000  000235c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000228  00000000  00000000  00023fd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000001d0  00000000  00000000  000241f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000231c  00000000  00000000  000243c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000234e  00000000  00000000  000266e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009b636  00000000  00000000  00028a32  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c4068  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001028  00000000  00000000  000c40e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stab         00000084  00000000  00000000  000c510c  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000117  00000000  00000000  000c5190  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000080 	.word	0x20000080
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08002324 	.word	0x08002324

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000084 	.word	0x20000084
 80001ec:	08002324 	.word	0x08002324

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <IN_ENDPOINT>:

/** \brief Returns the structure contains the registers of a specific IN endpoint.
 * \param endpoint_number The number of the IN endpoint we want to access its registers.
 */
inline static USB_OTG_INEndpointTypeDef * IN_ENDPOINT(uint8_t endpoint_number)
{
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
 8000296:	4603      	mov	r3, r0
 8000298:	71fb      	strb	r3, [r7, #7]
    return (USB_OTG_INEndpointTypeDef *)(USB_OTG_HS_PERIPH_BASE + USB_OTG_IN_ENDPOINT_BASE + (endpoint_number * 0x20));
 800029a:	79fb      	ldrb	r3, [r7, #7]
 800029c:	015b      	lsls	r3, r3, #5
 800029e:	461a      	mov	r2, r3
 80002a0:	4b03      	ldr	r3, [pc, #12]	; (80002b0 <IN_ENDPOINT+0x20>)
 80002a2:	4413      	add	r3, r2
}
 80002a4:	4618      	mov	r0, r3
 80002a6:	370c      	adds	r7, #12
 80002a8:	46bd      	mov	sp, r7
 80002aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ae:	4770      	bx	lr
 80002b0:	40040900 	.word	0x40040900

080002b4 <OUT_ENDPOINT>:

/** \brief Returns the structure contains the registers of a specific OUT endpoint.
 * \param endpoint_number The number of the OUT endpoint we want to access its registers.
 */
inline static USB_OTG_OUTEndpointTypeDef * OUT_ENDPOINT(uint8_t endpoint_number)
{
 80002b4:	b480      	push	{r7}
 80002b6:	b083      	sub	sp, #12
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	4603      	mov	r3, r0
 80002bc:	71fb      	strb	r3, [r7, #7]
    return (USB_OTG_OUTEndpointTypeDef *)(USB_OTG_HS_PERIPH_BASE + USB_OTG_OUT_ENDPOINT_BASE + (endpoint_number * 0x20));
 80002be:	79fb      	ldrb	r3, [r7, #7]
 80002c0:	015b      	lsls	r3, r3, #5
 80002c2:	461a      	mov	r2, r3
 80002c4:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <OUT_ENDPOINT+0x20>)
 80002c6:	4413      	add	r3, r2
}
 80002c8:	4618      	mov	r0, r3
 80002ca:	370c      	adds	r7, #12
 80002cc:	46bd      	mov	sp, r7
 80002ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d2:	4770      	bx	lr
 80002d4:	40040b00 	.word	0x40040b00

080002d8 <FIFO>:

inline static __IO uint32_t *FIFO(uint8_t endpoint_number)
{
 80002d8:	b480      	push	{r7}
 80002da:	b083      	sub	sp, #12
 80002dc:	af00      	add	r7, sp, #0
 80002de:	4603      	mov	r3, r0
 80002e0:	71fb      	strb	r3, [r7, #7]
    return (__IO uint32_t *)(USB_OTG_HS_PERIPH_BASE + USB_OTG_FIFO_BASE + (endpoint_number * 0x1000));
 80002e2:	79fb      	ldrb	r3, [r7, #7]
 80002e4:	031b      	lsls	r3, r3, #12
 80002e6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80002ea:	f503 2382 	add.w	r3, r3, #266240	; 0x41000
}
 80002ee:	4618      	mov	r0, r3
 80002f0:	370c      	adds	r7, #12
 80002f2:	46bd      	mov	sp, r7
 80002f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f8:	4770      	bx	lr
	...

080002fc <USB_Gpio_Init>:
 * @parem[in]		- none
 * @return			- none
 * @note			- none
 */
static void USB_Gpio_Init()
{
 80002fc:	b480      	push	{r7}
 80002fe:	af00      	add	r7, sp, #0
	// Enables the clock for GPIOB.
	SET_BIT(RCC->AHB1ENR, RCC_AHB1ENR_GPIOBEN);
 8000300:	4b0d      	ldr	r3, [pc, #52]	; (8000338 <USB_Gpio_Init+0x3c>)
 8000302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000304:	4a0c      	ldr	r2, [pc, #48]	; (8000338 <USB_Gpio_Init+0x3c>)
 8000306:	f043 0302 	orr.w	r3, r3, #2
 800030a:	6313      	str	r3, [r2, #48]	; 0x30

	// Sets alternate function 12 for: PB14 (-), and PB15 (+).
	MODIFY_REG(GPIOB->AFR[1],
 800030c:	4b0b      	ldr	r3, [pc, #44]	; (800033c <USB_Gpio_Init+0x40>)
 800030e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000310:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000314:	4a09      	ldr	r2, [pc, #36]	; (800033c <USB_Gpio_Init+0x40>)
 8000316:	f043 434c 	orr.w	r3, r3, #3422552064	; 0xcc000000
 800031a:	6253      	str	r3, [r2, #36]	; 0x24
		GPIO_AFRH_AFSEL14 | GPIO_AFRH_AFSEL15,
		_VAL2FLD(GPIO_AFRH_AFSEL14, 0xC) | _VAL2FLD(GPIO_AFRH_AFSEL15, 0xC)
	);

	// Configures USB pins (in GPIOB) to work in alternate function mode.
	MODIFY_REG(GPIOB->MODER,
 800031c:	4b07      	ldr	r3, [pc, #28]	; (800033c <USB_Gpio_Init+0x40>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000324:	4a05      	ldr	r2, [pc, #20]	; (800033c <USB_Gpio_Init+0x40>)
 8000326:	f043 4320 	orr.w	r3, r3, #2684354560	; 0xa0000000
 800032a:	6013      	str	r3, [r2, #0]
		GPIO_MODER_MODER14 | GPIO_MODER_MODER15,
		_VAL2FLD(GPIO_MODER_MODER14, 2) | _VAL2FLD(GPIO_MODER_MODER15, 2)
	);
}
 800032c:	bf00      	nop
 800032e:	46bd      	mov	sp, r7
 8000330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000334:	4770      	bx	lr
 8000336:	bf00      	nop
 8000338:	40023800 	.word	0x40023800
 800033c:	40020400 	.word	0x40020400

08000340 <USB_Core_Init>:
 * @parem[in]		- none
 * @return			- none
 * @note			- none
 */
static void USB_Core_Init()
{
 8000340:	b480      	push	{r7}
 8000342:	af00      	add	r7, sp, #0
	// Enables the clock for USB core.
	SET_BIT(RCC->AHB1ENR, RCC_AHB1ENR_OTGHSEN);
 8000344:	4b1f      	ldr	r3, [pc, #124]	; (80003c4 <USB_Core_Init+0x84>)
 8000346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000348:	4a1e      	ldr	r2, [pc, #120]	; (80003c4 <USB_Core_Init+0x84>)
 800034a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800034e:	6313      	str	r3, [r2, #48]	; 0x30

	// Configures the USB core to run in device mode, and to use the embedded full-speed PHY.
	MODIFY_REG(USB_OTG_HS->GUSBCFG,
 8000350:	4b1d      	ldr	r3, [pc, #116]	; (80003c8 <USB_Core_Init+0x88>)
 8000352:	68db      	ldr	r3, [r3, #12]
 8000354:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8000358:	f423 5371 	bic.w	r3, r3, #15424	; 0x3c40
 800035c:	4a1a      	ldr	r2, [pc, #104]	; (80003c8 <USB_Core_Init+0x88>)
 800035e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000362:	f443 5311 	orr.w	r3, r3, #9280	; 0x2440
 8000366:	60d3      	str	r3, [r2, #12]
		USB_OTG_GUSBCFG_FDMOD | USB_OTG_GUSBCFG_PHYSEL | USB_OTG_GUSBCFG_TRDT,
		USB_OTG_GUSBCFG_FDMOD | USB_OTG_GUSBCFG_PHYSEL | _VAL2FLD(USB_OTG_GUSBCFG_TRDT, 0x09)
	);

	// Configures the device to run in full speed mode.
	MODIFY_REG(USB_OTG_HS_DEVICE->DCFG,
 8000368:	4b18      	ldr	r3, [pc, #96]	; (80003cc <USB_Core_Init+0x8c>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	4a17      	ldr	r2, [pc, #92]	; (80003cc <USB_Core_Init+0x8c>)
 800036e:	f043 0303 	orr.w	r3, r3, #3
 8000372:	6013      	str	r3, [r2, #0]
		USB_OTG_DCFG_DSPD,
		_VAL2FLD(USB_OTG_DCFG_DSPD, 0x03)
	);

	//Enable VBUS sensing device
	SET_BIT(USB_OTG_HS->GCCFG, USB_OTG_GCCFG_VBUSBSEN);
 8000374:	4b14      	ldr	r3, [pc, #80]	; (80003c8 <USB_Core_Init+0x88>)
 8000376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000378:	4a13      	ldr	r2, [pc, #76]	; (80003c8 <USB_Core_Init+0x88>)
 800037a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800037e:	6393      	str	r3, [r2, #56]	; 0x38
	*WUIM: Resume/remote wakeup detected interrupt mask
	*IEPINT: IN endpoints interrupt mask
	*RXFLVLM: Receive FIFO non-empty mask*/

	// Unmasks the main USB core interrupts.
	SET_BIT(USB_OTG_HS->GINTMSK,
 8000380:	4b11      	ldr	r3, [pc, #68]	; (80003c8 <USB_Core_Init+0x88>)
 8000382:	699a      	ldr	r2, [r3, #24]
 8000384:	4910      	ldr	r1, [pc, #64]	; (80003c8 <USB_Core_Init+0x88>)
 8000386:	4b12      	ldr	r3, [pc, #72]	; (80003d0 <USB_Core_Init+0x90>)
 8000388:	4313      	orrs	r3, r2
 800038a:	618b      	str	r3, [r1, #24]
		USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_WUIM | USB_OTG_GINTMSK_IEPINT |
		USB_OTG_GINTSTS_OEPINT | USB_OTG_GINTMSK_RXFLVLM
	);

	// Clears all pending core interrupts.
	WRITE_REG(USB_OTG_HS->GINTSTS, 0xFFFFFFFF);
 800038c:	4b0e      	ldr	r3, [pc, #56]	; (80003c8 <USB_Core_Init+0x88>)
 800038e:	f04f 32ff 	mov.w	r2, #4294967295
 8000392:	615a      	str	r2, [r3, #20]

	// Unmasks USB global interrupt.
	SET_BIT(USB_OTG_HS->GAHBCFG, USB_OTG_GAHBCFG_GINT);
 8000394:	4b0c      	ldr	r3, [pc, #48]	; (80003c8 <USB_Core_Init+0x88>)
 8000396:	689b      	ldr	r3, [r3, #8]
 8000398:	4a0b      	ldr	r2, [pc, #44]	; (80003c8 <USB_Core_Init+0x88>)
 800039a:	f043 0301 	orr.w	r3, r3, #1
 800039e:	6093      	str	r3, [r2, #8]

	// Unmasks transfer completed interrupts for all endpoints.
	SET_BIT(USB_OTG_HS_DEVICE->DOEPMSK, USB_OTG_DOEPMSK_XFRCM);
 80003a0:	4b0a      	ldr	r3, [pc, #40]	; (80003cc <USB_Core_Init+0x8c>)
 80003a2:	695b      	ldr	r3, [r3, #20]
 80003a4:	4a09      	ldr	r2, [pc, #36]	; (80003cc <USB_Core_Init+0x8c>)
 80003a6:	f043 0301 	orr.w	r3, r3, #1
 80003aa:	6153      	str	r3, [r2, #20]
	SET_BIT(USB_OTG_HS_DEVICE->DIEPMSK, USB_OTG_DIEPMSK_XFRCM);
 80003ac:	4b07      	ldr	r3, [pc, #28]	; (80003cc <USB_Core_Init+0x8c>)
 80003ae:	691b      	ldr	r3, [r3, #16]
 80003b0:	4a06      	ldr	r2, [pc, #24]	; (80003cc <USB_Core_Init+0x8c>)
 80003b2:	f043 0301 	orr.w	r3, r3, #1
 80003b6:	6113      	str	r3, [r2, #16]
}
 80003b8:	bf00      	nop
 80003ba:	46bd      	mov	sp, r7
 80003bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c0:	4770      	bx	lr
 80003c2:	bf00      	nop
 80003c4:	40023800 	.word	0x40023800
 80003c8:	40040000 	.word	0x40040000
 80003cc:	40040800 	.word	0x40040800
 80003d0:	800c3818 	.word	0x800c3818

080003d4 <set_device_address>:
 * @parem[in]		- address
 * @return			- none
 * @note			- none
 */
static void set_device_address(uint8_t address)
{
 80003d4:	b480      	push	{r7}
 80003d6:	b083      	sub	sp, #12
 80003d8:	af00      	add	r7, sp, #0
 80003da:	4603      	mov	r3, r0
 80003dc:	71fb      	strb	r3, [r7, #7]
    MODIFY_REG(
 80003de:	4b08      	ldr	r3, [pc, #32]	; (8000400 <set_device_address+0x2c>)
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	f423 62fe 	bic.w	r2, r3, #2032	; 0x7f0
 80003e6:	79fb      	ldrb	r3, [r7, #7]
 80003e8:	011b      	lsls	r3, r3, #4
 80003ea:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80003ee:	4904      	ldr	r1, [pc, #16]	; (8000400 <set_device_address+0x2c>)
 80003f0:	4313      	orrs	r3, r2
 80003f2:	600b      	str	r3, [r1, #0]
		USB_OTG_HS_DEVICE->DCFG,
		USB_OTG_DCFG_DAD,
		_VAL2FLD(USB_OTG_DCFG_DAD, address)
	);
}
 80003f4:	bf00      	nop
 80003f6:	370c      	adds	r7, #12
 80003f8:	46bd      	mov	sp, r7
 80003fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fe:	4770      	bx	lr
 8000400:	40040800 	.word	0x40040800

08000404 <connect>:
 * @parem[in]		- none
 * @return			- none
 * @note			- none
 */
static void connect()
{
 8000404:	b480      	push	{r7}
 8000406:	af00      	add	r7, sp, #0
	// Powers the transceivers on.
    SET_BIT(USB_OTG_HS->GCCFG, USB_OTG_GCCFG_PWRDWN);
 8000408:	4b08      	ldr	r3, [pc, #32]	; (800042c <connect+0x28>)
 800040a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800040c:	4a07      	ldr	r2, [pc, #28]	; (800042c <connect+0x28>)
 800040e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000412:	6393      	str	r3, [r2, #56]	; 0x38

	// Connects the device to the bus.
    CLEAR_BIT(USB_OTG_HS_DEVICE->DCTL, USB_OTG_DCTL_SDIS);
 8000414:	4b06      	ldr	r3, [pc, #24]	; (8000430 <connect+0x2c>)
 8000416:	685b      	ldr	r3, [r3, #4]
 8000418:	4a05      	ldr	r2, [pc, #20]	; (8000430 <connect+0x2c>)
 800041a:	f023 0302 	bic.w	r3, r3, #2
 800041e:	6053      	str	r3, [r2, #4]
}
 8000420:	bf00      	nop
 8000422:	46bd      	mov	sp, r7
 8000424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000428:	4770      	bx	lr
 800042a:	bf00      	nop
 800042c:	40040000 	.word	0x40040000
 8000430:	40040800 	.word	0x40040800

08000434 <disconnect>:
 * @parem[in]		- none
 * @return			- none
 * @note			- none
 */
static void disconnect()
{
 8000434:	b480      	push	{r7}
 8000436:	af00      	add	r7, sp, #0
	// Disconnects the device from the bus.
	SET_BIT(USB_OTG_HS_DEVICE->DCTL, USB_OTG_DCTL_SDIS);
 8000438:	4b08      	ldr	r3, [pc, #32]	; (800045c <disconnect+0x28>)
 800043a:	685b      	ldr	r3, [r3, #4]
 800043c:	4a07      	ldr	r2, [pc, #28]	; (800045c <disconnect+0x28>)
 800043e:	f043 0302 	orr.w	r3, r3, #2
 8000442:	6053      	str	r3, [r2, #4]

	// Powers the transceivers off.
	CLEAR_BIT(USB_OTG_HS->GCCFG, USB_OTG_GCCFG_PWRDWN);
 8000444:	4b06      	ldr	r3, [pc, #24]	; (8000460 <disconnect+0x2c>)
 8000446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000448:	4a05      	ldr	r2, [pc, #20]	; (8000460 <disconnect+0x2c>)
 800044a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800044e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000450:	bf00      	nop
 8000452:	46bd      	mov	sp, r7
 8000454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000458:	4770      	bx	lr
 800045a:	bf00      	nop
 800045c:	40040800 	.word	0x40040800
 8000460:	40040000 	.word	0x40040000

08000464 <read_packet>:
 * @parem[in]		- size in bytes
 * @return			- none
 * @note			-
 */
static void read_packet(void *buffer, uint16_t size)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b086      	sub	sp, #24
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]
 800046c:	460b      	mov	r3, r1
 800046e:	807b      	strh	r3, [r7, #2]
	// Note: There is only one RxFIFO.
	uint32_t *fifo = FIFO(0);
 8000470:	2000      	movs	r0, #0
 8000472:	f7ff ff31 	bl	80002d8 <FIFO>
 8000476:	6138      	str	r0, [r7, #16]

	for (; size >= 4; size -=4, buffer += 4)
 8000478:	e00b      	b.n	8000492 <read_packet+0x2e>
	{
		// Pops one 32-bit word of data (until there is less than one word remaining).
		uint32_t data = *fifo;
 800047a:	693b      	ldr	r3, [r7, #16]
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	60fb      	str	r3, [r7, #12]
		// Stores the data in the buffer.
		*((uint32_t*)buffer) = data;
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	68fa      	ldr	r2, [r7, #12]
 8000484:	601a      	str	r2, [r3, #0]
	for (; size >= 4; size -=4, buffer += 4)
 8000486:	887b      	ldrh	r3, [r7, #2]
 8000488:	3b04      	subs	r3, #4
 800048a:	807b      	strh	r3, [r7, #2]
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	3304      	adds	r3, #4
 8000490:	607b      	str	r3, [r7, #4]
 8000492:	887b      	ldrh	r3, [r7, #2]
 8000494:	2b03      	cmp	r3, #3
 8000496:	d8f0      	bhi.n	800047a <read_packet+0x16>
	}

	if (size > 0)
 8000498:	887b      	ldrh	r3, [r7, #2]
 800049a:	2b00      	cmp	r3, #0
 800049c:	d013      	beq.n	80004c6 <read_packet+0x62>
	{
		// Pops the last remaining bytes (which are less than one word).
		uint32_t data = *fifo;
 800049e:	693b      	ldr	r3, [r7, #16]
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	617b      	str	r3, [r7, #20]

		for(; size > 0; size--, buffer++, data >>= 8)
 80004a4:	e00c      	b.n	80004c0 <read_packet+0x5c>
		{
			// Stores the data in the buffer with the correct alignment.
			*((uint8_t*)buffer) = 0xFF & data;
 80004a6:	697b      	ldr	r3, [r7, #20]
 80004a8:	b2da      	uxtb	r2, r3
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	701a      	strb	r2, [r3, #0]
		for(; size > 0; size--, buffer++, data >>= 8)
 80004ae:	887b      	ldrh	r3, [r7, #2]
 80004b0:	3b01      	subs	r3, #1
 80004b2:	807b      	strh	r3, [r7, #2]
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	3301      	adds	r3, #1
 80004b8:	607b      	str	r3, [r7, #4]
 80004ba:	697b      	ldr	r3, [r7, #20]
 80004bc:	0a1b      	lsrs	r3, r3, #8
 80004be:	617b      	str	r3, [r7, #20]
 80004c0:	887b      	ldrh	r3, [r7, #2]
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d1ef      	bne.n	80004a6 <read_packet+0x42>
		}
	}
}
 80004c6:	bf00      	nop
 80004c8:	3718      	adds	r7, #24
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}

080004ce <write_packet>:
 * @parem[in]		- size in bytes
 * @return			- none
 * @note			-
 */
static void write_packet(uint8_t endpoint_number, void const *buffer, uint16_t size)
{
 80004ce:	b580      	push	{r7, lr}
 80004d0:	b084      	sub	sp, #16
 80004d2:	af00      	add	r7, sp, #0
 80004d4:	4603      	mov	r3, r0
 80004d6:	6039      	str	r1, [r7, #0]
 80004d8:	71fb      	strb	r3, [r7, #7]
 80004da:	4613      	mov	r3, r2
 80004dc:	80bb      	strh	r3, [r7, #4]
	uint32_t *fifo = FIFO(endpoint_number);
 80004de:	79fb      	ldrb	r3, [r7, #7]
 80004e0:	4618      	mov	r0, r3
 80004e2:	f7ff fef9 	bl	80002d8 <FIFO>
 80004e6:	60f8      	str	r0, [r7, #12]
	USB_OTG_INEndpointTypeDef *in_endpoint = IN_ENDPOINT(endpoint_number);
 80004e8:	79fb      	ldrb	r3, [r7, #7]
 80004ea:	4618      	mov	r0, r3
 80004ec:	f7ff fed0 	bl	8000290 <IN_ENDPOINT>
 80004f0:	60b8      	str	r0, [r7, #8]

	// Configures the number of packets to 1
	MODIFY_REG(in_endpoint->DIEPTSIZ,USB_OTG_DIEPTSIZ_PKTCNT,_VAL2FLD(USB_OTG_DIEPTSIZ_PKTCNT, 1));
 80004f2:	68bb      	ldr	r3, [r7, #8]
 80004f4:	691b      	ldr	r3, [r3, #16]
 80004f6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80004fa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80004fe:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000502:	68bb      	ldr	r3, [r7, #8]
 8000504:	611a      	str	r2, [r3, #16]
	//Configure number of bytes in the packet
	MODIFY_REG(in_endpoint->DIEPTSIZ,USB_OTG_DIEPTSIZ_XFRSIZ,_VAL2FLD(USB_OTG_DIEPTSIZ_XFRSIZ, size));
 8000506:	68bb      	ldr	r3, [r7, #8]
 8000508:	691b      	ldr	r3, [r3, #16]
 800050a:	0cdb      	lsrs	r3, r3, #19
 800050c:	04db      	lsls	r3, r3, #19
 800050e:	88ba      	ldrh	r2, [r7, #4]
 8000510:	431a      	orrs	r2, r3
 8000512:	68bb      	ldr	r3, [r7, #8]
 8000514:	611a      	str	r2, [r3, #16]
		USB_OTG_DIEPTSIZ_PKTCNT | USB_OTG_DIEPTSIZ_XFRSIZ,
		_VAL2FLD(USB_OTG_DIEPTSIZ_PKTCNT, 1) | _VAL2FLD(USB_OTG_DIEPTSIZ_XFRSIZ, size)
	);*/

	// Enables the transmission after clearing both STALL and NAK of the endpoint.
	MODIFY_REG(in_endpoint->DIEPCTL,USB_OTG_DIEPCTL_STALL,USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8000516:	68bb      	ldr	r3, [r7, #8]
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	f023 4304 	bic.w	r3, r3, #2214592512	; 0x84000000
 800051e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000522:	f043 4204 	orr.w	r2, r3, #2214592512	; 0x84000000
 8000526:	68bb      	ldr	r3, [r7, #8]
 8000528:	601a      	str	r2, [r3, #0]

	// Gets the size in term of 32-bit words (to avoid integer overflow in the loop).
	size = (size + 3) / 4;
 800052a:	88bb      	ldrh	r3, [r7, #4]
 800052c:	3303      	adds	r3, #3
 800052e:	2b00      	cmp	r3, #0
 8000530:	da00      	bge.n	8000534 <write_packet+0x66>
 8000532:	3303      	adds	r3, #3
 8000534:	109b      	asrs	r3, r3, #2
 8000536:	80bb      	strh	r3, [r7, #4]

	for (; size > 0; size--, buffer += 4)
 8000538:	e009      	b.n	800054e <write_packet+0x80>
	{
		// Pushes the data to the TxFIFO.
		*fifo = *((uint32_t *)buffer);
 800053a:	683b      	ldr	r3, [r7, #0]
 800053c:	681a      	ldr	r2, [r3, #0]
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	601a      	str	r2, [r3, #0]
	for (; size > 0; size--, buffer += 4)
 8000542:	88bb      	ldrh	r3, [r7, #4]
 8000544:	3b01      	subs	r3, #1
 8000546:	80bb      	strh	r3, [r7, #4]
 8000548:	683b      	ldr	r3, [r7, #0]
 800054a:	3304      	adds	r3, #4
 800054c:	603b      	str	r3, [r7, #0]
 800054e:	88bb      	ldrh	r3, [r7, #4]
 8000550:	2b00      	cmp	r3, #0
 8000552:	d1f2      	bne.n	800053a <write_packet+0x6c>
	}
}
 8000554:	bf00      	nop
 8000556:	3710      	adds	r7, #16
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}

0800055c <refresh_fifo_start_addresses>:
static void refresh_fifo_start_addresses()
{
 800055c:	b480      	push	{r7}
 800055e:	b083      	sub	sp, #12
 8000560:	af00      	add	r7, sp, #0
	// The first changeable start address begins after the region of RxFIFO.
	uint16_t start_address = _FLD2VAL(USB_OTG_GRXFSIZ_RXFD, USB_OTG_HS->GRXFSIZ) * 4;
 8000562:	4b21      	ldr	r3, [pc, #132]	; (80005e8 <refresh_fifo_start_addresses+0x8c>)
 8000564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000566:	b29b      	uxth	r3, r3
 8000568:	009b      	lsls	r3, r3, #2
 800056a:	80fb      	strh	r3, [r7, #6]

	// Updates the start address of the TxFIFO0.
	MODIFY_REG(USB_OTG_HS->DIEPTXF0_HNPTXFSIZ,
 800056c:	4b1e      	ldr	r3, [pc, #120]	; (80005e8 <refresh_fifo_start_addresses+0x8c>)
 800056e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000570:	0c1b      	lsrs	r3, r3, #16
 8000572:	041b      	lsls	r3, r3, #16
 8000574:	88fa      	ldrh	r2, [r7, #6]
 8000576:	491c      	ldr	r1, [pc, #112]	; (80005e8 <refresh_fifo_start_addresses+0x8c>)
 8000578:	4313      	orrs	r3, r2
 800057a:	628b      	str	r3, [r1, #40]	; 0x28
		USB_OTG_TX0FSA,
		_VAL2FLD(USB_OTG_TX0FSA, start_address)
	);

	// The next start address is after where the last TxFIFO ends.
	start_address += _FLD2VAL(USB_OTG_TX0FD, USB_OTG_HS->DIEPTXF0_HNPTXFSIZ) * 4;
 800057c:	4b1a      	ldr	r3, [pc, #104]	; (80005e8 <refresh_fifo_start_addresses+0x8c>)
 800057e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000580:	0c1b      	lsrs	r3, r3, #16
 8000582:	b29b      	uxth	r3, r3
 8000584:	009b      	lsls	r3, r3, #2
 8000586:	b29a      	uxth	r2, r3
 8000588:	88fb      	ldrh	r3, [r7, #6]
 800058a:	4413      	add	r3, r2
 800058c:	80fb      	strh	r3, [r7, #6]

	// Updates the start addresses of the rest TxFIFOs.
	for (uint8_t txfifo_number = 0; txfifo_number < ENDPOINT_COUNT - 1; txfifo_number++)
 800058e:	2300      	movs	r3, #0
 8000590:	717b      	strb	r3, [r7, #5]
 8000592:	e020      	b.n	80005d6 <refresh_fifo_start_addresses+0x7a>
	{
		MODIFY_REG(USB_OTG_HS->DIEPTXF[txfifo_number],
 8000594:	4a14      	ldr	r2, [pc, #80]	; (80005e8 <refresh_fifo_start_addresses+0x8c>)
 8000596:	797b      	ldrb	r3, [r7, #5]
 8000598:	3340      	adds	r3, #64	; 0x40
 800059a:	009b      	lsls	r3, r3, #2
 800059c:	4413      	add	r3, r2
 800059e:	685b      	ldr	r3, [r3, #4]
 80005a0:	0c1b      	lsrs	r3, r3, #16
 80005a2:	041b      	lsls	r3, r3, #16
 80005a4:	88fa      	ldrh	r2, [r7, #6]
 80005a6:	4810      	ldr	r0, [pc, #64]	; (80005e8 <refresh_fifo_start_addresses+0x8c>)
 80005a8:	7979      	ldrb	r1, [r7, #5]
 80005aa:	431a      	orrs	r2, r3
 80005ac:	f101 0340 	add.w	r3, r1, #64	; 0x40
 80005b0:	009b      	lsls	r3, r3, #2
 80005b2:	4403      	add	r3, r0
 80005b4:	605a      	str	r2, [r3, #4]
			USB_OTG_NPTXFSA,
			_VAL2FLD(USB_OTG_NPTXFSA, start_address)
		);

		start_address += _FLD2VAL(USB_OTG_NPTXFD, USB_OTG_HS->DIEPTXF[txfifo_number]) * 4;
 80005b6:	4a0c      	ldr	r2, [pc, #48]	; (80005e8 <refresh_fifo_start_addresses+0x8c>)
 80005b8:	797b      	ldrb	r3, [r7, #5]
 80005ba:	3340      	adds	r3, #64	; 0x40
 80005bc:	009b      	lsls	r3, r3, #2
 80005be:	4413      	add	r3, r2
 80005c0:	685b      	ldr	r3, [r3, #4]
 80005c2:	0c1b      	lsrs	r3, r3, #16
 80005c4:	b29b      	uxth	r3, r3
 80005c6:	009b      	lsls	r3, r3, #2
 80005c8:	b29a      	uxth	r2, r3
 80005ca:	88fb      	ldrh	r3, [r7, #6]
 80005cc:	4413      	add	r3, r2
 80005ce:	80fb      	strh	r3, [r7, #6]
	for (uint8_t txfifo_number = 0; txfifo_number < ENDPOINT_COUNT - 1; txfifo_number++)
 80005d0:	797b      	ldrb	r3, [r7, #5]
 80005d2:	3301      	adds	r3, #1
 80005d4:	717b      	strb	r3, [r7, #5]
 80005d6:	797b      	ldrb	r3, [r7, #5]
 80005d8:	2b04      	cmp	r3, #4
 80005da:	d9db      	bls.n	8000594 <refresh_fifo_start_addresses+0x38>
	}
}
 80005dc:	bf00      	nop
 80005de:	370c      	adds	r7, #12
 80005e0:	46bd      	mov	sp, r7
 80005e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e6:	4770      	bx	lr
 80005e8:	40040000 	.word	0x40040000

080005ec <configure_rxfifo_size>:
 * @parem[in]		- sizein bytes
 * @return			- none
 * @note			- none
 */
static void configure_rxfifo_size(uint16_t size)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	4603      	mov	r3, r0
 80005f4:	80fb      	strh	r3, [r7, #6]
	// Considers the space required to save status packets in RxFIFO and gets the size in term of 32-bit words.
	size = 10 + (2 * ((size / 4) + 1));
 80005f6:	88fb      	ldrh	r3, [r7, #6]
 80005f8:	089b      	lsrs	r3, r3, #2
 80005fa:	b29b      	uxth	r3, r3
 80005fc:	3306      	adds	r3, #6
 80005fe:	b29b      	uxth	r3, r3
 8000600:	005b      	lsls	r3, r3, #1
 8000602:	80fb      	strh	r3, [r7, #6]

	// Configures the depth of the FIFO.
	MODIFY_REG(USB_OTG_HS->GRXFSIZ,
 8000604:	4b06      	ldr	r3, [pc, #24]	; (8000620 <configure_rxfifo_size+0x34>)
 8000606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000608:	0c1b      	lsrs	r3, r3, #16
 800060a:	041b      	lsls	r3, r3, #16
 800060c:	88fa      	ldrh	r2, [r7, #6]
 800060e:	4904      	ldr	r1, [pc, #16]	; (8000620 <configure_rxfifo_size+0x34>)
 8000610:	4313      	orrs	r3, r2
 8000612:	624b      	str	r3, [r1, #36]	; 0x24
		USB_OTG_GRXFSIZ_RXFD,
		_VAL2FLD(USB_OTG_GRXFSIZ_RXFD, size)
	);

	refresh_fifo_start_addresses();
 8000614:	f7ff ffa2 	bl	800055c <refresh_fifo_start_addresses>
}
 8000618:	bf00      	nop
 800061a:	3708      	adds	r7, #8
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	40040000 	.word	0x40040000

08000624 <configure_txfifo_size>:
 * @return			- none
 * @note			- Any change on any FIFO will update the the registers of all TxFIFOs
 * 					 to adapt the start offsets in the FIFO dedicated memory.
 */
static void configure_txfifo_size(uint8_t endpoint_number, uint16_t size)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
 800062a:	4603      	mov	r3, r0
 800062c:	460a      	mov	r2, r1
 800062e:	71fb      	strb	r3, [r7, #7]
 8000630:	4613      	mov	r3, r2
 8000632:	80bb      	strh	r3, [r7, #4]
	// Gets the FIFO size in term of 32-bit words.
	size = (size + 3) / 4;
 8000634:	88bb      	ldrh	r3, [r7, #4]
 8000636:	3303      	adds	r3, #3
 8000638:	2b00      	cmp	r3, #0
 800063a:	da00      	bge.n	800063e <configure_txfifo_size+0x1a>
 800063c:	3303      	adds	r3, #3
 800063e:	109b      	asrs	r3, r3, #2
 8000640:	80bb      	strh	r3, [r7, #4]

	// Configures the depth of the TxFIFO.
	if (endpoint_number == 0)
 8000642:	79fb      	ldrb	r3, [r7, #7]
 8000644:	2b00      	cmp	r3, #0
 8000646:	d108      	bne.n	800065a <configure_txfifo_size+0x36>
	{
		MODIFY_REG(USB_OTG_HS->DIEPTXF0_HNPTXFSIZ,
 8000648:	4b10      	ldr	r3, [pc, #64]	; (800068c <configure_txfifo_size+0x68>)
 800064a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800064c:	b29a      	uxth	r2, r3
 800064e:	88bb      	ldrh	r3, [r7, #4]
 8000650:	041b      	lsls	r3, r3, #16
 8000652:	490e      	ldr	r1, [pc, #56]	; (800068c <configure_txfifo_size+0x68>)
 8000654:	4313      	orrs	r3, r2
 8000656:	628b      	str	r3, [r1, #40]	; 0x28
 8000658:	e011      	b.n	800067e <configure_txfifo_size+0x5a>
			_VAL2FLD(USB_OTG_TX0FD, size)
		);
	}
	else
	{
		MODIFY_REG(USB_OTG_HS->DIEPTXF[endpoint_number - 1],
 800065a:	4a0c      	ldr	r2, [pc, #48]	; (800068c <configure_txfifo_size+0x68>)
 800065c:	79fb      	ldrb	r3, [r7, #7]
 800065e:	3b01      	subs	r3, #1
 8000660:	3340      	adds	r3, #64	; 0x40
 8000662:	009b      	lsls	r3, r3, #2
 8000664:	4413      	add	r3, r2
 8000666:	685b      	ldr	r3, [r3, #4]
 8000668:	b299      	uxth	r1, r3
 800066a:	88bb      	ldrh	r3, [r7, #4]
 800066c:	041a      	lsls	r2, r3, #16
 800066e:	4807      	ldr	r0, [pc, #28]	; (800068c <configure_txfifo_size+0x68>)
 8000670:	79fb      	ldrb	r3, [r7, #7]
 8000672:	3b01      	subs	r3, #1
 8000674:	430a      	orrs	r2, r1
 8000676:	3340      	adds	r3, #64	; 0x40
 8000678:	009b      	lsls	r3, r3, #2
 800067a:	4403      	add	r3, r0
 800067c:	605a      	str	r2, [r3, #4]
			USB_OTG_NPTXFD,
			_VAL2FLD(USB_OTG_NPTXFD, size)
		);
	}

	refresh_fifo_start_addresses();
 800067e:	f7ff ff6d 	bl	800055c <refresh_fifo_start_addresses>
}
 8000682:	bf00      	nop
 8000684:	3708      	adds	r7, #8
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	40040000 	.word	0x40040000

08000690 <flush_rxfifo>:
 * @parem[in]		- none
 * @return			- none
 * @note			- none
 */
static void flush_rxfifo()
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
	SET_BIT(USB_OTG_HS->GRSTCTL, USB_OTG_GRSTCTL_RXFFLSH);
 8000694:	4b05      	ldr	r3, [pc, #20]	; (80006ac <flush_rxfifo+0x1c>)
 8000696:	691b      	ldr	r3, [r3, #16]
 8000698:	4a04      	ldr	r2, [pc, #16]	; (80006ac <flush_rxfifo+0x1c>)
 800069a:	f043 0310 	orr.w	r3, r3, #16
 800069e:	6113      	str	r3, [r2, #16]
}
 80006a0:	bf00      	nop
 80006a2:	46bd      	mov	sp, r7
 80006a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop
 80006ac:	40040000 	.word	0x40040000

080006b0 <flush_txfifo>:
 * @parem[in]		- IN endpoint
 * @return			- none
 * @note			- none
 */
static void flush_txfifo(uint8_t endpoint_number)
{
 80006b0:	b480      	push	{r7}
 80006b2:	b083      	sub	sp, #12
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	4603      	mov	r3, r0
 80006b8:	71fb      	strb	r3, [r7, #7]
	// Sets the number of the TxFIFO to be flushed and then triggers the flush.
	MODIFY_REG(USB_OTG_HS->GRSTCTL,
 80006ba:	4b09      	ldr	r3, [pc, #36]	; (80006e0 <flush_txfifo+0x30>)
 80006bc:	691b      	ldr	r3, [r3, #16]
 80006be:	f423 62f8 	bic.w	r2, r3, #1984	; 0x7c0
 80006c2:	79fb      	ldrb	r3, [r7, #7]
 80006c4:	019b      	lsls	r3, r3, #6
 80006c6:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80006ca:	4313      	orrs	r3, r2
 80006cc:	4a04      	ldr	r2, [pc, #16]	; (80006e0 <flush_txfifo+0x30>)
 80006ce:	f043 0320 	orr.w	r3, r3, #32
 80006d2:	6113      	str	r3, [r2, #16]
		USB_OTG_GRSTCTL_TXFNUM,
		_VAL2FLD(USB_OTG_GRSTCTL_TXFNUM, endpoint_number) | USB_OTG_GRSTCTL_TXFFLSH
	);
}
 80006d4:	bf00      	nop
 80006d6:	370c      	adds	r7, #12
 80006d8:	46bd      	mov	sp, r7
 80006da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006de:	4770      	bx	lr
 80006e0:	40040000 	.word	0x40040000

080006e4 <configure_endpoint0>:
 * @parem[in]		- none
 * @return			- none
 * @note			- none
 */
static void configure_endpoint0(uint8_t endpoint_size)
{
 80006e4:	b5b0      	push	{r4, r5, r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	4603      	mov	r3, r0
 80006ec:	71fb      	strb	r3, [r7, #7]
	//Unmasks interrupts of endpoint0 IN (bit 0) /OUT (bit 16)
		SET_BIT(USB_OTG_HS_DEVICE->DAINTMSK,(1 << 0| 1 << 16));
 80006ee:	4b1b      	ldr	r3, [pc, #108]	; (800075c <configure_endpoint0+0x78>)
 80006f0:	69db      	ldr	r3, [r3, #28]
 80006f2:	4a1a      	ldr	r2, [pc, #104]	; (800075c <configure_endpoint0+0x78>)
 80006f4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80006f8:	61d3      	str	r3, [r2, #28]

		//Config max packet size,
		MODIFY_REG(IN_ENDPOINT(0)->DIEPCTL,USB_OTG_DIEPCTL_MPSIZ,_VAL2FLD(USB_OTG_DIEPCTL_MPSIZ,endpoint_size));
 80006fa:	2000      	movs	r0, #0
 80006fc:	f7ff fdc8 	bl	8000290 <IN_ENDPOINT>
 8000700:	4603      	mov	r3, r0
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	f423 64ff 	bic.w	r4, r3, #2040	; 0x7f8
 8000708:	f024 0407 	bic.w	r4, r4, #7
 800070c:	79fd      	ldrb	r5, [r7, #7]
 800070e:	2000      	movs	r0, #0
 8000710:	f7ff fdbe 	bl	8000290 <IN_ENDPOINT>
 8000714:	4602      	mov	r2, r0
 8000716:	ea44 0305 	orr.w	r3, r4, r5
 800071a:	6013      	str	r3, [r2, #0]

		//activate endpoint configuration and sets endpoint handshake to NAK (not ready to send data)
		SET_BIT(IN_ENDPOINT(0)->DIEPCTL,USB_OTG_DIEPCTL_USBAEP|USB_OTG_DIEPCTL_SNAK);
 800071c:	2000      	movs	r0, #0
 800071e:	f7ff fdb7 	bl	8000290 <IN_ENDPOINT>
 8000722:	4602      	mov	r2, r0
 8000724:	6813      	ldr	r3, [r2, #0]
 8000726:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800072a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800072e:	6013      	str	r3, [r2, #0]

		//Clear NAK and enables endpoint data transmission
		SET_BIT(OUT_ENDPOINT(0)->DOEPCTL,USB_OTG_DOEPCTL_EPENA|USB_OTG_DOEPCTL_CNAK);
 8000730:	2000      	movs	r0, #0
 8000732:	f7ff fdbf 	bl	80002b4 <OUT_ENDPOINT>
 8000736:	4603      	mov	r3, r0
 8000738:	681a      	ldr	r2, [r3, #0]
 800073a:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 800073e:	601a      	str	r2, [r3, #0]

		//USB Full speed devices has maximum packet size of 64 Bytes
		configure_rxfifo_size(64);
 8000740:	2040      	movs	r0, #64	; 0x40
 8000742:	f7ff ff53 	bl	80005ec <configure_rxfifo_size>
		configure_txfifo_size(0,endpoint_size);
 8000746:	79fb      	ldrb	r3, [r7, #7]
 8000748:	b29b      	uxth	r3, r3
 800074a:	4619      	mov	r1, r3
 800074c:	2000      	movs	r0, #0
 800074e:	f7ff ff69 	bl	8000624 <configure_txfifo_size>
}
 8000752:	bf00      	nop
 8000754:	3708      	adds	r7, #8
 8000756:	46bd      	mov	sp, r7
 8000758:	bdb0      	pop	{r4, r5, r7, pc}
 800075a:	bf00      	nop
 800075c:	40040800 	.word	0x40040800

08000760 <configure_in_endpoint>:
 * @parem[in]		- size of endpoint
 * @return			- none
 * @note			- none
 */
static void configure_in_endpoint(uint8_t endpoint_number, UsbEndpointType endpoint_type, uint16_t endpoint_size)
{
 8000760:	b590      	push	{r4, r7, lr}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
 8000766:	4603      	mov	r3, r0
 8000768:	71fb      	strb	r3, [r7, #7]
 800076a:	460b      	mov	r3, r1
 800076c:	71bb      	strb	r3, [r7, #6]
 800076e:	4613      	mov	r3, r2
 8000770:	80bb      	strh	r3, [r7, #4]
	// Unmasks all interrupts of the targeted IN endpoint.
	SET_BIT(USB_OTG_HS_DEVICE->DAINTMSK, 1 << endpoint_number);
 8000772:	4b1a      	ldr	r3, [pc, #104]	; (80007dc <configure_in_endpoint+0x7c>)
 8000774:	69db      	ldr	r3, [r3, #28]
 8000776:	79fa      	ldrb	r2, [r7, #7]
 8000778:	2101      	movs	r1, #1
 800077a:	fa01 f202 	lsl.w	r2, r1, r2
 800077e:	4611      	mov	r1, r2
 8000780:	4a16      	ldr	r2, [pc, #88]	; (80007dc <configure_in_endpoint+0x7c>)
 8000782:	430b      	orrs	r3, r1
 8000784:	61d3      	str	r3, [r2, #28]

	// Activates the endpoint, sets endpoint handshake to NAK (not ready to send data), sets DATA0 packet identifier,
	// configures its type, its maximum packet size, and assigns it a TxFIFO.
	MODIFY_REG(IN_ENDPOINT(endpoint_number)->DIEPCTL,
 8000786:	79fb      	ldrb	r3, [r7, #7]
 8000788:	4618      	mov	r0, r3
 800078a:	f7ff fd81 	bl	8000290 <IN_ENDPOINT>
 800078e:	4603      	mov	r3, r0
 8000790:	681a      	ldr	r2, [r3, #0]
 8000792:	4b13      	ldr	r3, [pc, #76]	; (80007e0 <configure_in_endpoint+0x80>)
 8000794:	4013      	ands	r3, r2
 8000796:	88ba      	ldrh	r2, [r7, #4]
 8000798:	f3c2 010a 	ubfx	r1, r2, #0, #11
 800079c:	79ba      	ldrb	r2, [r7, #6]
 800079e:	0492      	lsls	r2, r2, #18
 80007a0:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 80007a4:	4311      	orrs	r1, r2
 80007a6:	79fa      	ldrb	r2, [r7, #7]
 80007a8:	0592      	lsls	r2, r2, #22
 80007aa:	f002 7270 	and.w	r2, r2, #62914560	; 0x3c00000
 80007ae:	430a      	orrs	r2, r1
 80007b0:	ea43 0402 	orr.w	r4, r3, r2
 80007b4:	79fb      	ldrb	r3, [r7, #7]
 80007b6:	4618      	mov	r0, r3
 80007b8:	f7ff fd6a 	bl	8000290 <IN_ENDPOINT>
 80007bc:	4602      	mov	r2, r0
 80007be:	f044 53c0 	orr.w	r3, r4, #402653184	; 0x18000000
 80007c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007c6:	6013      	str	r3, [r2, #0]
		USB_OTG_DIEPCTL_MPSIZ | USB_OTG_DIEPCTL_EPTYP | USB_OTG_DIEPCTL_TXFNUM,
		USB_OTG_DIEPCTL_USBAEP | _VAL2FLD(USB_OTG_DIEPCTL_MPSIZ, endpoint_size) | USB_OTG_DIEPCTL_SNAK |
		_VAL2FLD(USB_OTG_DIEPCTL_EPTYP, endpoint_type) | _VAL2FLD(USB_OTG_DIEPCTL_TXFNUM, endpoint_number) | USB_OTG_DIEPCTL_SD0PID_SEVNFRM
	);

	configure_txfifo_size(endpoint_number, endpoint_size);
 80007c8:	88ba      	ldrh	r2, [r7, #4]
 80007ca:	79fb      	ldrb	r3, [r7, #7]
 80007cc:	4611      	mov	r1, r2
 80007ce:	4618      	mov	r0, r3
 80007d0:	f7ff ff28 	bl	8000624 <configure_txfifo_size>
}
 80007d4:	bf00      	nop
 80007d6:	370c      	adds	r7, #12
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd90      	pop	{r4, r7, pc}
 80007dc:	40040800 	.word	0x40040800
 80007e0:	fc33f800 	.word	0xfc33f800

080007e4 <deconfigure_endpoint>:
 * @parem[in]		- endpoint_number
 * @return			- none
 * @note			- none
 */
static void deconfigure_endpoint(uint8_t endpoint_number)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b084      	sub	sp, #16
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	4603      	mov	r3, r0
 80007ec:	71fb      	strb	r3, [r7, #7]
    USB_OTG_INEndpointTypeDef *in_endpoint = IN_ENDPOINT(endpoint_number);
 80007ee:	79fb      	ldrb	r3, [r7, #7]
 80007f0:	4618      	mov	r0, r3
 80007f2:	f7ff fd4d 	bl	8000290 <IN_ENDPOINT>
 80007f6:	60f8      	str	r0, [r7, #12]
    USB_OTG_OUTEndpointTypeDef *out_endpoint = OUT_ENDPOINT(endpoint_number);
 80007f8:	79fb      	ldrb	r3, [r7, #7]
 80007fa:	4618      	mov	r0, r3
 80007fc:	f7ff fd5a 	bl	80002b4 <OUT_ENDPOINT>
 8000800:	60b8      	str	r0, [r7, #8]

	// Masks all interrupts of the targeted IN and OUT endpoints.
	CLEAR_BIT(USB_OTG_HS_DEVICE->DAINTMSK,
 8000802:	4b26      	ldr	r3, [pc, #152]	; (800089c <deconfigure_endpoint+0xb8>)
 8000804:	69db      	ldr	r3, [r3, #28]
 8000806:	79fa      	ldrb	r2, [r7, #7]
 8000808:	2101      	movs	r1, #1
 800080a:	4091      	lsls	r1, r2
 800080c:	79fa      	ldrb	r2, [r7, #7]
 800080e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000812:	fa00 f202 	lsl.w	r2, r0, r2
 8000816:	430a      	orrs	r2, r1
 8000818:	43d2      	mvns	r2, r2
 800081a:	4611      	mov	r1, r2
 800081c:	4a1f      	ldr	r2, [pc, #124]	; (800089c <deconfigure_endpoint+0xb8>)
 800081e:	400b      	ands	r3, r1
 8000820:	61d3      	str	r3, [r2, #28]
		(1 << endpoint_number) | (1 << 16 << endpoint_number)
	);

	// Clears all interrupts of the endpoint.
	SET_BIT(in_endpoint->DIEPINT, 0x29FF);
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	689b      	ldr	r3, [r3, #8]
 8000826:	f443 5327 	orr.w	r3, r3, #10688	; 0x29c0
 800082a:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 800082e:	68fa      	ldr	r2, [r7, #12]
 8000830:	6093      	str	r3, [r2, #8]
    SET_BIT(out_endpoint->DOEPINT, 0x71FF);
 8000832:	68bb      	ldr	r3, [r7, #8]
 8000834:	689b      	ldr	r3, [r3, #8]
 8000836:	f443 43e3 	orr.w	r3, r3, #29056	; 0x7180
 800083a:	f043 037f 	orr.w	r3, r3, #127	; 0x7f
 800083e:	68ba      	ldr	r2, [r7, #8]
 8000840:	6093      	str	r3, [r2, #8]

	// Disables the endpoints if possible.
    if (in_endpoint->DIEPCTL & USB_OTG_DIEPCTL_EPENA)
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	2b00      	cmp	r3, #0
 8000848:	da05      	bge.n	8000856 <deconfigure_endpoint+0x72>
    {
		// Disables endpoint transmission.
		SET_BIT(in_endpoint->DIEPCTL, USB_OTG_DIEPCTL_EPDIS);
 800084a:	68fb      	ldr	r3, [r7, #12]
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	601a      	str	r2, [r3, #0]
    }

	// Deactivates the endpoint.
	CLEAR_BIT(in_endpoint->DIEPCTL, USB_OTG_DIEPCTL_USBAEP);
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	601a      	str	r2, [r3, #0]

    if (endpoint_number != 0)
 8000862:	79fb      	ldrb	r3, [r7, #7]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d00f      	beq.n	8000888 <deconfigure_endpoint+0xa4>
    {
		if (out_endpoint->DOEPCTL & USB_OTG_DOEPCTL_EPENA)
 8000868:	68bb      	ldr	r3, [r7, #8]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	2b00      	cmp	r3, #0
 800086e:	da05      	bge.n	800087c <deconfigure_endpoint+0x98>
		{
			// Disables endpoint transmission.
			SET_BIT(out_endpoint->DOEPCTL, USB_OTG_DOEPCTL_EPDIS);
 8000870:	68bb      	ldr	r3, [r7, #8]
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8000878:	68bb      	ldr	r3, [r7, #8]
 800087a:	601a      	str	r2, [r3, #0]
		}

		// Deactivates the endpoint.
		CLEAR_BIT(out_endpoint->DOEPCTL, USB_OTG_DOEPCTL_USBAEP);
 800087c:	68bb      	ldr	r3, [r7, #8]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000884:	68bb      	ldr	r3, [r7, #8]
 8000886:	601a      	str	r2, [r3, #0]
    }

	// Flushes the FIFOs.
	flush_txfifo(endpoint_number);
 8000888:	79fb      	ldrb	r3, [r7, #7]
 800088a:	4618      	mov	r0, r3
 800088c:	f7ff ff10 	bl	80006b0 <flush_txfifo>
	flush_rxfifo();
 8000890:	f7ff fefe 	bl	8000690 <flush_rxfifo>
}
 8000894:	bf00      	nop
 8000896:	3710      	adds	r7, #16
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	40040800 	.word	0x40040800

080008a0 <USBReset_handler>:
 * @parem[in]		- none
 * @return			- none
 * @note			- none
 */
static void USBReset_handler()
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
	log_info("USB reset signal was detected.");
 80008a6:	480b      	ldr	r0, [pc, #44]	; (80008d4 <USBReset_handler+0x34>)
 80008a8:	f000 fc24 	bl	80010f4 <log_info>

	for (uint8_t i = 0; i <= ENDPOINT_COUNT; i++)
 80008ac:	2300      	movs	r3, #0
 80008ae:	71fb      	strb	r3, [r7, #7]
 80008b0:	e006      	b.n	80008c0 <USBReset_handler+0x20>
	{
		deconfigure_endpoint(i);
 80008b2:	79fb      	ldrb	r3, [r7, #7]
 80008b4:	4618      	mov	r0, r3
 80008b6:	f7ff ff95 	bl	80007e4 <deconfigure_endpoint>
	for (uint8_t i = 0; i <= ENDPOINT_COUNT; i++)
 80008ba:	79fb      	ldrb	r3, [r7, #7]
 80008bc:	3301      	adds	r3, #1
 80008be:	71fb      	strb	r3, [r7, #7]
 80008c0:	79fb      	ldrb	r3, [r7, #7]
 80008c2:	2b06      	cmp	r3, #6
 80008c4:	d9f5      	bls.n	80008b2 <USBReset_handler+0x12>
	}

	usb_events.on_usb_reset_received();
 80008c6:	4b04      	ldr	r3, [pc, #16]	; (80008d8 <USBReset_handler+0x38>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	4798      	blx	r3
}
 80008cc:	bf00      	nop
 80008ce:	3708      	adds	r7, #8
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	0800233c 	.word	0x0800233c
 80008d8:	20000000 	.word	0x20000000

080008dc <EnumerationDone_handler>:
 * @parem[in]		- none
 * @return			- none
 * @note			- none
 */
static void EnumerationDone_handler()
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
	log_info("USB device speed enumeration done.");
 80008e0:	4803      	ldr	r0, [pc, #12]	; (80008f0 <EnumerationDone_handler+0x14>)
 80008e2:	f000 fc07 	bl	80010f4 <log_info>
	configure_endpoint0(8);
 80008e6:	2008      	movs	r0, #8
 80008e8:	f7ff fefc 	bl	80006e4 <configure_endpoint0>
}
 80008ec:	bf00      	nop
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	0800235c 	.word	0x0800235c

080008f4 <RxFifoNonEmpty_handler>:
 * @parem[in]		- none
 * @return			- none
 * @note			- none
 */
static void RxFifoNonEmpty_handler()
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b084      	sub	sp, #16
 80008f8:	af00      	add	r7, sp, #0
	 // Pops the status information word from the RxFIFO.
	uint32_t receive_status = USB_OTG_HS_GLOBAL->GRXSTSP;
 80008fa:	4b22      	ldr	r3, [pc, #136]	; (8000984 <RxFifoNonEmpty_handler+0x90>)
 80008fc:	6a1b      	ldr	r3, [r3, #32]
 80008fe:	60fb      	str	r3, [r7, #12]

	// The endpoint that received the data.
	uint8_t endpoint_number = _FLD2VAL(USB_OTG_GRXSTSP_EPNUM, receive_status);
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	b2db      	uxtb	r3, r3
 8000904:	f003 030f 	and.w	r3, r3, #15
 8000908:	72fb      	strb	r3, [r7, #11]
	// The count of bytes in the received packet.
	uint16_t bcnt = _FLD2VAL(USB_OTG_GRXSTSP_BCNT, receive_status);
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	091b      	lsrs	r3, r3, #4
 800090e:	b29b      	uxth	r3, r3
 8000910:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000914:	813b      	strh	r3, [r7, #8]
	// The status of the received packet.
	uint16_t pktsts = _FLD2VAL(USB_OTG_GRXSTSP_PKTSTS, receive_status);
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	0c5b      	lsrs	r3, r3, #17
 800091a:	b29b      	uxth	r3, r3
 800091c:	f003 030f 	and.w	r3, r3, #15
 8000920:	80fb      	strh	r3, [r7, #6]

	switch (pktsts)
 8000922:	88fb      	ldrh	r3, [r7, #6]
 8000924:	3b02      	subs	r3, #2
 8000926:	2b04      	cmp	r3, #4
 8000928:	d828      	bhi.n	800097c <RxFifoNonEmpty_handler+0x88>
 800092a:	a201      	add	r2, pc, #4	; (adr r2, 8000930 <RxFifoNonEmpty_handler+0x3c>)
 800092c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000930:	0800097b 	.word	0x0800097b
 8000934:	08000967 	.word	0x08000967
 8000938:	08000953 	.word	0x08000953
 800093c:	0800097d 	.word	0x0800097d
 8000940:	08000945 	.word	0x08000945
	{
	case 0x06: // SETUP packet (includes data).
    	usb_events.on_setup_data_received(endpoint_number, bcnt);
 8000944:	4b10      	ldr	r3, [pc, #64]	; (8000988 <RxFifoNonEmpty_handler+0x94>)
 8000946:	685b      	ldr	r3, [r3, #4]
 8000948:	8939      	ldrh	r1, [r7, #8]
 800094a:	7afa      	ldrb	r2, [r7, #11]
 800094c:	4610      	mov	r0, r2
 800094e:	4798      	blx	r3
    	break;
 8000950:	e014      	b.n	800097c <RxFifoNonEmpty_handler+0x88>
    case 0x02: // OUT packet (includes data).
    	// ToDo
		break;
    case 0x04: // SETUP stage has completed.
    	// Re-enables the transmission on the endpoint.
        SET_BIT(OUT_ENDPOINT(endpoint_number)->DOEPCTL,
 8000952:	7afb      	ldrb	r3, [r7, #11]
 8000954:	4618      	mov	r0, r3
 8000956:	f7ff fcad 	bl	80002b4 <OUT_ENDPOINT>
 800095a:	4603      	mov	r3, r0
 800095c:	681a      	ldr	r2, [r3, #0]
 800095e:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8000962:	601a      	str	r2, [r3, #0]
			USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
    	break;
 8000964:	e00a      	b.n	800097c <RxFifoNonEmpty_handler+0x88>
    case 0x03: // OUT transfer has completed.
    	// Re-enables the transmission on the endpoint.
        SET_BIT(OUT_ENDPOINT(endpoint_number)->DOEPCTL,
 8000966:	7afb      	ldrb	r3, [r7, #11]
 8000968:	4618      	mov	r0, r3
 800096a:	f7ff fca3 	bl	80002b4 <OUT_ENDPOINT>
 800096e:	4603      	mov	r3, r0
 8000970:	681a      	ldr	r2, [r3, #0]
 8000972:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8000976:	601a      	str	r2, [r3, #0]
			USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
    	break;
 8000978:	e000      	b.n	800097c <RxFifoNonEmpty_handler+0x88>
		break;
 800097a:	bf00      	nop
	}
}
 800097c:	bf00      	nop
 800097e:	3710      	adds	r7, #16
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	40040000 	.word	0x40040000
 8000988:	20000000 	.word	0x20000000

0800098c <INEndpoint_hander>:
 * @parem[in]		- none
 * @return			- none
 * @note			- none
 */
static void INEndpoint_hander()
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
	// Finds the endpoint caused the interrupt.
	uint8_t endpoint_number = ffs(USB_OTG_HS_DEVICE->DAINT) - 1;
 8000992:	4b12      	ldr	r3, [pc, #72]	; (80009dc <INEndpoint_hander+0x50>)
 8000994:	699b      	ldr	r3, [r3, #24]
 8000996:	4618      	mov	r0, r3
 8000998:	f000 fcbb 	bl	8001312 <ffs>
 800099c:	4603      	mov	r3, r0
 800099e:	b2db      	uxtb	r3, r3
 80009a0:	3b01      	subs	r3, #1
 80009a2:	71fb      	strb	r3, [r7, #7]

    if (IN_ENDPOINT(endpoint_number)->DIEPINT & USB_OTG_DIEPINT_XFRC)
 80009a4:	79fb      	ldrb	r3, [r7, #7]
 80009a6:	4618      	mov	r0, r3
 80009a8:	f7ff fc72 	bl	8000290 <IN_ENDPOINT>
 80009ac:	4603      	mov	r3, r0
 80009ae:	689b      	ldr	r3, [r3, #8]
 80009b0:	f003 0301 	and.w	r3, r3, #1
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d00d      	beq.n	80009d4 <INEndpoint_hander+0x48>
    {
        usb_events.on_in_transfer_completed(endpoint_number);
 80009b8:	4b09      	ldr	r3, [pc, #36]	; (80009e0 <INEndpoint_hander+0x54>)
 80009ba:	68db      	ldr	r3, [r3, #12]
 80009bc:	79fa      	ldrb	r2, [r7, #7]
 80009be:	4610      	mov	r0, r2
 80009c0:	4798      	blx	r3
        // Clears the interrupt flag.
        SET_BIT(IN_ENDPOINT(endpoint_number)->DIEPINT, USB_OTG_DIEPINT_XFRC);
 80009c2:	79fb      	ldrb	r3, [r7, #7]
 80009c4:	4618      	mov	r0, r3
 80009c6:	f7ff fc63 	bl	8000290 <IN_ENDPOINT>
 80009ca:	4603      	mov	r3, r0
 80009cc:	689a      	ldr	r2, [r3, #8]
 80009ce:	f042 0201 	orr.w	r2, r2, #1
 80009d2:	609a      	str	r2, [r3, #8]
    }
}
 80009d4:	bf00      	nop
 80009d6:	3708      	adds	r7, #8
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}
 80009dc:	40040800 	.word	0x40040800
 80009e0:	20000000 	.word	0x20000000

080009e4 <OUTEndpoint_hander>:
static void OUTEndpoint_hander()
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
	// Finds the endpoint caused the interrupt.
	uint8_t endpoint_number = ffs(USB_OTG_HS_DEVICE->DAINT >> 16) - 1;
 80009ea:	4b13      	ldr	r3, [pc, #76]	; (8000a38 <OUTEndpoint_hander+0x54>)
 80009ec:	699b      	ldr	r3, [r3, #24]
 80009ee:	0c1b      	lsrs	r3, r3, #16
 80009f0:	4618      	mov	r0, r3
 80009f2:	f000 fc8e 	bl	8001312 <ffs>
 80009f6:	4603      	mov	r3, r0
 80009f8:	b2db      	uxtb	r3, r3
 80009fa:	3b01      	subs	r3, #1
 80009fc:	71fb      	strb	r3, [r7, #7]

    if (OUT_ENDPOINT(endpoint_number)->DOEPINT & USB_OTG_DOEPINT_XFRC)
 80009fe:	79fb      	ldrb	r3, [r7, #7]
 8000a00:	4618      	mov	r0, r3
 8000a02:	f7ff fc57 	bl	80002b4 <OUT_ENDPOINT>
 8000a06:	4603      	mov	r3, r0
 8000a08:	689b      	ldr	r3, [r3, #8]
 8000a0a:	f003 0301 	and.w	r3, r3, #1
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d00d      	beq.n	8000a2e <OUTEndpoint_hander+0x4a>
    {
        usb_events.on_out_transfer_completed(endpoint_number);
 8000a12:	4b0a      	ldr	r3, [pc, #40]	; (8000a3c <OUTEndpoint_hander+0x58>)
 8000a14:	691b      	ldr	r3, [r3, #16]
 8000a16:	79fa      	ldrb	r2, [r7, #7]
 8000a18:	4610      	mov	r0, r2
 8000a1a:	4798      	blx	r3
        // Clears the interrupt;
        SET_BIT(OUT_ENDPOINT(endpoint_number)->DOEPINT, USB_OTG_DOEPINT_XFRC);
 8000a1c:	79fb      	ldrb	r3, [r7, #7]
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f7ff fc48 	bl	80002b4 <OUT_ENDPOINT>
 8000a24:	4603      	mov	r3, r0
 8000a26:	689a      	ldr	r2, [r3, #8]
 8000a28:	f042 0201 	orr.w	r2, r2, #1
 8000a2c:	609a      	str	r2, [r3, #8]
    }
}
 8000a2e:	bf00      	nop
 8000a30:	3708      	adds	r7, #8
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	40040800 	.word	0x40040800
 8000a3c:	20000000 	.word	0x20000000

08000a40 <USBInterrupt_handler>:
 * @parem[in]		- none
 * @return			- none
 * @note			- none
 */
static void USBInterrupt_handler()
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
	volatile uint32_t gintsts = USB_OTG_HS_GLOBAL->GINTSTS;
 8000a46:	4b27      	ldr	r3, [pc, #156]	; (8000ae4 <USBInterrupt_handler+0xa4>)
 8000a48:	695b      	ldr	r3, [r3, #20]
 8000a4a:	607b      	str	r3, [r7, #4]

	if (gintsts & USB_OTG_GINTSTS_USBRST)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d008      	beq.n	8000a68 <USBInterrupt_handler+0x28>
	{
		USBReset_handler();
 8000a56:	f7ff ff23 	bl	80008a0 <USBReset_handler>
		SET_BIT(USB_OTG_HS_GLOBAL->GINTSTS, USB_OTG_GINTSTS_USBRST);
 8000a5a:	4b22      	ldr	r3, [pc, #136]	; (8000ae4 <USBInterrupt_handler+0xa4>)
 8000a5c:	695b      	ldr	r3, [r3, #20]
 8000a5e:	4a21      	ldr	r2, [pc, #132]	; (8000ae4 <USBInterrupt_handler+0xa4>)
 8000a60:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a64:	6153      	str	r3, [r2, #20]
 8000a66:	e036      	b.n	8000ad6 <USBInterrupt_handler+0x96>
	}
	else if (gintsts & USB_OTG_GINTSTS_ENUMDNE)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d008      	beq.n	8000a84 <USBInterrupt_handler+0x44>
	{
		EnumerationDone_handler();
 8000a72:	f7ff ff33 	bl	80008dc <EnumerationDone_handler>
		SET_BIT(USB_OTG_HS_GLOBAL->GINTSTS, USB_OTG_GINTSTS_ENUMDNE);
 8000a76:	4b1b      	ldr	r3, [pc, #108]	; (8000ae4 <USBInterrupt_handler+0xa4>)
 8000a78:	695b      	ldr	r3, [r3, #20]
 8000a7a:	4a1a      	ldr	r2, [pc, #104]	; (8000ae4 <USBInterrupt_handler+0xa4>)
 8000a7c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000a80:	6153      	str	r3, [r2, #20]
 8000a82:	e028      	b.n	8000ad6 <USBInterrupt_handler+0x96>
	}
	else if (gintsts & USB_OTG_GINTSTS_RXFLVL)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	f003 0310 	and.w	r3, r3, #16
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d008      	beq.n	8000aa0 <USBInterrupt_handler+0x60>
	{
		RxFifoNonEmpty_handler();
 8000a8e:	f7ff ff31 	bl	80008f4 <RxFifoNonEmpty_handler>
		SET_BIT(USB_OTG_HS_GLOBAL->GINTSTS, USB_OTG_GINTSTS_RXFLVL);
 8000a92:	4b14      	ldr	r3, [pc, #80]	; (8000ae4 <USBInterrupt_handler+0xa4>)
 8000a94:	695b      	ldr	r3, [r3, #20]
 8000a96:	4a13      	ldr	r2, [pc, #76]	; (8000ae4 <USBInterrupt_handler+0xa4>)
 8000a98:	f043 0310 	orr.w	r3, r3, #16
 8000a9c:	6153      	str	r3, [r2, #20]
 8000a9e:	e01a      	b.n	8000ad6 <USBInterrupt_handler+0x96>
	}
	else if (gintsts & USB_OTG_GINTSTS_IEPINT)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d008      	beq.n	8000abc <USBInterrupt_handler+0x7c>
	{
		INEndpoint_hander();
 8000aaa:	f7ff ff6f 	bl	800098c <INEndpoint_hander>
		SET_BIT(USB_OTG_HS_GLOBAL->GINTSTS, USB_OTG_GINTSTS_IEPINT);
 8000aae:	4b0d      	ldr	r3, [pc, #52]	; (8000ae4 <USBInterrupt_handler+0xa4>)
 8000ab0:	695b      	ldr	r3, [r3, #20]
 8000ab2:	4a0c      	ldr	r2, [pc, #48]	; (8000ae4 <USBInterrupt_handler+0xa4>)
 8000ab4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ab8:	6153      	str	r3, [r2, #20]
 8000aba:	e00c      	b.n	8000ad6 <USBInterrupt_handler+0x96>
	}
	else if (gintsts & USB_OTG_GINTSTS_OEPINT)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d007      	beq.n	8000ad6 <USBInterrupt_handler+0x96>
	{
		OUTEndpoint_hander();
 8000ac6:	f7ff ff8d 	bl	80009e4 <OUTEndpoint_hander>
		SET_BIT(USB_OTG_HS_GLOBAL->GINTSTS, USB_OTG_GINTSTS_OEPINT);
 8000aca:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <USBInterrupt_handler+0xa4>)
 8000acc:	695b      	ldr	r3, [r3, #20]
 8000ace:	4a05      	ldr	r2, [pc, #20]	; (8000ae4 <USBInterrupt_handler+0xa4>)
 8000ad0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000ad4:	6153      	str	r3, [r2, #20]
	}

	usb_events.on_usb_polled();
 8000ad6:	4b04      	ldr	r3, [pc, #16]	; (8000ae8 <USBInterrupt_handler+0xa8>)
 8000ad8:	695b      	ldr	r3, [r3, #20]
 8000ada:	4798      	blx	r3
}
 8000adc:	bf00      	nop
 8000ade:	3708      	adds	r7, #8
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	40040000 	.word	0x40040000
 8000ae8:	20000000 	.word	0x20000000

08000aec <USB_Init>:
#include "Helpers/math.h"

static UsbDevice *usbd_handle;

void USB_Init(UsbDevice *usb_device)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
	usbd_handle = usb_device;
 8000af4:	4a07      	ldr	r2, [pc, #28]	; (8000b14 <USB_Init+0x28>)
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	6013      	str	r3, [r2, #0]
	usb_driver.USB_Gpio_Init();
 8000afa:	4b07      	ldr	r3, [pc, #28]	; (8000b18 <USB_Init+0x2c>)
 8000afc:	685b      	ldr	r3, [r3, #4]
 8000afe:	4798      	blx	r3
	usb_driver.USB_Core_Init();
 8000b00:	4b05      	ldr	r3, [pc, #20]	; (8000b18 <USB_Init+0x2c>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4798      	blx	r3
	usb_driver.connect();
 8000b06:	4b04      	ldr	r3, [pc, #16]	; (8000b18 <USB_Init+0x2c>)
 8000b08:	68db      	ldr	r3, [r3, #12]
 8000b0a:	4798      	blx	r3
}
 8000b0c:	bf00      	nop
 8000b0e:	3708      	adds	r7, #8
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	2000009c 	.word	0x2000009c
 8000b18:	08002640 	.word	0x08002640

08000b1c <usbd_poll>:
 * @parem[in]		- none
 * @return			- none
 * @note			- function is used for bus polling
 */
void usbd_poll()
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
	usb_driver.poll();
 8000b20:	4b02      	ldr	r3, [pc, #8]	; (8000b2c <usbd_poll+0x10>)
 8000b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b24:	4798      	blx	r3
}
 8000b26:	bf00      	nop
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	08002640 	.word	0x08002640

08000b30 <usb_reset_received_handler>:
 * @parem[in]		- none
 * @return			- none
 * @note			- none
 */
static void usb_reset_received_handler()
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
	usbd_handle->in_data_size = 0;
 8000b34:	4b0c      	ldr	r3, [pc, #48]	; (8000b68 <usb_reset_received_handler+0x38>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	2200      	movs	r2, #0
 8000b3a:	611a      	str	r2, [r3, #16]
	usbd_handle->out_data_size = 0;
 8000b3c:	4b0a      	ldr	r3, [pc, #40]	; (8000b68 <usb_reset_received_handler+0x38>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	2200      	movs	r2, #0
 8000b42:	609a      	str	r2, [r3, #8]
	usbd_handle->configuration_value = 0;
 8000b44:	4b08      	ldr	r3, [pc, #32]	; (8000b68 <usb_reset_received_handler+0x38>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	2200      	movs	r2, #0
 8000b4a:	709a      	strb	r2, [r3, #2]
	usbd_handle->device_state = USB_DEVICE_STATE_DEFAULT;
 8000b4c:	4b06      	ldr	r3, [pc, #24]	; (8000b68 <usb_reset_received_handler+0x38>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	2200      	movs	r2, #0
 8000b52:	701a      	strb	r2, [r3, #0]
	usbd_handle->control_transfer_stage = USB_CONTROL_STAGE_SETUP;
 8000b54:	4b04      	ldr	r3, [pc, #16]	; (8000b68 <usb_reset_received_handler+0x38>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	2200      	movs	r2, #0
 8000b5a:	705a      	strb	r2, [r3, #1]
	usb_driver.set_device_addr(0);
 8000b5c:	4b03      	ldr	r3, [pc, #12]	; (8000b6c <usb_reset_received_handler+0x3c>)
 8000b5e:	689b      	ldr	r3, [r3, #8]
 8000b60:	2000      	movs	r0, #0
 8000b62:	4798      	blx	r3
}
 8000b64:	bf00      	nop
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	2000009c 	.word	0x2000009c
 8000b6c:	08002640 	.word	0x08002640

08000b70 <usbd_configure>:

void usbd_configure()
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
	usb_driver.configure_in_endpoint(
 8000b74:	4b0b      	ldr	r3, [pc, #44]	; (8000ba4 <usbd_configure+0x34>)
 8000b76:	69db      	ldr	r3, [r3, #28]
		(configDescriptorCombination.usbMouseEndpointDescriptor.bEndpointAddress & 0x0F),
 8000b78:	2283      	movs	r2, #131	; 0x83
	usb_driver.configure_in_endpoint(
 8000b7a:	f002 020f 	and.w	r2, r2, #15
 8000b7e:	b2d0      	uxtb	r0, r2
		(configDescriptorCombination.usbMouseEndpointDescriptor.bmAttributes & 0x03),
 8000b80:	2203      	movs	r2, #3
 8000b82:	f002 0203 	and.w	r2, r2, #3
 8000b86:	b2d1      	uxtb	r1, r2
	usb_driver.configure_in_endpoint(
 8000b88:	2240      	movs	r2, #64	; 0x40
 8000b8a:	4798      	blx	r3
		configDescriptorCombination.usbMouseEndpointDescriptor.wMaxPacketSize
	);

	usb_driver.write_packet(
 8000b8c:	4b05      	ldr	r3, [pc, #20]	; (8000ba4 <usbd_configure+0x34>)
 8000b8e:	6a1b      	ldr	r3, [r3, #32]
		(configDescriptorCombination.usbMouseEndpointDescriptor.bEndpointAddress & 0x0F),
 8000b90:	2283      	movs	r2, #131	; 0x83
	usb_driver.write_packet(
 8000b92:	f002 020f 	and.w	r2, r2, #15
 8000b96:	b2d0      	uxtb	r0, r2
 8000b98:	2200      	movs	r2, #0
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	4798      	blx	r3
		NULL,
		0
	);
}
 8000b9e:	bf00      	nop
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	08002640 	.word	0x08002640

08000ba8 <process_standard_device_request>:
 * @parem[in]		- none
 * @return			- none
 * @note			- none
 */
static void process_standard_device_request()
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af00      	add	r7, sp, #0
	UsbRequest const *request = usbd_handle->ptr_out_buffer;
 8000bae:	4b3c      	ldr	r3, [pc, #240]	; (8000ca0 <process_standard_device_request+0xf8>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	60fb      	str	r3, [r7, #12]

	switch(request->bRequest)
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	785b      	ldrb	r3, [r3, #1]
 8000bba:	2b06      	cmp	r3, #6
 8000bbc:	d004      	beq.n	8000bc8 <process_standard_device_request+0x20>
 8000bbe:	2b09      	cmp	r3, #9
 8000bc0:	d052      	beq.n	8000c68 <process_standard_device_request+0xc0>
 8000bc2:	2b05      	cmp	r3, #5
 8000bc4:	d038      	beq.n	8000c38 <process_standard_device_request+0x90>
    	usbd_handle->device_state = USB_DEVICE_STATE_CONFIGURED;
		log_info("Switching control transfer stage to IN-STATUS.");
		usbd_handle->control_transfer_stage = USB_CONTROL_STAGE_STATUS_IN;
		break;
	}
}
 8000bc6:	e066      	b.n	8000c96 <process_standard_device_request+0xee>
		log_info("Standard Get Descriptor request received.");
 8000bc8:	4836      	ldr	r0, [pc, #216]	; (8000ca4 <process_standard_device_request+0xfc>)
 8000bca:	f000 fa93 	bl	80010f4 <log_info>
		const uint8_t descriptor_type = request->wValue >> 8;
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	885b      	ldrh	r3, [r3, #2]
 8000bd2:	0a1b      	lsrs	r3, r3, #8
 8000bd4:	b29b      	uxth	r3, r3
 8000bd6:	72fb      	strb	r3, [r7, #11]
		const uint16_t descriptor_length = request->wLength;
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	88db      	ldrh	r3, [r3, #6]
 8000bdc:	813b      	strh	r3, [r7, #8]
		switch(descriptor_type)
 8000bde:	7afb      	ldrb	r3, [r7, #11]
 8000be0:	2b01      	cmp	r3, #1
 8000be2:	d002      	beq.n	8000bea <process_standard_device_request+0x42>
 8000be4:	2b02      	cmp	r3, #2
 8000be6:	d013      	beq.n	8000c10 <process_standard_device_request+0x68>
		break;
 8000be8:	e055      	b.n	8000c96 <process_standard_device_request+0xee>
			log_info("- Get Device Descriptor.");
 8000bea:	482f      	ldr	r0, [pc, #188]	; (8000ca8 <process_standard_device_request+0x100>)
 8000bec:	f000 fa82 	bl	80010f4 <log_info>
			usbd_handle->ptr_in_buffer = &device_descriptor;
 8000bf0:	4b2b      	ldr	r3, [pc, #172]	; (8000ca0 <process_standard_device_request+0xf8>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a2d      	ldr	r2, [pc, #180]	; (8000cac <process_standard_device_request+0x104>)
 8000bf6:	60da      	str	r2, [r3, #12]
			usbd_handle->in_data_size = descriptor_length;
 8000bf8:	4b29      	ldr	r3, [pc, #164]	; (8000ca0 <process_standard_device_request+0xf8>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	893a      	ldrh	r2, [r7, #8]
 8000bfe:	611a      	str	r2, [r3, #16]
			log_info("Switching control transfer stage to IN-DATA.");
 8000c00:	482b      	ldr	r0, [pc, #172]	; (8000cb0 <process_standard_device_request+0x108>)
 8000c02:	f000 fa77 	bl	80010f4 <log_info>
			usbd_handle->control_transfer_stage = USB_CONTROL_STAGE_DATA_IN;
 8000c06:	4b26      	ldr	r3, [pc, #152]	; (8000ca0 <process_standard_device_request+0xf8>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	2202      	movs	r2, #2
 8000c0c:	705a      	strb	r2, [r3, #1]
			break;
 8000c0e:	e012      	b.n	8000c36 <process_standard_device_request+0x8e>
			log_info("- Get Configuration Descriptor.");
 8000c10:	4828      	ldr	r0, [pc, #160]	; (8000cb4 <process_standard_device_request+0x10c>)
 8000c12:	f000 fa6f 	bl	80010f4 <log_info>
			usbd_handle->ptr_in_buffer = &configDescriptorCombination;
 8000c16:	4b22      	ldr	r3, [pc, #136]	; (8000ca0 <process_standard_device_request+0xf8>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4a27      	ldr	r2, [pc, #156]	; (8000cb8 <process_standard_device_request+0x110>)
 8000c1c:	60da      	str	r2, [r3, #12]
			usbd_handle->in_data_size = descriptor_length;
 8000c1e:	4b20      	ldr	r3, [pc, #128]	; (8000ca0 <process_standard_device_request+0xf8>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	893a      	ldrh	r2, [r7, #8]
 8000c24:	611a      	str	r2, [r3, #16]
			log_info("Switching control transfer stage to IN-DATA.");
 8000c26:	4822      	ldr	r0, [pc, #136]	; (8000cb0 <process_standard_device_request+0x108>)
 8000c28:	f000 fa64 	bl	80010f4 <log_info>
			usbd_handle->control_transfer_stage = USB_CONTROL_STAGE_DATA_IN;
 8000c2c:	4b1c      	ldr	r3, [pc, #112]	; (8000ca0 <process_standard_device_request+0xf8>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	2202      	movs	r2, #2
 8000c32:	705a      	strb	r2, [r3, #1]
			break;
 8000c34:	bf00      	nop
		break;
 8000c36:	e02e      	b.n	8000c96 <process_standard_device_request+0xee>
		log_info("Standard Set Address request received.");
 8000c38:	4820      	ldr	r0, [pc, #128]	; (8000cbc <process_standard_device_request+0x114>)
 8000c3a:	f000 fa5b 	bl	80010f4 <log_info>
		const uint16_t device_address = request->wValue;
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	885b      	ldrh	r3, [r3, #2]
 8000c42:	80fb      	strh	r3, [r7, #6]
		usb_driver.set_device_addr(device_address);
 8000c44:	4b1e      	ldr	r3, [pc, #120]	; (8000cc0 <process_standard_device_request+0x118>)
 8000c46:	689b      	ldr	r3, [r3, #8]
 8000c48:	88fa      	ldrh	r2, [r7, #6]
 8000c4a:	b2d2      	uxtb	r2, r2
 8000c4c:	4610      	mov	r0, r2
 8000c4e:	4798      	blx	r3
		usbd_handle->device_state = USB_DEVICE_STATE_ADDRESSED;
 8000c50:	4b13      	ldr	r3, [pc, #76]	; (8000ca0 <process_standard_device_request+0xf8>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	2201      	movs	r2, #1
 8000c56:	701a      	strb	r2, [r3, #0]
		log_info("Switching control transfer stage to IN-STATUS.");
 8000c58:	481a      	ldr	r0, [pc, #104]	; (8000cc4 <process_standard_device_request+0x11c>)
 8000c5a:	f000 fa4b 	bl	80010f4 <log_info>
		usbd_handle->control_transfer_stage = USB_CONTROL_STAGE_STATUS_IN;
 8000c5e:	4b10      	ldr	r3, [pc, #64]	; (8000ca0 <process_standard_device_request+0xf8>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	2206      	movs	r2, #6
 8000c64:	705a      	strb	r2, [r3, #1]
		break;
 8000c66:	e016      	b.n	8000c96 <process_standard_device_request+0xee>
		log_info("Standard Set Configuration request received.");
 8000c68:	4817      	ldr	r0, [pc, #92]	; (8000cc8 <process_standard_device_request+0x120>)
 8000c6a:	f000 fa43 	bl	80010f4 <log_info>
    	usbd_handle->configuration_value = request->wValue;
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	885a      	ldrh	r2, [r3, #2]
 8000c72:	4b0b      	ldr	r3, [pc, #44]	; (8000ca0 <process_standard_device_request+0xf8>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	b2d2      	uxtb	r2, r2
 8000c78:	709a      	strb	r2, [r3, #2]
        usbd_configure();
 8000c7a:	f7ff ff79 	bl	8000b70 <usbd_configure>
    	usbd_handle->device_state = USB_DEVICE_STATE_CONFIGURED;
 8000c7e:	4b08      	ldr	r3, [pc, #32]	; (8000ca0 <process_standard_device_request+0xf8>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	2202      	movs	r2, #2
 8000c84:	701a      	strb	r2, [r3, #0]
		log_info("Switching control transfer stage to IN-STATUS.");
 8000c86:	480f      	ldr	r0, [pc, #60]	; (8000cc4 <process_standard_device_request+0x11c>)
 8000c88:	f000 fa34 	bl	80010f4 <log_info>
		usbd_handle->control_transfer_stage = USB_CONTROL_STAGE_STATUS_IN;
 8000c8c:	4b04      	ldr	r3, [pc, #16]	; (8000ca0 <process_standard_device_request+0xf8>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	2206      	movs	r2, #6
 8000c92:	705a      	strb	r2, [r3, #1]
		break;
 8000c94:	bf00      	nop
}
 8000c96:	bf00      	nop
 8000c98:	3710      	adds	r7, #16
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	2000009c 	.word	0x2000009c
 8000ca4:	08002380 	.word	0x08002380
 8000ca8:	080023ac 	.word	0x080023ac
 8000cac:	0800266c 	.word	0x0800266c
 8000cb0:	080023c8 	.word	0x080023c8
 8000cb4:	080023f8 	.word	0x080023f8
 8000cb8:	080026b0 	.word	0x080026b0
 8000cbc:	08002418 	.word	0x08002418
 8000cc0:	08002640 	.word	0x08002640
 8000cc4:	08002440 	.word	0x08002440
 8000cc8:	08002470 	.word	0x08002470

08000ccc <process_class_interface_request>:

static void process_class_interface_request()
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
	UsbRequest const *request = usbd_handle->ptr_out_buffer;
 8000cd2:	4b0a      	ldr	r3, [pc, #40]	; (8000cfc <process_class_interface_request+0x30>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	607b      	str	r3, [r7, #4]

	switch(request->bRequest)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	785b      	ldrb	r3, [r3, #1]
 8000cde:	2b0a      	cmp	r3, #10
 8000ce0:	d000      	beq.n	8000ce4 <process_class_interface_request+0x18>
	case USB_HID_SETIDLE:
        log_info("Switching control transfer stage to IN-STATUS.");
		usbd_handle->control_transfer_stage = USB_CONTROL_STAGE_STATUS_IN;
		break;
	}
}
 8000ce2:	e007      	b.n	8000cf4 <process_class_interface_request+0x28>
        log_info("Switching control transfer stage to IN-STATUS.");
 8000ce4:	4806      	ldr	r0, [pc, #24]	; (8000d00 <process_class_interface_request+0x34>)
 8000ce6:	f000 fa05 	bl	80010f4 <log_info>
		usbd_handle->control_transfer_stage = USB_CONTROL_STAGE_STATUS_IN;
 8000cea:	4b04      	ldr	r3, [pc, #16]	; (8000cfc <process_class_interface_request+0x30>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	2206      	movs	r2, #6
 8000cf0:	705a      	strb	r2, [r3, #1]
		break;
 8000cf2:	bf00      	nop
}
 8000cf4:	bf00      	nop
 8000cf6:	3708      	adds	r7, #8
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	2000009c 	.word	0x2000009c
 8000d00:	08002440 	.word	0x08002440

08000d04 <process_standard_interface_request>:

static void process_standard_interface_request()
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
	UsbRequest const *request = usbd_handle->ptr_out_buffer;
 8000d0a:	4b0f      	ldr	r3, [pc, #60]	; (8000d48 <process_standard_interface_request+0x44>)
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	607b      	str	r3, [r7, #4]

	switch (request->wValue >> 8)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	885b      	ldrh	r3, [r3, #2]
 8000d16:	0a1b      	lsrs	r3, r3, #8
 8000d18:	b29b      	uxth	r3, r3
 8000d1a:	2b22      	cmp	r3, #34	; 0x22
 8000d1c:	d000      	beq.n	8000d20 <process_standard_interface_request+0x1c>

		log_info("Switching control transfer stage to IN-STATUS.");
		usbd_handle->control_transfer_stage = USB_CONTROL_STAGE_DATA_IN;
		break;
	}
}
 8000d1e:	e00f      	b.n	8000d40 <process_standard_interface_request+0x3c>
		usbd_handle->ptr_in_buffer = &hid_report_descriptor;
 8000d20:	4b09      	ldr	r3, [pc, #36]	; (8000d48 <process_standard_interface_request+0x44>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a09      	ldr	r2, [pc, #36]	; (8000d4c <process_standard_interface_request+0x48>)
 8000d26:	60da      	str	r2, [r3, #12]
		usbd_handle->in_data_size = sizeof(hid_report_descriptor);
 8000d28:	4b07      	ldr	r3, [pc, #28]	; (8000d48 <process_standard_interface_request+0x44>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	2230      	movs	r2, #48	; 0x30
 8000d2e:	611a      	str	r2, [r3, #16]
		log_info("Switching control transfer stage to IN-STATUS.");
 8000d30:	4807      	ldr	r0, [pc, #28]	; (8000d50 <process_standard_interface_request+0x4c>)
 8000d32:	f000 f9df 	bl	80010f4 <log_info>
		usbd_handle->control_transfer_stage = USB_CONTROL_STAGE_DATA_IN;
 8000d36:	4b04      	ldr	r3, [pc, #16]	; (8000d48 <process_standard_interface_request+0x44>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	2202      	movs	r2, #2
 8000d3c:	705a      	strb	r2, [r3, #1]
		break;
 8000d3e:	bf00      	nop
}
 8000d40:	bf00      	nop
 8000d42:	3708      	adds	r7, #8
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	2000009c 	.word	0x2000009c
 8000d4c:	08002680 	.word	0x08002680
 8000d50:	08002440 	.word	0x08002440

08000d54 <process_request>:
 * @parem[in]		- none
 * @return			- none
 * @note			- none
 */
static void process_request()
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
	UsbRequest const *request = usbd_handle->ptr_out_buffer;
 8000d5a:	4b0e      	ldr	r3, [pc, #56]	; (8000d94 <process_request+0x40>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	685b      	ldr	r3, [r3, #4]
 8000d60:	607b      	str	r3, [r7, #4]

	switch(request->bmRequestType & (USB_BM_REQUEST_TYPE_TYPE_MASK | USB_BM_REQUEST_TYPE_RECIPIENT_MASK))
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	f003 0363 	and.w	r3, r3, #99	; 0x63
 8000d6a:	2b01      	cmp	r3, #1
 8000d6c:	d00a      	beq.n	8000d84 <process_request+0x30>
 8000d6e:	2b21      	cmp	r3, #33	; 0x21
 8000d70:	d005      	beq.n	8000d7e <process_request+0x2a>
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d000      	beq.n	8000d78 <process_request+0x24>
	break;
	case USB_BM_REQUEST_TYPE_TYPE_STANDARD | USB_BM_REQUEST_TYPE_RECIPIENT_INTERFACE:
		process_standard_interface_request();
	break;
	}
}
 8000d76:	e008      	b.n	8000d8a <process_request+0x36>
		process_standard_device_request();
 8000d78:	f7ff ff16 	bl	8000ba8 <process_standard_device_request>
	break;
 8000d7c:	e005      	b.n	8000d8a <process_request+0x36>
		process_class_interface_request();
 8000d7e:	f7ff ffa5 	bl	8000ccc <process_class_interface_request>
	break;
 8000d82:	e002      	b.n	8000d8a <process_request+0x36>
		process_standard_interface_request();
 8000d84:	f7ff ffbe 	bl	8000d04 <process_standard_interface_request>
	break;
 8000d88:	bf00      	nop
}
 8000d8a:	bf00      	nop
 8000d8c:	3708      	adds	r7, #8
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	2000009c 	.word	0x2000009c

08000d98 <process_control_transfer_stage>:
 * @parem[in]		- none
 * @return			- none
 * @note			- none
 */
static void process_control_transfer_stage()
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
	switch(usbd_handle->control_transfer_stage)
 8000d9e:	4b3c      	ldr	r3, [pc, #240]	; (8000e90 <process_control_transfer_stage+0xf8>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	785b      	ldrb	r3, [r3, #1]
 8000da4:	2b06      	cmp	r3, #6
 8000da6:	d86f      	bhi.n	8000e88 <process_control_transfer_stage+0xf0>
 8000da8:	a201      	add	r2, pc, #4	; (adr r2, 8000db0 <process_control_transfer_stage+0x18>)
 8000daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dae:	bf00      	nop
 8000db0:	08000e83 	.word	0x08000e83
 8000db4:	08000e89 	.word	0x08000e89
 8000db8:	08000dcd 	.word	0x08000dcd
 8000dbc:	08000e83 	.word	0x08000e83
 8000dc0:	08000e89 	.word	0x08000e89
 8000dc4:	08000e57 	.word	0x08000e57
 8000dc8:	08000e67 	.word	0x08000e67
	{
	case USB_CONTROL_STAGE_SETUP:
		break;
	case USB_CONTROL_STAGE_DATA_IN:
		log_info("Processing IN-DATA stage.");
 8000dcc:	4831      	ldr	r0, [pc, #196]	; (8000e94 <process_control_transfer_stage+0xfc>)
 8000dce:	f000 f991 	bl	80010f4 <log_info>

		uint8_t data_size = MIN(usbd_handle->in_data_size, device_descriptor.bMaxPacketSize0);
 8000dd2:	2308      	movs	r3, #8
 8000dd4:	461a      	mov	r2, r3
 8000dd6:	4b2e      	ldr	r3, [pc, #184]	; (8000e90 <process_control_transfer_stage+0xf8>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	691b      	ldr	r3, [r3, #16]
 8000ddc:	4293      	cmp	r3, r2
 8000dde:	bf28      	it	cs
 8000de0:	4613      	movcs	r3, r2
 8000de2:	71fb      	strb	r3, [r7, #7]

        usb_driver.write_packet(0, usbd_handle->ptr_in_buffer, data_size);
 8000de4:	4b2c      	ldr	r3, [pc, #176]	; (8000e98 <process_control_transfer_stage+0x100>)
 8000de6:	6a1b      	ldr	r3, [r3, #32]
 8000de8:	4a29      	ldr	r2, [pc, #164]	; (8000e90 <process_control_transfer_stage+0xf8>)
 8000dea:	6812      	ldr	r2, [r2, #0]
 8000dec:	68d1      	ldr	r1, [r2, #12]
 8000dee:	79fa      	ldrb	r2, [r7, #7]
 8000df0:	b292      	uxth	r2, r2
 8000df2:	2000      	movs	r0, #0
 8000df4:	4798      	blx	r3
        usbd_handle->in_data_size -= data_size;
 8000df6:	4b26      	ldr	r3, [pc, #152]	; (8000e90 <process_control_transfer_stage+0xf8>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	6919      	ldr	r1, [r3, #16]
 8000dfc:	79fa      	ldrb	r2, [r7, #7]
 8000dfe:	4b24      	ldr	r3, [pc, #144]	; (8000e90 <process_control_transfer_stage+0xf8>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	1a8a      	subs	r2, r1, r2
 8000e04:	611a      	str	r2, [r3, #16]
        usbd_handle->ptr_in_buffer += data_size;
 8000e06:	4b22      	ldr	r3, [pc, #136]	; (8000e90 <process_control_transfer_stage+0xf8>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	68d9      	ldr	r1, [r3, #12]
 8000e0c:	79fa      	ldrb	r2, [r7, #7]
 8000e0e:	4b20      	ldr	r3, [pc, #128]	; (8000e90 <process_control_transfer_stage+0xf8>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	440a      	add	r2, r1
 8000e14:	60da      	str	r2, [r3, #12]

		log_info("Switching control stage to IN-DATA IDLE.");
 8000e16:	4821      	ldr	r0, [pc, #132]	; (8000e9c <process_control_transfer_stage+0x104>)
 8000e18:	f000 f96c 	bl	80010f4 <log_info>
        usbd_handle->control_transfer_stage = USB_CONTROL_STAGE_DATA_IN_IDLE;
 8000e1c:	4b1c      	ldr	r3, [pc, #112]	; (8000e90 <process_control_transfer_stage+0xf8>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	2203      	movs	r2, #3
 8000e22:	705a      	strb	r2, [r3, #1]

        if (usbd_handle->in_data_size == 0)
 8000e24:	4b1a      	ldr	r3, [pc, #104]	; (8000e90 <process_control_transfer_stage+0xf8>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	691b      	ldr	r3, [r3, #16]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d12b      	bne.n	8000e86 <process_control_transfer_stage+0xee>
        {
        	if (data_size == device_descriptor.bMaxPacketSize0)
 8000e2e:	2208      	movs	r2, #8
 8000e30:	79fb      	ldrb	r3, [r7, #7]
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d107      	bne.n	8000e46 <process_control_transfer_stage+0xae>
        	{
        		log_info("Switching control stage to IN-DATA ZERO.");
 8000e36:	481a      	ldr	r0, [pc, #104]	; (8000ea0 <process_control_transfer_stage+0x108>)
 8000e38:	f000 f95c 	bl	80010f4 <log_info>
        		usbd_handle->control_transfer_stage = USB_CONTROL_STAGE_DATA_IN_ZERO;
 8000e3c:	4b14      	ldr	r3, [pc, #80]	; (8000e90 <process_control_transfer_stage+0xf8>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	2204      	movs	r2, #4
 8000e42:	705a      	strb	r2, [r3, #1]
        		log_info("Switching control stage to OUT-STATUS.");
        		usbd_handle->control_transfer_stage = USB_CONTROL_STAGE_STATUS_OUT;
        	}
        }

		break;
 8000e44:	e01f      	b.n	8000e86 <process_control_transfer_stage+0xee>
        		log_info("Switching control stage to OUT-STATUS.");
 8000e46:	4817      	ldr	r0, [pc, #92]	; (8000ea4 <process_control_transfer_stage+0x10c>)
 8000e48:	f000 f954 	bl	80010f4 <log_info>
        		usbd_handle->control_transfer_stage = USB_CONTROL_STAGE_STATUS_OUT;
 8000e4c:	4b10      	ldr	r3, [pc, #64]	; (8000e90 <process_control_transfer_stage+0xf8>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	2205      	movs	r2, #5
 8000e52:	705a      	strb	r2, [r3, #1]
		break;
 8000e54:	e017      	b.n	8000e86 <process_control_transfer_stage+0xee>
	case USB_CONTROL_STAGE_DATA_IN_IDLE:
		break;
	case USB_CONTROL_STAGE_STATUS_OUT:
		log_info("Switching control stage to SETUP.");
 8000e56:	4814      	ldr	r0, [pc, #80]	; (8000ea8 <process_control_transfer_stage+0x110>)
 8000e58:	f000 f94c 	bl	80010f4 <log_info>
		usbd_handle->control_transfer_stage = USB_CONTROL_STAGE_SETUP;
 8000e5c:	4b0c      	ldr	r3, [pc, #48]	; (8000e90 <process_control_transfer_stage+0xf8>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	2200      	movs	r2, #0
 8000e62:	705a      	strb	r2, [r3, #1]
		break;
 8000e64:	e010      	b.n	8000e88 <process_control_transfer_stage+0xf0>
	case USB_CONTROL_STAGE_STATUS_IN:
		usb_driver.write_packet(0, NULL, 0);
 8000e66:	4b0c      	ldr	r3, [pc, #48]	; (8000e98 <process_control_transfer_stage+0x100>)
 8000e68:	6a1b      	ldr	r3, [r3, #32]
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	2000      	movs	r0, #0
 8000e70:	4798      	blx	r3
		log_info("Switching control transfer stage to SETUP.");
 8000e72:	480e      	ldr	r0, [pc, #56]	; (8000eac <process_control_transfer_stage+0x114>)
 8000e74:	f000 f93e 	bl	80010f4 <log_info>
		usbd_handle->control_transfer_stage = USB_CONTROL_STAGE_SETUP;
 8000e78:	4b05      	ldr	r3, [pc, #20]	; (8000e90 <process_control_transfer_stage+0xf8>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	705a      	strb	r2, [r3, #1]
		break;
 8000e80:	e002      	b.n	8000e88 <process_control_transfer_stage+0xf0>
		break;
 8000e82:	bf00      	nop
 8000e84:	e000      	b.n	8000e88 <process_control_transfer_stage+0xf0>
		break;
 8000e86:	bf00      	nop
	}
}
 8000e88:	bf00      	nop
 8000e8a:	3708      	adds	r7, #8
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	2000009c 	.word	0x2000009c
 8000e94:	080024a0 	.word	0x080024a0
 8000e98:	08002640 	.word	0x08002640
 8000e9c:	080024bc 	.word	0x080024bc
 8000ea0:	080024e8 	.word	0x080024e8
 8000ea4:	08002514 	.word	0x08002514
 8000ea8:	0800253c 	.word	0x0800253c
 8000eac:	08002560 	.word	0x08002560

08000eb0 <usb_polled_handler>:

static void usb_polled_handler()
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
	process_control_transfer_stage();
 8000eb4:	f7ff ff70 	bl	8000d98 <process_control_transfer_stage>
}
 8000eb8:	bf00      	nop
 8000eba:	bd80      	pop	{r7, pc}

08000ebc <write_mouse_report>:

static void write_mouse_report()
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
	log_debug("Sending USB HID mouse report.");
 8000ec2:	480c      	ldr	r0, [pc, #48]	; (8000ef4 <write_mouse_report+0x38>)
 8000ec4:	f000 f929 	bl	800111a <log_debug>

	HidReport hid_report = {
 8000ec8:	1d3b      	adds	r3, r7, #4
 8000eca:	2100      	movs	r1, #0
 8000ecc:	460a      	mov	r2, r1
 8000ece:	801a      	strh	r2, [r3, #0]
 8000ed0:	460a      	mov	r2, r1
 8000ed2:	709a      	strb	r2, [r3, #2]
 8000ed4:	2305      	movs	r3, #5
 8000ed6:	713b      	strb	r3, [r7, #4]
		.x = 5
	};

    usb_driver.write_packet(
 8000ed8:	4b07      	ldr	r3, [pc, #28]	; (8000ef8 <write_mouse_report+0x3c>)
 8000eda:	6a1b      	ldr	r3, [r3, #32]
		(configDescriptorCombination.usbMouseEndpointDescriptor.bEndpointAddress & 0x0F),
 8000edc:	2283      	movs	r2, #131	; 0x83
    usb_driver.write_packet(
 8000ede:	f002 020f 	and.w	r2, r2, #15
 8000ee2:	b2d0      	uxtb	r0, r2
 8000ee4:	1d39      	adds	r1, r7, #4
 8000ee6:	2203      	movs	r2, #3
 8000ee8:	4798      	blx	r3
		&hid_report,
		sizeof(hid_report)
	);
}
 8000eea:	bf00      	nop
 8000eec:	3708      	adds	r7, #8
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	0800258c 	.word	0x0800258c
 8000ef8:	08002640 	.word	0x08002640

08000efc <in_transfer_completed_handler>:
 * @parem[in]		- endpoint number
 * @return			- none
 * @note			- none
 */
static void in_transfer_completed_handler(uint8_t endpoint_number)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	4603      	mov	r3, r0
 8000f04:	71fb      	strb	r3, [r7, #7]
	if (usbd_handle->in_data_size)
 8000f06:	4b15      	ldr	r3, [pc, #84]	; (8000f5c <in_transfer_completed_handler+0x60>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	691b      	ldr	r3, [r3, #16]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d007      	beq.n	8000f20 <in_transfer_completed_handler+0x24>
	{
		log_info("Switching control stage to IN-DATA.");
 8000f10:	4813      	ldr	r0, [pc, #76]	; (8000f60 <in_transfer_completed_handler+0x64>)
 8000f12:	f000 f8ef 	bl	80010f4 <log_info>
		usbd_handle->control_transfer_stage = USB_CONTROL_STAGE_DATA_IN;
 8000f16:	4b11      	ldr	r3, [pc, #68]	; (8000f5c <in_transfer_completed_handler+0x60>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	2202      	movs	r2, #2
 8000f1c:	705a      	strb	r2, [r3, #1]
 8000f1e:	e011      	b.n	8000f44 <in_transfer_completed_handler+0x48>
	}
	else if (usbd_handle->control_transfer_stage == USB_CONTROL_STAGE_DATA_IN_ZERO)
 8000f20:	4b0e      	ldr	r3, [pc, #56]	; (8000f5c <in_transfer_completed_handler+0x60>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	785b      	ldrb	r3, [r3, #1]
 8000f26:	2b04      	cmp	r3, #4
 8000f28:	d10c      	bne.n	8000f44 <in_transfer_completed_handler+0x48>
	{
		usb_driver.write_packet(0, NULL, 0);
 8000f2a:	4b0e      	ldr	r3, [pc, #56]	; (8000f64 <in_transfer_completed_handler+0x68>)
 8000f2c:	6a1b      	ldr	r3, [r3, #32]
 8000f2e:	2200      	movs	r2, #0
 8000f30:	2100      	movs	r1, #0
 8000f32:	2000      	movs	r0, #0
 8000f34:	4798      	blx	r3
		log_info("Switching control stage to OUT-STATUS.");
 8000f36:	480c      	ldr	r0, [pc, #48]	; (8000f68 <in_transfer_completed_handler+0x6c>)
 8000f38:	f000 f8dc 	bl	80010f4 <log_info>
		usbd_handle->control_transfer_stage = USB_CONTROL_STAGE_STATUS_OUT;
 8000f3c:	4b07      	ldr	r3, [pc, #28]	; (8000f5c <in_transfer_completed_handler+0x60>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	2205      	movs	r2, #5
 8000f42:	705a      	strb	r2, [r3, #1]
	}

	if (endpoint_number == (configDescriptorCombination.usbMouseEndpointDescriptor.bEndpointAddress & 0x0F))
 8000f44:	79fa      	ldrb	r2, [r7, #7]
 8000f46:	2383      	movs	r3, #131	; 0x83
 8000f48:	f003 030f 	and.w	r3, r3, #15
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	d101      	bne.n	8000f54 <in_transfer_completed_handler+0x58>
	{
		write_mouse_report();
 8000f50:	f7ff ffb4 	bl	8000ebc <write_mouse_report>
	}
}
 8000f54:	bf00      	nop
 8000f56:	3708      	adds	r7, #8
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	2000009c 	.word	0x2000009c
 8000f60:	080025ac 	.word	0x080025ac
 8000f64:	08002640 	.word	0x08002640
 8000f68:	08002514 	.word	0x08002514

08000f6c <out_transfer_completed_handler>:

static void out_transfer_completed_handler(uint8_t endpoint_number)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	4603      	mov	r3, r0
 8000f74:	71fb      	strb	r3, [r7, #7]
}
 8000f76:	bf00      	nop
 8000f78:	370c      	adds	r7, #12
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
	...

08000f84 <setup_data_received_handler>:
 * @parem[in]		- none
 * @return			- none
 * @note			- none
 */
static void setup_data_received_handler(uint8_t endpoint_number, uint16_t byte_count)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	460a      	mov	r2, r1
 8000f8e:	71fb      	strb	r3, [r7, #7]
 8000f90:	4613      	mov	r3, r2
 8000f92:	80bb      	strh	r3, [r7, #4]
	usb_driver.read_packet(usbd_handle->ptr_out_buffer, byte_count);
 8000f94:	4b0a      	ldr	r3, [pc, #40]	; (8000fc0 <setup_data_received_handler+0x3c>)
 8000f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f98:	4a0a      	ldr	r2, [pc, #40]	; (8000fc4 <setup_data_received_handler+0x40>)
 8000f9a:	6812      	ldr	r2, [r2, #0]
 8000f9c:	6852      	ldr	r2, [r2, #4]
 8000f9e:	88b9      	ldrh	r1, [r7, #4]
 8000fa0:	4610      	mov	r0, r2
 8000fa2:	4798      	blx	r3
	
	// Prints out the received data.
	log_debug_array("SETUP data: ", usbd_handle->ptr_out_buffer, byte_count);
 8000fa4:	4b07      	ldr	r3, [pc, #28]	; (8000fc4 <setup_data_received_handler+0x40>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	88ba      	ldrh	r2, [r7, #4]
 8000fac:	4619      	mov	r1, r3
 8000fae:	4806      	ldr	r0, [pc, #24]	; (8000fc8 <setup_data_received_handler+0x44>)
 8000fb0:	f000 f8c6 	bl	8001140 <log_debug_array>

	process_request();
 8000fb4:	f7ff fece 	bl	8000d54 <process_request>
}
 8000fb8:	bf00      	nop
 8000fba:	3708      	adds	r7, #8
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	08002640 	.word	0x08002640
 8000fc4:	2000009c 	.word	0x2000009c
 8000fc8:	080025d0 	.word	0x080025d0

08000fcc <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000fd4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000fd8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000fdc:	f003 0301 	and.w	r3, r3, #1
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d013      	beq.n	800100c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000fe4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000fe8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000fec:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d00b      	beq.n	800100c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000ff4:	e000      	b.n	8000ff8 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000ff6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000ff8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d0f9      	beq.n	8000ff6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001002:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001006:	687a      	ldr	r2, [r7, #4]
 8001008:	b2d2      	uxtb	r2, r2
 800100a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800100c:	687b      	ldr	r3, [r7, #4]
}
 800100e:	4618      	mov	r0, r3
 8001010:	370c      	adds	r7, #12
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr

0800101a <_write>:
 * This function overrides a weak function symbol and is not to be used directly.
 */


int _write(int file, char *ptr, int len)
{
 800101a:	b580      	push	{r7, lr}
 800101c:	b086      	sub	sp, #24
 800101e:	af00      	add	r7, sp, #0
 8001020:	60f8      	str	r0, [r7, #12]
 8001022:	60b9      	str	r1, [r7, #8]
 8001024:	607a      	str	r2, [r7, #4]
  int i=0;
 8001026:	2300      	movs	r3, #0
 8001028:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 800102a:	2300      	movs	r3, #0
 800102c:	617b      	str	r3, [r7, #20]
 800102e:	e009      	b.n	8001044 <_write+0x2a>
    ITM_SendChar((*ptr++));
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	1c5a      	adds	r2, r3, #1
 8001034:	60ba      	str	r2, [r7, #8]
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	4618      	mov	r0, r3
 800103a:	f7ff ffc7 	bl	8000fcc <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	3301      	adds	r3, #1
 8001042:	617b      	str	r3, [r7, #20]
 8001044:	697a      	ldr	r2, [r7, #20]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	429a      	cmp	r2, r3
 800104a:	dbf1      	blt.n	8001030 <_write+0x16>

  return len;
 800104c:	687b      	ldr	r3, [r7, #4]
}
 800104e:	4618      	mov	r0, r3
 8001050:	3718      	adds	r7, #24
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
	...

08001058 <_get_log_level_string>:

char const * const _get_log_level_string(LogLvl const log_level)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	71fb      	strb	r3, [r7, #7]
    switch(log_level)
 8001062:	79fb      	ldrb	r3, [r7, #7]
 8001064:	2b01      	cmp	r3, #1
 8001066:	d005      	beq.n	8001074 <_get_log_level_string+0x1c>
 8001068:	2b02      	cmp	r3, #2
 800106a:	d005      	beq.n	8001078 <_get_log_level_string+0x20>
 800106c:	2b00      	cmp	r3, #0
 800106e:	d105      	bne.n	800107c <_get_log_level_string+0x24>
    {
        case LOG_LEVEL_ERROR:
            return "ERROR";
 8001070:	4b06      	ldr	r3, [pc, #24]	; (800108c <_get_log_level_string+0x34>)
 8001072:	e004      	b.n	800107e <_get_log_level_string+0x26>
        case LOG_LEVEL_INFO:
            return "INFO";
 8001074:	4b06      	ldr	r3, [pc, #24]	; (8001090 <_get_log_level_string+0x38>)
 8001076:	e002      	b.n	800107e <_get_log_level_string+0x26>
        case LOG_LEVEL_DEBUG:
            return "DEBUG";
 8001078:	4b06      	ldr	r3, [pc, #24]	; (8001094 <_get_log_level_string+0x3c>)
 800107a:	e000      	b.n	800107e <_get_log_level_string+0x26>
        default:
        	return "No Arg";
 800107c:	4b06      	ldr	r3, [pc, #24]	; (8001098 <_get_log_level_string+0x40>)
    }
}
 800107e:	4618      	mov	r0, r3
 8001080:	370c      	adds	r7, #12
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	080025e0 	.word	0x080025e0
 8001090:	080025e8 	.word	0x080025e8
 8001094:	080025f0 	.word	0x080025f0
 8001098:	080025f8 	.word	0x080025f8

0800109c <_log>:

static void _log(LogLvl const log_level, char const * const format, va_list args)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	4603      	mov	r3, r0
 80010a4:	60b9      	str	r1, [r7, #8]
 80010a6:	607a      	str	r2, [r7, #4]
 80010a8:	73fb      	strb	r3, [r7, #15]

    if (log_level > system_log_level)
 80010aa:	4b0f      	ldr	r3, [pc, #60]	; (80010e8 <_log+0x4c>)
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	7bfa      	ldrb	r2, [r7, #15]
 80010b0:	429a      	cmp	r2, r3
 80010b2:	d814      	bhi.n	80010de <_log+0x42>
    {
    	return;
    }


	printf("[%s] ", _get_log_level_string(log_level));
 80010b4:	7bfb      	ldrb	r3, [r7, #15]
 80010b6:	4618      	mov	r0, r3
 80010b8:	f7ff ffce 	bl	8001058 <_get_log_level_string>
 80010bc:	4603      	mov	r3, r0
 80010be:	4619      	mov	r1, r3
 80010c0:	480a      	ldr	r0, [pc, #40]	; (80010ec <_log+0x50>)
 80010c2:	f000 fc2f 	bl	8001924 <iprintf>
	vfprintf(stdout, format, args);
 80010c6:	4b0a      	ldr	r3, [pc, #40]	; (80010f0 <_log+0x54>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	689b      	ldr	r3, [r3, #8]
 80010cc:	687a      	ldr	r2, [r7, #4]
 80010ce:	68b9      	ldr	r1, [r7, #8]
 80010d0:	4618      	mov	r0, r3
 80010d2:	f000 fa95 	bl	8001600 <vfiprintf>
	printf("\n");
 80010d6:	200a      	movs	r0, #10
 80010d8:	f000 fc3c 	bl	8001954 <putchar>
 80010dc:	e000      	b.n	80010e0 <_log+0x44>
    	return;
 80010de:	bf00      	nop
}
 80010e0:	3710      	adds	r7, #16
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	20000018 	.word	0x20000018
 80010ec:	08002600 	.word	0x08002600
 80010f0:	2000001c 	.word	0x2000001c

080010f4 <log_info>:
    _log(LOG_LEVEL_ERROR, format, args);
    va_end(args);
}

void log_info(char const * const format, ...)
{
 80010f4:	b40f      	push	{r0, r1, r2, r3}
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b082      	sub	sp, #8
 80010fa:	af00      	add	r7, sp, #0
    va_list args;
	va_start(args, format);
 80010fc:	f107 0314 	add.w	r3, r7, #20
 8001100:	607b      	str	r3, [r7, #4]
    _log(LOG_LEVEL_INFO, format, args);
 8001102:	687a      	ldr	r2, [r7, #4]
 8001104:	6939      	ldr	r1, [r7, #16]
 8001106:	2001      	movs	r0, #1
 8001108:	f7ff ffc8 	bl	800109c <_log>
    va_end(args);
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001116:	b004      	add	sp, #16
 8001118:	4770      	bx	lr

0800111a <log_debug>:

void log_debug(char const * const format, ...)
{
 800111a:	b40f      	push	{r0, r1, r2, r3}
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
    va_list args;
	va_start(args, format);
 8001122:	f107 0314 	add.w	r3, r7, #20
 8001126:	607b      	str	r3, [r7, #4]
    _log(LOG_LEVEL_DEBUG, format, args);
 8001128:	687a      	ldr	r2, [r7, #4]
 800112a:	6939      	ldr	r1, [r7, #16]
 800112c:	2002      	movs	r0, #2
 800112e:	f7ff ffb5 	bl	800109c <_log>
    va_end(args);
}
 8001132:	bf00      	nop
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800113c:	b004      	add	sp, #16
 800113e:	4770      	bx	lr

08001140 <log_debug_array>:
 * \param label The label of the array.
 * \param array Pointer to the array.
 * \param len The length of data in bytes.
 */
void log_debug_array(char const * const label, void const *array, uint16_t const len)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b086      	sub	sp, #24
 8001144:	af00      	add	r7, sp, #0
 8001146:	60f8      	str	r0, [r7, #12]
 8001148:	60b9      	str	r1, [r7, #8]
 800114a:	4613      	mov	r3, r2
 800114c:	80fb      	strh	r3, [r7, #6]
    if (LOG_LEVEL_DEBUG > system_log_level)
 800114e:	4b18      	ldr	r3, [pc, #96]	; (80011b0 <log_debug_array+0x70>)
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	2b01      	cmp	r3, #1
 8001154:	d928      	bls.n	80011a8 <log_debug_array+0x68>
    {
    	return;
    }

	printf("[%s] %s[%d]: {", _get_log_level_string(LOG_LEVEL_DEBUG), label, len);
 8001156:	2002      	movs	r0, #2
 8001158:	f7ff ff7e 	bl	8001058 <_get_log_level_string>
 800115c:	4601      	mov	r1, r0
 800115e:	88fb      	ldrh	r3, [r7, #6]
 8001160:	68fa      	ldr	r2, [r7, #12]
 8001162:	4814      	ldr	r0, [pc, #80]	; (80011b4 <log_debug_array+0x74>)
 8001164:	f000 fbde 	bl	8001924 <iprintf>
    for (uint16_t i = 0; i < len; i++)
 8001168:	2300      	movs	r3, #0
 800116a:	82fb      	strh	r3, [r7, #22]
 800116c:	e014      	b.n	8001198 <log_debug_array+0x58>
    {
    	uint8_t val = *((uint8_t *)(array + i));
 800116e:	8afb      	ldrh	r3, [r7, #22]
 8001170:	68ba      	ldr	r2, [r7, #8]
 8001172:	4413      	add	r3, r2
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	757b      	strb	r3, [r7, #21]
    	printf("0x%02X", val);
 8001178:	7d7b      	ldrb	r3, [r7, #21]
 800117a:	4619      	mov	r1, r3
 800117c:	480e      	ldr	r0, [pc, #56]	; (80011b8 <log_debug_array+0x78>)
 800117e:	f000 fbd1 	bl	8001924 <iprintf>
    	
    	// Add ", " after all elements except the last one.
    	if (i < len - 1)
 8001182:	8afa      	ldrh	r2, [r7, #22]
 8001184:	88fb      	ldrh	r3, [r7, #6]
 8001186:	3b01      	subs	r3, #1
 8001188:	429a      	cmp	r2, r3
 800118a:	da02      	bge.n	8001192 <log_debug_array+0x52>
    	{
    	    printf(", ");
 800118c:	480b      	ldr	r0, [pc, #44]	; (80011bc <log_debug_array+0x7c>)
 800118e:	f000 fbc9 	bl	8001924 <iprintf>
    for (uint16_t i = 0; i < len; i++)
 8001192:	8afb      	ldrh	r3, [r7, #22]
 8001194:	3301      	adds	r3, #1
 8001196:	82fb      	strh	r3, [r7, #22]
 8001198:	8afa      	ldrh	r2, [r7, #22]
 800119a:	88fb      	ldrh	r3, [r7, #6]
 800119c:	429a      	cmp	r2, r3
 800119e:	d3e6      	bcc.n	800116e <log_debug_array+0x2e>
    	}
    }
	printf("}\n");
 80011a0:	4807      	ldr	r0, [pc, #28]	; (80011c0 <log_debug_array+0x80>)
 80011a2:	f000 fc47 	bl	8001a34 <puts>
 80011a6:	e000      	b.n	80011aa <log_debug_array+0x6a>
    	return;
 80011a8:	bf00      	nop
}
 80011aa:	3718      	adds	r7, #24
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	20000018 	.word	0x20000018
 80011b4:	08002608 	.word	0x08002608
 80011b8:	08002618 	.word	0x08002618
 80011bc:	08002620 	.word	0x08002620
 80011c0:	08002624 	.word	0x08002624

080011c4 <main>:

UsbDevice usb_device;
uint32_t buffer[8];

int main(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
	USBPins.GPIO_PinConfig.GPIO_PinNumber =12;
	GPIO_Init(&USBPins);*/



	log_info("Program entry point.");
 80011c8:	4805      	ldr	r0, [pc, #20]	; (80011e0 <main+0x1c>)
 80011ca:	f7ff ff93 	bl	80010f4 <log_info>
	usb_device.ptr_out_buffer = &buffer;
 80011ce:	4b05      	ldr	r3, [pc, #20]	; (80011e4 <main+0x20>)
 80011d0:	4a05      	ldr	r2, [pc, #20]	; (80011e8 <main+0x24>)
 80011d2:	605a      	str	r2, [r3, #4]
	USB_Init(&usb_device);
 80011d4:	4803      	ldr	r0, [pc, #12]	; (80011e4 <main+0x20>)
 80011d6:	f7ff fc89 	bl	8000aec <USB_Init>
	for(;;)
	{
		usbd_poll();
 80011da:	f7ff fc9f 	bl	8000b1c <usbd_poll>
 80011de:	e7fc      	b.n	80011da <main+0x16>
 80011e0:	08002628 	.word	0x08002628
 80011e4:	200000ac 	.word	0x200000ac
 80011e8:	200000c0 	.word	0x200000c0

080011ec <configureClock>:
//HCLK = 72MHz
//PLL: M = 4, N = 72, P = 2, Q = 3
//APB1 prescaler =2 APB2 prescaler  = 1

static void configureClock(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0

	MODIFY_REG(FLASH->ACR,FLASH_ACR_LATENCY,FLASH_ACR_LATENCY_2WS << FLASH_ACR_LATENCY_Pos);
 80011f0:	4b2c      	ldr	r3, [pc, #176]	; (80012a4 <configureClock+0xb8>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f023 030f 	bic.w	r3, r3, #15
 80011f8:	4a2a      	ldr	r2, [pc, #168]	; (80012a4 <configureClock+0xb8>)
 80011fa:	f043 0302 	orr.w	r3, r3, #2
 80011fe:	6013      	str	r3, [r2, #0]

	//Enable HSE
	SET_BIT(RCC->CR,RCC_CR_HSEON);
 8001200:	4b29      	ldr	r3, [pc, #164]	; (80012a8 <configureClock+0xbc>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a28      	ldr	r2, [pc, #160]	; (80012a8 <configureClock+0xbc>)
 8001206:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800120a:	6013      	str	r3, [r2, #0]

	//Wait for HSE to be ready
	while(!READ_BIT(RCC->CR,RCC_CR_HSERDY));
 800120c:	bf00      	nop
 800120e:	4b26      	ldr	r3, [pc, #152]	; (80012a8 <configureClock+0xbc>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001216:	2b00      	cmp	r3, #0
 8001218:	d0f9      	beq.n	800120e <configureClock+0x22>

	//Turn off PLL
	CLEAR_BIT(RCC->CR,RCC_CR_PLLON);
 800121a:	4b23      	ldr	r3, [pc, #140]	; (80012a8 <configureClock+0xbc>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a22      	ldr	r2, [pc, #136]	; (80012a8 <configureClock+0xbc>)
 8001220:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001224:	6013      	str	r3, [r2, #0]

	//Wait for PLL to be ready be cleared
	while(READ_BIT(RCC->CR,RCC_CR_PLLRDY));
 8001226:	bf00      	nop
 8001228:	4b1f      	ldr	r3, [pc, #124]	; (80012a8 <configureClock+0xbc>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001230:	2b00      	cmp	r3, #0
 8001232:	d1f9      	bne.n	8001228 <configureClock+0x3c>


	//Configure PLL: source = HSE, SYCLK=72Mhz
	MODIFY_REG(RCC->PLLCFGR,
 8001234:	4b1c      	ldr	r3, [pc, #112]	; (80012a8 <configureClock+0xbc>)
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	4a1c      	ldr	r2, [pc, #112]	; (80012ac <configureClock+0xc0>)
 800123a:	401a      	ands	r2, r3
 800123c:	491a      	ldr	r1, [pc, #104]	; (80012a8 <configureClock+0xbc>)
 800123e:	4b1c      	ldr	r3, [pc, #112]	; (80012b0 <configureClock+0xc4>)
 8001240:	4313      	orrs	r3, r2
 8001242:	604b      	str	r3, [r1, #4]
			RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLQ | RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLP,
			_VAL2FLD(RCC_PLLCFGR_PLLM, 4) | _VAL2FLD(RCC_PLLCFGR_PLLN, 72) | _VAL2FLD(RCC_PLLCFGR_PLLQ, 3) | RCC_PLLCFGR_PLLSRC_HSE);

	// Configures PPRE1 = 2
		MODIFY_REG(RCC->CFGR,
 8001244:	4b18      	ldr	r3, [pc, #96]	; (80012a8 <configureClock+0xbc>)
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800124c:	4a16      	ldr	r2, [pc, #88]	; (80012a8 <configureClock+0xbc>)
 800124e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001252:	6093      	str	r3, [r2, #8]
			RCC_CFGR_PPRE1,_VAL2FLD(RCC_CFGR_PPRE1, 4));

	//Enable PLL Module
	SET_BIT(RCC->CR,RCC_CR_PLLON);
 8001254:	4b14      	ldr	r3, [pc, #80]	; (80012a8 <configureClock+0xbc>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a13      	ldr	r2, [pc, #76]	; (80012a8 <configureClock+0xbc>)
 800125a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800125e:	6013      	str	r3, [r2, #0]

	//Wait until PLL is stable
	while(!READ_BIT(RCC->CR,RCC_CR_PLLRDY));
 8001260:	bf00      	nop
 8001262:	4b11      	ldr	r3, [pc, #68]	; (80012a8 <configureClock+0xbc>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800126a:	2b00      	cmp	r3, #0
 800126c:	d0f9      	beq.n	8001262 <configureClock+0x76>

	//Modify System clock to PLL
	MODIFY_REG(RCC->CFGR,
 800126e:	4b0e      	ldr	r3, [pc, #56]	; (80012a8 <configureClock+0xbc>)
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	f023 0303 	bic.w	r3, r3, #3
 8001276:	4a0c      	ldr	r2, [pc, #48]	; (80012a8 <configureClock+0xbc>)
 8001278:	f043 0302 	orr.w	r3, r3, #2
 800127c:	6093      	str	r3, [r2, #8]
			RCC_CFGR_SW,
			_VAL2FLD(RCC_CFGR_SW,RCC_CFGR_SW_PLL));


	//Wait until PLL is switched
	while(READ_BIT(RCC->CFGR,RCC_CFGR_SWS) != RCC_CFGR_SWS_PLL);
 800127e:	bf00      	nop
 8001280:	4b09      	ldr	r3, [pc, #36]	; (80012a8 <configureClock+0xbc>)
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	f003 030c 	and.w	r3, r3, #12
 8001288:	2b08      	cmp	r3, #8
 800128a:	d1f9      	bne.n	8001280 <configureClock+0x94>

	//Disable HSI
	CLEAR_BIT(RCC->CR,RCC_CR_HSION);
 800128c:	4b06      	ldr	r3, [pc, #24]	; (80012a8 <configureClock+0xbc>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a05      	ldr	r2, [pc, #20]	; (80012a8 <configureClock+0xbc>)
 8001292:	f023 0301 	bic.w	r3, r3, #1
 8001296:	6013      	str	r3, [r2, #0]
}
 8001298:	bf00      	nop
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	40023c00 	.word	0x40023c00
 80012a8:	40023800 	.word	0x40023800
 80012ac:	f0bc8000 	.word	0xf0bc8000
 80012b0:	03401204 	.word	0x03401204

080012b4 <SystemInit>:

void SystemInit(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
	configureClock();
 80012b8:	f7ff ff98 	bl	80011ec <configureClock>
}
 80012bc:	bf00      	nop
 80012be:	bd80      	pop	{r7, pc}

080012c0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80012c0:	480d      	ldr	r0, [pc, #52]	; (80012f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80012c2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012c4:	480d      	ldr	r0, [pc, #52]	; (80012fc <LoopForever+0x6>)
  ldr r1, =_edata
 80012c6:	490e      	ldr	r1, [pc, #56]	; (8001300 <LoopForever+0xa>)
  ldr r2, =_sidata
 80012c8:	4a0e      	ldr	r2, [pc, #56]	; (8001304 <LoopForever+0xe>)
  movs r3, #0
 80012ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012cc:	e002      	b.n	80012d4 <LoopCopyDataInit>

080012ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012d2:	3304      	adds	r3, #4

080012d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012d8:	d3f9      	bcc.n	80012ce <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012da:	4a0b      	ldr	r2, [pc, #44]	; (8001308 <LoopForever+0x12>)
  ldr r4, =_ebss
 80012dc:	4c0b      	ldr	r4, [pc, #44]	; (800130c <LoopForever+0x16>)
  movs r3, #0
 80012de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012e0:	e001      	b.n	80012e6 <LoopFillZerobss>

080012e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012e4:	3204      	adds	r2, #4

080012e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012e8:	d3fb      	bcc.n	80012e2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80012ea:	f7ff ffe3 	bl	80012b4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80012ee:	f000 f81b 	bl	8001328 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012f2:	f7ff ff67 	bl	80011c4 <main>

080012f6 <LoopForever>:

LoopForever:
    b LoopForever
 80012f6:	e7fe      	b.n	80012f6 <LoopForever>
  ldr   r0, =_estack
 80012f8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80012fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001300:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001304:	08002774 	.word	0x08002774
  ldr r2, =_sbss
 8001308:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 800130c:	200000e4 	.word	0x200000e4

08001310 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001310:	e7fe      	b.n	8001310 <ADC_IRQHandler>

08001312 <ffs>:
 8001312:	2800      	cmp	r0, #0
 8001314:	fa90 f3a0 	rbit	r3, r0
 8001318:	fab3 f383 	clz	r3, r3
 800131c:	bf08      	it	eq
 800131e:	f04f 33ff 	moveq.w	r3, #4294967295
 8001322:	1c58      	adds	r0, r3, #1
 8001324:	4770      	bx	lr
	...

08001328 <__libc_init_array>:
 8001328:	b570      	push	{r4, r5, r6, lr}
 800132a:	4e0d      	ldr	r6, [pc, #52]	; (8001360 <__libc_init_array+0x38>)
 800132c:	4c0d      	ldr	r4, [pc, #52]	; (8001364 <__libc_init_array+0x3c>)
 800132e:	1ba4      	subs	r4, r4, r6
 8001330:	10a4      	asrs	r4, r4, #2
 8001332:	2500      	movs	r5, #0
 8001334:	42a5      	cmp	r5, r4
 8001336:	d109      	bne.n	800134c <__libc_init_array+0x24>
 8001338:	4e0b      	ldr	r6, [pc, #44]	; (8001368 <__libc_init_array+0x40>)
 800133a:	4c0c      	ldr	r4, [pc, #48]	; (800136c <__libc_init_array+0x44>)
 800133c:	f000 fff2 	bl	8002324 <_init>
 8001340:	1ba4      	subs	r4, r4, r6
 8001342:	10a4      	asrs	r4, r4, #2
 8001344:	2500      	movs	r5, #0
 8001346:	42a5      	cmp	r5, r4
 8001348:	d105      	bne.n	8001356 <__libc_init_array+0x2e>
 800134a:	bd70      	pop	{r4, r5, r6, pc}
 800134c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001350:	4798      	blx	r3
 8001352:	3501      	adds	r5, #1
 8001354:	e7ee      	b.n	8001334 <__libc_init_array+0xc>
 8001356:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800135a:	4798      	blx	r3
 800135c:	3501      	adds	r5, #1
 800135e:	e7f2      	b.n	8001346 <__libc_init_array+0x1e>
 8001360:	0800276c 	.word	0x0800276c
 8001364:	0800276c 	.word	0x0800276c
 8001368:	0800276c 	.word	0x0800276c
 800136c:	08002770 	.word	0x08002770

08001370 <memset>:
 8001370:	4402      	add	r2, r0
 8001372:	4603      	mov	r3, r0
 8001374:	4293      	cmp	r3, r2
 8001376:	d100      	bne.n	800137a <memset+0xa>
 8001378:	4770      	bx	lr
 800137a:	f803 1b01 	strb.w	r1, [r3], #1
 800137e:	e7f9      	b.n	8001374 <memset+0x4>

08001380 <__sfputc_r>:
 8001380:	6893      	ldr	r3, [r2, #8]
 8001382:	3b01      	subs	r3, #1
 8001384:	2b00      	cmp	r3, #0
 8001386:	b410      	push	{r4}
 8001388:	6093      	str	r3, [r2, #8]
 800138a:	da08      	bge.n	800139e <__sfputc_r+0x1e>
 800138c:	6994      	ldr	r4, [r2, #24]
 800138e:	42a3      	cmp	r3, r4
 8001390:	db01      	blt.n	8001396 <__sfputc_r+0x16>
 8001392:	290a      	cmp	r1, #10
 8001394:	d103      	bne.n	800139e <__sfputc_r+0x1e>
 8001396:	f85d 4b04 	ldr.w	r4, [sp], #4
 800139a:	f000 bb53 	b.w	8001a44 <__swbuf_r>
 800139e:	6813      	ldr	r3, [r2, #0]
 80013a0:	1c58      	adds	r0, r3, #1
 80013a2:	6010      	str	r0, [r2, #0]
 80013a4:	7019      	strb	r1, [r3, #0]
 80013a6:	4608      	mov	r0, r1
 80013a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80013ac:	4770      	bx	lr

080013ae <__sfputs_r>:
 80013ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013b0:	4606      	mov	r6, r0
 80013b2:	460f      	mov	r7, r1
 80013b4:	4614      	mov	r4, r2
 80013b6:	18d5      	adds	r5, r2, r3
 80013b8:	42ac      	cmp	r4, r5
 80013ba:	d101      	bne.n	80013c0 <__sfputs_r+0x12>
 80013bc:	2000      	movs	r0, #0
 80013be:	e007      	b.n	80013d0 <__sfputs_r+0x22>
 80013c0:	463a      	mov	r2, r7
 80013c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80013c6:	4630      	mov	r0, r6
 80013c8:	f7ff ffda 	bl	8001380 <__sfputc_r>
 80013cc:	1c43      	adds	r3, r0, #1
 80013ce:	d1f3      	bne.n	80013b8 <__sfputs_r+0xa>
 80013d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080013d4 <_vfiprintf_r>:
 80013d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80013d8:	460c      	mov	r4, r1
 80013da:	b09d      	sub	sp, #116	; 0x74
 80013dc:	4617      	mov	r7, r2
 80013de:	461d      	mov	r5, r3
 80013e0:	4606      	mov	r6, r0
 80013e2:	b118      	cbz	r0, 80013ec <_vfiprintf_r+0x18>
 80013e4:	6983      	ldr	r3, [r0, #24]
 80013e6:	b90b      	cbnz	r3, 80013ec <_vfiprintf_r+0x18>
 80013e8:	f000 fcdc 	bl	8001da4 <__sinit>
 80013ec:	4b7c      	ldr	r3, [pc, #496]	; (80015e0 <_vfiprintf_r+0x20c>)
 80013ee:	429c      	cmp	r4, r3
 80013f0:	d158      	bne.n	80014a4 <_vfiprintf_r+0xd0>
 80013f2:	6874      	ldr	r4, [r6, #4]
 80013f4:	89a3      	ldrh	r3, [r4, #12]
 80013f6:	0718      	lsls	r0, r3, #28
 80013f8:	d55e      	bpl.n	80014b8 <_vfiprintf_r+0xe4>
 80013fa:	6923      	ldr	r3, [r4, #16]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d05b      	beq.n	80014b8 <_vfiprintf_r+0xe4>
 8001400:	2300      	movs	r3, #0
 8001402:	9309      	str	r3, [sp, #36]	; 0x24
 8001404:	2320      	movs	r3, #32
 8001406:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800140a:	2330      	movs	r3, #48	; 0x30
 800140c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001410:	9503      	str	r5, [sp, #12]
 8001412:	f04f 0b01 	mov.w	fp, #1
 8001416:	46b8      	mov	r8, r7
 8001418:	4645      	mov	r5, r8
 800141a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800141e:	b10b      	cbz	r3, 8001424 <_vfiprintf_r+0x50>
 8001420:	2b25      	cmp	r3, #37	; 0x25
 8001422:	d154      	bne.n	80014ce <_vfiprintf_r+0xfa>
 8001424:	ebb8 0a07 	subs.w	sl, r8, r7
 8001428:	d00b      	beq.n	8001442 <_vfiprintf_r+0x6e>
 800142a:	4653      	mov	r3, sl
 800142c:	463a      	mov	r2, r7
 800142e:	4621      	mov	r1, r4
 8001430:	4630      	mov	r0, r6
 8001432:	f7ff ffbc 	bl	80013ae <__sfputs_r>
 8001436:	3001      	adds	r0, #1
 8001438:	f000 80c2 	beq.w	80015c0 <_vfiprintf_r+0x1ec>
 800143c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800143e:	4453      	add	r3, sl
 8001440:	9309      	str	r3, [sp, #36]	; 0x24
 8001442:	f898 3000 	ldrb.w	r3, [r8]
 8001446:	2b00      	cmp	r3, #0
 8001448:	f000 80ba 	beq.w	80015c0 <_vfiprintf_r+0x1ec>
 800144c:	2300      	movs	r3, #0
 800144e:	f04f 32ff 	mov.w	r2, #4294967295
 8001452:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001456:	9304      	str	r3, [sp, #16]
 8001458:	9307      	str	r3, [sp, #28]
 800145a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800145e:	931a      	str	r3, [sp, #104]	; 0x68
 8001460:	46a8      	mov	r8, r5
 8001462:	2205      	movs	r2, #5
 8001464:	f818 1b01 	ldrb.w	r1, [r8], #1
 8001468:	485e      	ldr	r0, [pc, #376]	; (80015e4 <_vfiprintf_r+0x210>)
 800146a:	f7fe fec1 	bl	80001f0 <memchr>
 800146e:	9b04      	ldr	r3, [sp, #16]
 8001470:	bb78      	cbnz	r0, 80014d2 <_vfiprintf_r+0xfe>
 8001472:	06d9      	lsls	r1, r3, #27
 8001474:	bf44      	itt	mi
 8001476:	2220      	movmi	r2, #32
 8001478:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800147c:	071a      	lsls	r2, r3, #28
 800147e:	bf44      	itt	mi
 8001480:	222b      	movmi	r2, #43	; 0x2b
 8001482:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001486:	782a      	ldrb	r2, [r5, #0]
 8001488:	2a2a      	cmp	r2, #42	; 0x2a
 800148a:	d02a      	beq.n	80014e2 <_vfiprintf_r+0x10e>
 800148c:	9a07      	ldr	r2, [sp, #28]
 800148e:	46a8      	mov	r8, r5
 8001490:	2000      	movs	r0, #0
 8001492:	250a      	movs	r5, #10
 8001494:	4641      	mov	r1, r8
 8001496:	f811 3b01 	ldrb.w	r3, [r1], #1
 800149a:	3b30      	subs	r3, #48	; 0x30
 800149c:	2b09      	cmp	r3, #9
 800149e:	d969      	bls.n	8001574 <_vfiprintf_r+0x1a0>
 80014a0:	b360      	cbz	r0, 80014fc <_vfiprintf_r+0x128>
 80014a2:	e024      	b.n	80014ee <_vfiprintf_r+0x11a>
 80014a4:	4b50      	ldr	r3, [pc, #320]	; (80015e8 <_vfiprintf_r+0x214>)
 80014a6:	429c      	cmp	r4, r3
 80014a8:	d101      	bne.n	80014ae <_vfiprintf_r+0xda>
 80014aa:	68b4      	ldr	r4, [r6, #8]
 80014ac:	e7a2      	b.n	80013f4 <_vfiprintf_r+0x20>
 80014ae:	4b4f      	ldr	r3, [pc, #316]	; (80015ec <_vfiprintf_r+0x218>)
 80014b0:	429c      	cmp	r4, r3
 80014b2:	bf08      	it	eq
 80014b4:	68f4      	ldreq	r4, [r6, #12]
 80014b6:	e79d      	b.n	80013f4 <_vfiprintf_r+0x20>
 80014b8:	4621      	mov	r1, r4
 80014ba:	4630      	mov	r0, r6
 80014bc:	f000 fb14 	bl	8001ae8 <__swsetup_r>
 80014c0:	2800      	cmp	r0, #0
 80014c2:	d09d      	beq.n	8001400 <_vfiprintf_r+0x2c>
 80014c4:	f04f 30ff 	mov.w	r0, #4294967295
 80014c8:	b01d      	add	sp, #116	; 0x74
 80014ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80014ce:	46a8      	mov	r8, r5
 80014d0:	e7a2      	b.n	8001418 <_vfiprintf_r+0x44>
 80014d2:	4a44      	ldr	r2, [pc, #272]	; (80015e4 <_vfiprintf_r+0x210>)
 80014d4:	1a80      	subs	r0, r0, r2
 80014d6:	fa0b f000 	lsl.w	r0, fp, r0
 80014da:	4318      	orrs	r0, r3
 80014dc:	9004      	str	r0, [sp, #16]
 80014de:	4645      	mov	r5, r8
 80014e0:	e7be      	b.n	8001460 <_vfiprintf_r+0x8c>
 80014e2:	9a03      	ldr	r2, [sp, #12]
 80014e4:	1d11      	adds	r1, r2, #4
 80014e6:	6812      	ldr	r2, [r2, #0]
 80014e8:	9103      	str	r1, [sp, #12]
 80014ea:	2a00      	cmp	r2, #0
 80014ec:	db01      	blt.n	80014f2 <_vfiprintf_r+0x11e>
 80014ee:	9207      	str	r2, [sp, #28]
 80014f0:	e004      	b.n	80014fc <_vfiprintf_r+0x128>
 80014f2:	4252      	negs	r2, r2
 80014f4:	f043 0302 	orr.w	r3, r3, #2
 80014f8:	9207      	str	r2, [sp, #28]
 80014fa:	9304      	str	r3, [sp, #16]
 80014fc:	f898 3000 	ldrb.w	r3, [r8]
 8001500:	2b2e      	cmp	r3, #46	; 0x2e
 8001502:	d10e      	bne.n	8001522 <_vfiprintf_r+0x14e>
 8001504:	f898 3001 	ldrb.w	r3, [r8, #1]
 8001508:	2b2a      	cmp	r3, #42	; 0x2a
 800150a:	d138      	bne.n	800157e <_vfiprintf_r+0x1aa>
 800150c:	9b03      	ldr	r3, [sp, #12]
 800150e:	1d1a      	adds	r2, r3, #4
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	9203      	str	r2, [sp, #12]
 8001514:	2b00      	cmp	r3, #0
 8001516:	bfb8      	it	lt
 8001518:	f04f 33ff 	movlt.w	r3, #4294967295
 800151c:	f108 0802 	add.w	r8, r8, #2
 8001520:	9305      	str	r3, [sp, #20]
 8001522:	4d33      	ldr	r5, [pc, #204]	; (80015f0 <_vfiprintf_r+0x21c>)
 8001524:	f898 1000 	ldrb.w	r1, [r8]
 8001528:	2203      	movs	r2, #3
 800152a:	4628      	mov	r0, r5
 800152c:	f7fe fe60 	bl	80001f0 <memchr>
 8001530:	b140      	cbz	r0, 8001544 <_vfiprintf_r+0x170>
 8001532:	2340      	movs	r3, #64	; 0x40
 8001534:	1b40      	subs	r0, r0, r5
 8001536:	fa03 f000 	lsl.w	r0, r3, r0
 800153a:	9b04      	ldr	r3, [sp, #16]
 800153c:	4303      	orrs	r3, r0
 800153e:	f108 0801 	add.w	r8, r8, #1
 8001542:	9304      	str	r3, [sp, #16]
 8001544:	f898 1000 	ldrb.w	r1, [r8]
 8001548:	482a      	ldr	r0, [pc, #168]	; (80015f4 <_vfiprintf_r+0x220>)
 800154a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800154e:	2206      	movs	r2, #6
 8001550:	f108 0701 	add.w	r7, r8, #1
 8001554:	f7fe fe4c 	bl	80001f0 <memchr>
 8001558:	2800      	cmp	r0, #0
 800155a:	d037      	beq.n	80015cc <_vfiprintf_r+0x1f8>
 800155c:	4b26      	ldr	r3, [pc, #152]	; (80015f8 <_vfiprintf_r+0x224>)
 800155e:	bb1b      	cbnz	r3, 80015a8 <_vfiprintf_r+0x1d4>
 8001560:	9b03      	ldr	r3, [sp, #12]
 8001562:	3307      	adds	r3, #7
 8001564:	f023 0307 	bic.w	r3, r3, #7
 8001568:	3308      	adds	r3, #8
 800156a:	9303      	str	r3, [sp, #12]
 800156c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800156e:	444b      	add	r3, r9
 8001570:	9309      	str	r3, [sp, #36]	; 0x24
 8001572:	e750      	b.n	8001416 <_vfiprintf_r+0x42>
 8001574:	fb05 3202 	mla	r2, r5, r2, r3
 8001578:	2001      	movs	r0, #1
 800157a:	4688      	mov	r8, r1
 800157c:	e78a      	b.n	8001494 <_vfiprintf_r+0xc0>
 800157e:	2300      	movs	r3, #0
 8001580:	f108 0801 	add.w	r8, r8, #1
 8001584:	9305      	str	r3, [sp, #20]
 8001586:	4619      	mov	r1, r3
 8001588:	250a      	movs	r5, #10
 800158a:	4640      	mov	r0, r8
 800158c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001590:	3a30      	subs	r2, #48	; 0x30
 8001592:	2a09      	cmp	r2, #9
 8001594:	d903      	bls.n	800159e <_vfiprintf_r+0x1ca>
 8001596:	2b00      	cmp	r3, #0
 8001598:	d0c3      	beq.n	8001522 <_vfiprintf_r+0x14e>
 800159a:	9105      	str	r1, [sp, #20]
 800159c:	e7c1      	b.n	8001522 <_vfiprintf_r+0x14e>
 800159e:	fb05 2101 	mla	r1, r5, r1, r2
 80015a2:	2301      	movs	r3, #1
 80015a4:	4680      	mov	r8, r0
 80015a6:	e7f0      	b.n	800158a <_vfiprintf_r+0x1b6>
 80015a8:	ab03      	add	r3, sp, #12
 80015aa:	9300      	str	r3, [sp, #0]
 80015ac:	4622      	mov	r2, r4
 80015ae:	4b13      	ldr	r3, [pc, #76]	; (80015fc <_vfiprintf_r+0x228>)
 80015b0:	a904      	add	r1, sp, #16
 80015b2:	4630      	mov	r0, r6
 80015b4:	f3af 8000 	nop.w
 80015b8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80015bc:	4681      	mov	r9, r0
 80015be:	d1d5      	bne.n	800156c <_vfiprintf_r+0x198>
 80015c0:	89a3      	ldrh	r3, [r4, #12]
 80015c2:	065b      	lsls	r3, r3, #25
 80015c4:	f53f af7e 	bmi.w	80014c4 <_vfiprintf_r+0xf0>
 80015c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80015ca:	e77d      	b.n	80014c8 <_vfiprintf_r+0xf4>
 80015cc:	ab03      	add	r3, sp, #12
 80015ce:	9300      	str	r3, [sp, #0]
 80015d0:	4622      	mov	r2, r4
 80015d2:	4b0a      	ldr	r3, [pc, #40]	; (80015fc <_vfiprintf_r+0x228>)
 80015d4:	a904      	add	r1, sp, #16
 80015d6:	4630      	mov	r0, r6
 80015d8:	f000 f892 	bl	8001700 <_printf_i>
 80015dc:	e7ec      	b.n	80015b8 <_vfiprintf_r+0x1e4>
 80015de:	bf00      	nop
 80015e0:	0800272c 	.word	0x0800272c
 80015e4:	080026d8 	.word	0x080026d8
 80015e8:	0800274c 	.word	0x0800274c
 80015ec:	0800270c 	.word	0x0800270c
 80015f0:	080026de 	.word	0x080026de
 80015f4:	080026e2 	.word	0x080026e2
 80015f8:	00000000 	.word	0x00000000
 80015fc:	080013af 	.word	0x080013af

08001600 <vfiprintf>:
 8001600:	4613      	mov	r3, r2
 8001602:	460a      	mov	r2, r1
 8001604:	4601      	mov	r1, r0
 8001606:	4802      	ldr	r0, [pc, #8]	; (8001610 <vfiprintf+0x10>)
 8001608:	6800      	ldr	r0, [r0, #0]
 800160a:	f7ff bee3 	b.w	80013d4 <_vfiprintf_r>
 800160e:	bf00      	nop
 8001610:	2000001c 	.word	0x2000001c

08001614 <_printf_common>:
 8001614:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001618:	4691      	mov	r9, r2
 800161a:	461f      	mov	r7, r3
 800161c:	688a      	ldr	r2, [r1, #8]
 800161e:	690b      	ldr	r3, [r1, #16]
 8001620:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001624:	4293      	cmp	r3, r2
 8001626:	bfb8      	it	lt
 8001628:	4613      	movlt	r3, r2
 800162a:	f8c9 3000 	str.w	r3, [r9]
 800162e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001632:	4606      	mov	r6, r0
 8001634:	460c      	mov	r4, r1
 8001636:	b112      	cbz	r2, 800163e <_printf_common+0x2a>
 8001638:	3301      	adds	r3, #1
 800163a:	f8c9 3000 	str.w	r3, [r9]
 800163e:	6823      	ldr	r3, [r4, #0]
 8001640:	0699      	lsls	r1, r3, #26
 8001642:	bf42      	ittt	mi
 8001644:	f8d9 3000 	ldrmi.w	r3, [r9]
 8001648:	3302      	addmi	r3, #2
 800164a:	f8c9 3000 	strmi.w	r3, [r9]
 800164e:	6825      	ldr	r5, [r4, #0]
 8001650:	f015 0506 	ands.w	r5, r5, #6
 8001654:	d107      	bne.n	8001666 <_printf_common+0x52>
 8001656:	f104 0a19 	add.w	sl, r4, #25
 800165a:	68e3      	ldr	r3, [r4, #12]
 800165c:	f8d9 2000 	ldr.w	r2, [r9]
 8001660:	1a9b      	subs	r3, r3, r2
 8001662:	42ab      	cmp	r3, r5
 8001664:	dc28      	bgt.n	80016b8 <_printf_common+0xa4>
 8001666:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800166a:	6822      	ldr	r2, [r4, #0]
 800166c:	3300      	adds	r3, #0
 800166e:	bf18      	it	ne
 8001670:	2301      	movne	r3, #1
 8001672:	0692      	lsls	r2, r2, #26
 8001674:	d42d      	bmi.n	80016d2 <_printf_common+0xbe>
 8001676:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800167a:	4639      	mov	r1, r7
 800167c:	4630      	mov	r0, r6
 800167e:	47c0      	blx	r8
 8001680:	3001      	adds	r0, #1
 8001682:	d020      	beq.n	80016c6 <_printf_common+0xb2>
 8001684:	6823      	ldr	r3, [r4, #0]
 8001686:	68e5      	ldr	r5, [r4, #12]
 8001688:	f8d9 2000 	ldr.w	r2, [r9]
 800168c:	f003 0306 	and.w	r3, r3, #6
 8001690:	2b04      	cmp	r3, #4
 8001692:	bf08      	it	eq
 8001694:	1aad      	subeq	r5, r5, r2
 8001696:	68a3      	ldr	r3, [r4, #8]
 8001698:	6922      	ldr	r2, [r4, #16]
 800169a:	bf0c      	ite	eq
 800169c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80016a0:	2500      	movne	r5, #0
 80016a2:	4293      	cmp	r3, r2
 80016a4:	bfc4      	itt	gt
 80016a6:	1a9b      	subgt	r3, r3, r2
 80016a8:	18ed      	addgt	r5, r5, r3
 80016aa:	f04f 0900 	mov.w	r9, #0
 80016ae:	341a      	adds	r4, #26
 80016b0:	454d      	cmp	r5, r9
 80016b2:	d11a      	bne.n	80016ea <_printf_common+0xd6>
 80016b4:	2000      	movs	r0, #0
 80016b6:	e008      	b.n	80016ca <_printf_common+0xb6>
 80016b8:	2301      	movs	r3, #1
 80016ba:	4652      	mov	r2, sl
 80016bc:	4639      	mov	r1, r7
 80016be:	4630      	mov	r0, r6
 80016c0:	47c0      	blx	r8
 80016c2:	3001      	adds	r0, #1
 80016c4:	d103      	bne.n	80016ce <_printf_common+0xba>
 80016c6:	f04f 30ff 	mov.w	r0, #4294967295
 80016ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80016ce:	3501      	adds	r5, #1
 80016d0:	e7c3      	b.n	800165a <_printf_common+0x46>
 80016d2:	18e1      	adds	r1, r4, r3
 80016d4:	1c5a      	adds	r2, r3, #1
 80016d6:	2030      	movs	r0, #48	; 0x30
 80016d8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80016dc:	4422      	add	r2, r4
 80016de:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80016e2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80016e6:	3302      	adds	r3, #2
 80016e8:	e7c5      	b.n	8001676 <_printf_common+0x62>
 80016ea:	2301      	movs	r3, #1
 80016ec:	4622      	mov	r2, r4
 80016ee:	4639      	mov	r1, r7
 80016f0:	4630      	mov	r0, r6
 80016f2:	47c0      	blx	r8
 80016f4:	3001      	adds	r0, #1
 80016f6:	d0e6      	beq.n	80016c6 <_printf_common+0xb2>
 80016f8:	f109 0901 	add.w	r9, r9, #1
 80016fc:	e7d8      	b.n	80016b0 <_printf_common+0x9c>
	...

08001700 <_printf_i>:
 8001700:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001704:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8001708:	460c      	mov	r4, r1
 800170a:	7e09      	ldrb	r1, [r1, #24]
 800170c:	b085      	sub	sp, #20
 800170e:	296e      	cmp	r1, #110	; 0x6e
 8001710:	4617      	mov	r7, r2
 8001712:	4606      	mov	r6, r0
 8001714:	4698      	mov	r8, r3
 8001716:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001718:	f000 80b3 	beq.w	8001882 <_printf_i+0x182>
 800171c:	d822      	bhi.n	8001764 <_printf_i+0x64>
 800171e:	2963      	cmp	r1, #99	; 0x63
 8001720:	d036      	beq.n	8001790 <_printf_i+0x90>
 8001722:	d80a      	bhi.n	800173a <_printf_i+0x3a>
 8001724:	2900      	cmp	r1, #0
 8001726:	f000 80b9 	beq.w	800189c <_printf_i+0x19c>
 800172a:	2958      	cmp	r1, #88	; 0x58
 800172c:	f000 8083 	beq.w	8001836 <_printf_i+0x136>
 8001730:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001734:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8001738:	e032      	b.n	80017a0 <_printf_i+0xa0>
 800173a:	2964      	cmp	r1, #100	; 0x64
 800173c:	d001      	beq.n	8001742 <_printf_i+0x42>
 800173e:	2969      	cmp	r1, #105	; 0x69
 8001740:	d1f6      	bne.n	8001730 <_printf_i+0x30>
 8001742:	6820      	ldr	r0, [r4, #0]
 8001744:	6813      	ldr	r3, [r2, #0]
 8001746:	0605      	lsls	r5, r0, #24
 8001748:	f103 0104 	add.w	r1, r3, #4
 800174c:	d52a      	bpl.n	80017a4 <_printf_i+0xa4>
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	6011      	str	r1, [r2, #0]
 8001752:	2b00      	cmp	r3, #0
 8001754:	da03      	bge.n	800175e <_printf_i+0x5e>
 8001756:	222d      	movs	r2, #45	; 0x2d
 8001758:	425b      	negs	r3, r3
 800175a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800175e:	486f      	ldr	r0, [pc, #444]	; (800191c <_printf_i+0x21c>)
 8001760:	220a      	movs	r2, #10
 8001762:	e039      	b.n	80017d8 <_printf_i+0xd8>
 8001764:	2973      	cmp	r1, #115	; 0x73
 8001766:	f000 809d 	beq.w	80018a4 <_printf_i+0x1a4>
 800176a:	d808      	bhi.n	800177e <_printf_i+0x7e>
 800176c:	296f      	cmp	r1, #111	; 0x6f
 800176e:	d020      	beq.n	80017b2 <_printf_i+0xb2>
 8001770:	2970      	cmp	r1, #112	; 0x70
 8001772:	d1dd      	bne.n	8001730 <_printf_i+0x30>
 8001774:	6823      	ldr	r3, [r4, #0]
 8001776:	f043 0320 	orr.w	r3, r3, #32
 800177a:	6023      	str	r3, [r4, #0]
 800177c:	e003      	b.n	8001786 <_printf_i+0x86>
 800177e:	2975      	cmp	r1, #117	; 0x75
 8001780:	d017      	beq.n	80017b2 <_printf_i+0xb2>
 8001782:	2978      	cmp	r1, #120	; 0x78
 8001784:	d1d4      	bne.n	8001730 <_printf_i+0x30>
 8001786:	2378      	movs	r3, #120	; 0x78
 8001788:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800178c:	4864      	ldr	r0, [pc, #400]	; (8001920 <_printf_i+0x220>)
 800178e:	e055      	b.n	800183c <_printf_i+0x13c>
 8001790:	6813      	ldr	r3, [r2, #0]
 8001792:	1d19      	adds	r1, r3, #4
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	6011      	str	r1, [r2, #0]
 8001798:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800179c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80017a0:	2301      	movs	r3, #1
 80017a2:	e08c      	b.n	80018be <_printf_i+0x1be>
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	6011      	str	r1, [r2, #0]
 80017a8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80017ac:	bf18      	it	ne
 80017ae:	b21b      	sxthne	r3, r3
 80017b0:	e7cf      	b.n	8001752 <_printf_i+0x52>
 80017b2:	6813      	ldr	r3, [r2, #0]
 80017b4:	6825      	ldr	r5, [r4, #0]
 80017b6:	1d18      	adds	r0, r3, #4
 80017b8:	6010      	str	r0, [r2, #0]
 80017ba:	0628      	lsls	r0, r5, #24
 80017bc:	d501      	bpl.n	80017c2 <_printf_i+0xc2>
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	e002      	b.n	80017c8 <_printf_i+0xc8>
 80017c2:	0668      	lsls	r0, r5, #25
 80017c4:	d5fb      	bpl.n	80017be <_printf_i+0xbe>
 80017c6:	881b      	ldrh	r3, [r3, #0]
 80017c8:	4854      	ldr	r0, [pc, #336]	; (800191c <_printf_i+0x21c>)
 80017ca:	296f      	cmp	r1, #111	; 0x6f
 80017cc:	bf14      	ite	ne
 80017ce:	220a      	movne	r2, #10
 80017d0:	2208      	moveq	r2, #8
 80017d2:	2100      	movs	r1, #0
 80017d4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80017d8:	6865      	ldr	r5, [r4, #4]
 80017da:	60a5      	str	r5, [r4, #8]
 80017dc:	2d00      	cmp	r5, #0
 80017de:	f2c0 8095 	blt.w	800190c <_printf_i+0x20c>
 80017e2:	6821      	ldr	r1, [r4, #0]
 80017e4:	f021 0104 	bic.w	r1, r1, #4
 80017e8:	6021      	str	r1, [r4, #0]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d13d      	bne.n	800186a <_printf_i+0x16a>
 80017ee:	2d00      	cmp	r5, #0
 80017f0:	f040 808e 	bne.w	8001910 <_printf_i+0x210>
 80017f4:	4665      	mov	r5, ip
 80017f6:	2a08      	cmp	r2, #8
 80017f8:	d10b      	bne.n	8001812 <_printf_i+0x112>
 80017fa:	6823      	ldr	r3, [r4, #0]
 80017fc:	07db      	lsls	r3, r3, #31
 80017fe:	d508      	bpl.n	8001812 <_printf_i+0x112>
 8001800:	6923      	ldr	r3, [r4, #16]
 8001802:	6862      	ldr	r2, [r4, #4]
 8001804:	429a      	cmp	r2, r3
 8001806:	bfde      	ittt	le
 8001808:	2330      	movle	r3, #48	; 0x30
 800180a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800180e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001812:	ebac 0305 	sub.w	r3, ip, r5
 8001816:	6123      	str	r3, [r4, #16]
 8001818:	f8cd 8000 	str.w	r8, [sp]
 800181c:	463b      	mov	r3, r7
 800181e:	aa03      	add	r2, sp, #12
 8001820:	4621      	mov	r1, r4
 8001822:	4630      	mov	r0, r6
 8001824:	f7ff fef6 	bl	8001614 <_printf_common>
 8001828:	3001      	adds	r0, #1
 800182a:	d14d      	bne.n	80018c8 <_printf_i+0x1c8>
 800182c:	f04f 30ff 	mov.w	r0, #4294967295
 8001830:	b005      	add	sp, #20
 8001832:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001836:	4839      	ldr	r0, [pc, #228]	; (800191c <_printf_i+0x21c>)
 8001838:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800183c:	6813      	ldr	r3, [r2, #0]
 800183e:	6821      	ldr	r1, [r4, #0]
 8001840:	1d1d      	adds	r5, r3, #4
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	6015      	str	r5, [r2, #0]
 8001846:	060a      	lsls	r2, r1, #24
 8001848:	d50b      	bpl.n	8001862 <_printf_i+0x162>
 800184a:	07ca      	lsls	r2, r1, #31
 800184c:	bf44      	itt	mi
 800184e:	f041 0120 	orrmi.w	r1, r1, #32
 8001852:	6021      	strmi	r1, [r4, #0]
 8001854:	b91b      	cbnz	r3, 800185e <_printf_i+0x15e>
 8001856:	6822      	ldr	r2, [r4, #0]
 8001858:	f022 0220 	bic.w	r2, r2, #32
 800185c:	6022      	str	r2, [r4, #0]
 800185e:	2210      	movs	r2, #16
 8001860:	e7b7      	b.n	80017d2 <_printf_i+0xd2>
 8001862:	064d      	lsls	r5, r1, #25
 8001864:	bf48      	it	mi
 8001866:	b29b      	uxthmi	r3, r3
 8001868:	e7ef      	b.n	800184a <_printf_i+0x14a>
 800186a:	4665      	mov	r5, ip
 800186c:	fbb3 f1f2 	udiv	r1, r3, r2
 8001870:	fb02 3311 	mls	r3, r2, r1, r3
 8001874:	5cc3      	ldrb	r3, [r0, r3]
 8001876:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800187a:	460b      	mov	r3, r1
 800187c:	2900      	cmp	r1, #0
 800187e:	d1f5      	bne.n	800186c <_printf_i+0x16c>
 8001880:	e7b9      	b.n	80017f6 <_printf_i+0xf6>
 8001882:	6813      	ldr	r3, [r2, #0]
 8001884:	6825      	ldr	r5, [r4, #0]
 8001886:	6961      	ldr	r1, [r4, #20]
 8001888:	1d18      	adds	r0, r3, #4
 800188a:	6010      	str	r0, [r2, #0]
 800188c:	0628      	lsls	r0, r5, #24
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	d501      	bpl.n	8001896 <_printf_i+0x196>
 8001892:	6019      	str	r1, [r3, #0]
 8001894:	e002      	b.n	800189c <_printf_i+0x19c>
 8001896:	066a      	lsls	r2, r5, #25
 8001898:	d5fb      	bpl.n	8001892 <_printf_i+0x192>
 800189a:	8019      	strh	r1, [r3, #0]
 800189c:	2300      	movs	r3, #0
 800189e:	6123      	str	r3, [r4, #16]
 80018a0:	4665      	mov	r5, ip
 80018a2:	e7b9      	b.n	8001818 <_printf_i+0x118>
 80018a4:	6813      	ldr	r3, [r2, #0]
 80018a6:	1d19      	adds	r1, r3, #4
 80018a8:	6011      	str	r1, [r2, #0]
 80018aa:	681d      	ldr	r5, [r3, #0]
 80018ac:	6862      	ldr	r2, [r4, #4]
 80018ae:	2100      	movs	r1, #0
 80018b0:	4628      	mov	r0, r5
 80018b2:	f7fe fc9d 	bl	80001f0 <memchr>
 80018b6:	b108      	cbz	r0, 80018bc <_printf_i+0x1bc>
 80018b8:	1b40      	subs	r0, r0, r5
 80018ba:	6060      	str	r0, [r4, #4]
 80018bc:	6863      	ldr	r3, [r4, #4]
 80018be:	6123      	str	r3, [r4, #16]
 80018c0:	2300      	movs	r3, #0
 80018c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80018c6:	e7a7      	b.n	8001818 <_printf_i+0x118>
 80018c8:	6923      	ldr	r3, [r4, #16]
 80018ca:	462a      	mov	r2, r5
 80018cc:	4639      	mov	r1, r7
 80018ce:	4630      	mov	r0, r6
 80018d0:	47c0      	blx	r8
 80018d2:	3001      	adds	r0, #1
 80018d4:	d0aa      	beq.n	800182c <_printf_i+0x12c>
 80018d6:	6823      	ldr	r3, [r4, #0]
 80018d8:	079b      	lsls	r3, r3, #30
 80018da:	d413      	bmi.n	8001904 <_printf_i+0x204>
 80018dc:	68e0      	ldr	r0, [r4, #12]
 80018de:	9b03      	ldr	r3, [sp, #12]
 80018e0:	4298      	cmp	r0, r3
 80018e2:	bfb8      	it	lt
 80018e4:	4618      	movlt	r0, r3
 80018e6:	e7a3      	b.n	8001830 <_printf_i+0x130>
 80018e8:	2301      	movs	r3, #1
 80018ea:	464a      	mov	r2, r9
 80018ec:	4639      	mov	r1, r7
 80018ee:	4630      	mov	r0, r6
 80018f0:	47c0      	blx	r8
 80018f2:	3001      	adds	r0, #1
 80018f4:	d09a      	beq.n	800182c <_printf_i+0x12c>
 80018f6:	3501      	adds	r5, #1
 80018f8:	68e3      	ldr	r3, [r4, #12]
 80018fa:	9a03      	ldr	r2, [sp, #12]
 80018fc:	1a9b      	subs	r3, r3, r2
 80018fe:	42ab      	cmp	r3, r5
 8001900:	dcf2      	bgt.n	80018e8 <_printf_i+0x1e8>
 8001902:	e7eb      	b.n	80018dc <_printf_i+0x1dc>
 8001904:	2500      	movs	r5, #0
 8001906:	f104 0919 	add.w	r9, r4, #25
 800190a:	e7f5      	b.n	80018f8 <_printf_i+0x1f8>
 800190c:	2b00      	cmp	r3, #0
 800190e:	d1ac      	bne.n	800186a <_printf_i+0x16a>
 8001910:	7803      	ldrb	r3, [r0, #0]
 8001912:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001916:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800191a:	e76c      	b.n	80017f6 <_printf_i+0xf6>
 800191c:	080026e9 	.word	0x080026e9
 8001920:	080026fa 	.word	0x080026fa

08001924 <iprintf>:
 8001924:	b40f      	push	{r0, r1, r2, r3}
 8001926:	4b0a      	ldr	r3, [pc, #40]	; (8001950 <iprintf+0x2c>)
 8001928:	b513      	push	{r0, r1, r4, lr}
 800192a:	681c      	ldr	r4, [r3, #0]
 800192c:	b124      	cbz	r4, 8001938 <iprintf+0x14>
 800192e:	69a3      	ldr	r3, [r4, #24]
 8001930:	b913      	cbnz	r3, 8001938 <iprintf+0x14>
 8001932:	4620      	mov	r0, r4
 8001934:	f000 fa36 	bl	8001da4 <__sinit>
 8001938:	ab05      	add	r3, sp, #20
 800193a:	9a04      	ldr	r2, [sp, #16]
 800193c:	68a1      	ldr	r1, [r4, #8]
 800193e:	9301      	str	r3, [sp, #4]
 8001940:	4620      	mov	r0, r4
 8001942:	f7ff fd47 	bl	80013d4 <_vfiprintf_r>
 8001946:	b002      	add	sp, #8
 8001948:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800194c:	b004      	add	sp, #16
 800194e:	4770      	bx	lr
 8001950:	2000001c 	.word	0x2000001c

08001954 <putchar>:
 8001954:	b538      	push	{r3, r4, r5, lr}
 8001956:	4b08      	ldr	r3, [pc, #32]	; (8001978 <putchar+0x24>)
 8001958:	681c      	ldr	r4, [r3, #0]
 800195a:	4605      	mov	r5, r0
 800195c:	b124      	cbz	r4, 8001968 <putchar+0x14>
 800195e:	69a3      	ldr	r3, [r4, #24]
 8001960:	b913      	cbnz	r3, 8001968 <putchar+0x14>
 8001962:	4620      	mov	r0, r4
 8001964:	f000 fa1e 	bl	8001da4 <__sinit>
 8001968:	68a2      	ldr	r2, [r4, #8]
 800196a:	4629      	mov	r1, r5
 800196c:	4620      	mov	r0, r4
 800196e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001972:	f000 bbad 	b.w	80020d0 <_putc_r>
 8001976:	bf00      	nop
 8001978:	2000001c 	.word	0x2000001c

0800197c <_puts_r>:
 800197c:	b570      	push	{r4, r5, r6, lr}
 800197e:	460e      	mov	r6, r1
 8001980:	4605      	mov	r5, r0
 8001982:	b118      	cbz	r0, 800198c <_puts_r+0x10>
 8001984:	6983      	ldr	r3, [r0, #24]
 8001986:	b90b      	cbnz	r3, 800198c <_puts_r+0x10>
 8001988:	f000 fa0c 	bl	8001da4 <__sinit>
 800198c:	69ab      	ldr	r3, [r5, #24]
 800198e:	68ac      	ldr	r4, [r5, #8]
 8001990:	b913      	cbnz	r3, 8001998 <_puts_r+0x1c>
 8001992:	4628      	mov	r0, r5
 8001994:	f000 fa06 	bl	8001da4 <__sinit>
 8001998:	4b23      	ldr	r3, [pc, #140]	; (8001a28 <_puts_r+0xac>)
 800199a:	429c      	cmp	r4, r3
 800199c:	d117      	bne.n	80019ce <_puts_r+0x52>
 800199e:	686c      	ldr	r4, [r5, #4]
 80019a0:	89a3      	ldrh	r3, [r4, #12]
 80019a2:	071b      	lsls	r3, r3, #28
 80019a4:	d51d      	bpl.n	80019e2 <_puts_r+0x66>
 80019a6:	6923      	ldr	r3, [r4, #16]
 80019a8:	b1db      	cbz	r3, 80019e2 <_puts_r+0x66>
 80019aa:	3e01      	subs	r6, #1
 80019ac:	68a3      	ldr	r3, [r4, #8]
 80019ae:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80019b2:	3b01      	subs	r3, #1
 80019b4:	60a3      	str	r3, [r4, #8]
 80019b6:	b9e9      	cbnz	r1, 80019f4 <_puts_r+0x78>
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	da2e      	bge.n	8001a1a <_puts_r+0x9e>
 80019bc:	4622      	mov	r2, r4
 80019be:	210a      	movs	r1, #10
 80019c0:	4628      	mov	r0, r5
 80019c2:	f000 f83f 	bl	8001a44 <__swbuf_r>
 80019c6:	3001      	adds	r0, #1
 80019c8:	d011      	beq.n	80019ee <_puts_r+0x72>
 80019ca:	200a      	movs	r0, #10
 80019cc:	e011      	b.n	80019f2 <_puts_r+0x76>
 80019ce:	4b17      	ldr	r3, [pc, #92]	; (8001a2c <_puts_r+0xb0>)
 80019d0:	429c      	cmp	r4, r3
 80019d2:	d101      	bne.n	80019d8 <_puts_r+0x5c>
 80019d4:	68ac      	ldr	r4, [r5, #8]
 80019d6:	e7e3      	b.n	80019a0 <_puts_r+0x24>
 80019d8:	4b15      	ldr	r3, [pc, #84]	; (8001a30 <_puts_r+0xb4>)
 80019da:	429c      	cmp	r4, r3
 80019dc:	bf08      	it	eq
 80019de:	68ec      	ldreq	r4, [r5, #12]
 80019e0:	e7de      	b.n	80019a0 <_puts_r+0x24>
 80019e2:	4621      	mov	r1, r4
 80019e4:	4628      	mov	r0, r5
 80019e6:	f000 f87f 	bl	8001ae8 <__swsetup_r>
 80019ea:	2800      	cmp	r0, #0
 80019ec:	d0dd      	beq.n	80019aa <_puts_r+0x2e>
 80019ee:	f04f 30ff 	mov.w	r0, #4294967295
 80019f2:	bd70      	pop	{r4, r5, r6, pc}
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	da04      	bge.n	8001a02 <_puts_r+0x86>
 80019f8:	69a2      	ldr	r2, [r4, #24]
 80019fa:	429a      	cmp	r2, r3
 80019fc:	dc06      	bgt.n	8001a0c <_puts_r+0x90>
 80019fe:	290a      	cmp	r1, #10
 8001a00:	d004      	beq.n	8001a0c <_puts_r+0x90>
 8001a02:	6823      	ldr	r3, [r4, #0]
 8001a04:	1c5a      	adds	r2, r3, #1
 8001a06:	6022      	str	r2, [r4, #0]
 8001a08:	7019      	strb	r1, [r3, #0]
 8001a0a:	e7cf      	b.n	80019ac <_puts_r+0x30>
 8001a0c:	4622      	mov	r2, r4
 8001a0e:	4628      	mov	r0, r5
 8001a10:	f000 f818 	bl	8001a44 <__swbuf_r>
 8001a14:	3001      	adds	r0, #1
 8001a16:	d1c9      	bne.n	80019ac <_puts_r+0x30>
 8001a18:	e7e9      	b.n	80019ee <_puts_r+0x72>
 8001a1a:	6823      	ldr	r3, [r4, #0]
 8001a1c:	200a      	movs	r0, #10
 8001a1e:	1c5a      	adds	r2, r3, #1
 8001a20:	6022      	str	r2, [r4, #0]
 8001a22:	7018      	strb	r0, [r3, #0]
 8001a24:	e7e5      	b.n	80019f2 <_puts_r+0x76>
 8001a26:	bf00      	nop
 8001a28:	0800272c 	.word	0x0800272c
 8001a2c:	0800274c 	.word	0x0800274c
 8001a30:	0800270c 	.word	0x0800270c

08001a34 <puts>:
 8001a34:	4b02      	ldr	r3, [pc, #8]	; (8001a40 <puts+0xc>)
 8001a36:	4601      	mov	r1, r0
 8001a38:	6818      	ldr	r0, [r3, #0]
 8001a3a:	f7ff bf9f 	b.w	800197c <_puts_r>
 8001a3e:	bf00      	nop
 8001a40:	2000001c 	.word	0x2000001c

08001a44 <__swbuf_r>:
 8001a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a46:	460e      	mov	r6, r1
 8001a48:	4614      	mov	r4, r2
 8001a4a:	4605      	mov	r5, r0
 8001a4c:	b118      	cbz	r0, 8001a56 <__swbuf_r+0x12>
 8001a4e:	6983      	ldr	r3, [r0, #24]
 8001a50:	b90b      	cbnz	r3, 8001a56 <__swbuf_r+0x12>
 8001a52:	f000 f9a7 	bl	8001da4 <__sinit>
 8001a56:	4b21      	ldr	r3, [pc, #132]	; (8001adc <__swbuf_r+0x98>)
 8001a58:	429c      	cmp	r4, r3
 8001a5a:	d12a      	bne.n	8001ab2 <__swbuf_r+0x6e>
 8001a5c:	686c      	ldr	r4, [r5, #4]
 8001a5e:	69a3      	ldr	r3, [r4, #24]
 8001a60:	60a3      	str	r3, [r4, #8]
 8001a62:	89a3      	ldrh	r3, [r4, #12]
 8001a64:	071a      	lsls	r2, r3, #28
 8001a66:	d52e      	bpl.n	8001ac6 <__swbuf_r+0x82>
 8001a68:	6923      	ldr	r3, [r4, #16]
 8001a6a:	b363      	cbz	r3, 8001ac6 <__swbuf_r+0x82>
 8001a6c:	6923      	ldr	r3, [r4, #16]
 8001a6e:	6820      	ldr	r0, [r4, #0]
 8001a70:	1ac0      	subs	r0, r0, r3
 8001a72:	6963      	ldr	r3, [r4, #20]
 8001a74:	b2f6      	uxtb	r6, r6
 8001a76:	4283      	cmp	r3, r0
 8001a78:	4637      	mov	r7, r6
 8001a7a:	dc04      	bgt.n	8001a86 <__swbuf_r+0x42>
 8001a7c:	4621      	mov	r1, r4
 8001a7e:	4628      	mov	r0, r5
 8001a80:	f000 f926 	bl	8001cd0 <_fflush_r>
 8001a84:	bb28      	cbnz	r0, 8001ad2 <__swbuf_r+0x8e>
 8001a86:	68a3      	ldr	r3, [r4, #8]
 8001a88:	3b01      	subs	r3, #1
 8001a8a:	60a3      	str	r3, [r4, #8]
 8001a8c:	6823      	ldr	r3, [r4, #0]
 8001a8e:	1c5a      	adds	r2, r3, #1
 8001a90:	6022      	str	r2, [r4, #0]
 8001a92:	701e      	strb	r6, [r3, #0]
 8001a94:	6963      	ldr	r3, [r4, #20]
 8001a96:	3001      	adds	r0, #1
 8001a98:	4283      	cmp	r3, r0
 8001a9a:	d004      	beq.n	8001aa6 <__swbuf_r+0x62>
 8001a9c:	89a3      	ldrh	r3, [r4, #12]
 8001a9e:	07db      	lsls	r3, r3, #31
 8001aa0:	d519      	bpl.n	8001ad6 <__swbuf_r+0x92>
 8001aa2:	2e0a      	cmp	r6, #10
 8001aa4:	d117      	bne.n	8001ad6 <__swbuf_r+0x92>
 8001aa6:	4621      	mov	r1, r4
 8001aa8:	4628      	mov	r0, r5
 8001aaa:	f000 f911 	bl	8001cd0 <_fflush_r>
 8001aae:	b190      	cbz	r0, 8001ad6 <__swbuf_r+0x92>
 8001ab0:	e00f      	b.n	8001ad2 <__swbuf_r+0x8e>
 8001ab2:	4b0b      	ldr	r3, [pc, #44]	; (8001ae0 <__swbuf_r+0x9c>)
 8001ab4:	429c      	cmp	r4, r3
 8001ab6:	d101      	bne.n	8001abc <__swbuf_r+0x78>
 8001ab8:	68ac      	ldr	r4, [r5, #8]
 8001aba:	e7d0      	b.n	8001a5e <__swbuf_r+0x1a>
 8001abc:	4b09      	ldr	r3, [pc, #36]	; (8001ae4 <__swbuf_r+0xa0>)
 8001abe:	429c      	cmp	r4, r3
 8001ac0:	bf08      	it	eq
 8001ac2:	68ec      	ldreq	r4, [r5, #12]
 8001ac4:	e7cb      	b.n	8001a5e <__swbuf_r+0x1a>
 8001ac6:	4621      	mov	r1, r4
 8001ac8:	4628      	mov	r0, r5
 8001aca:	f000 f80d 	bl	8001ae8 <__swsetup_r>
 8001ace:	2800      	cmp	r0, #0
 8001ad0:	d0cc      	beq.n	8001a6c <__swbuf_r+0x28>
 8001ad2:	f04f 37ff 	mov.w	r7, #4294967295
 8001ad6:	4638      	mov	r0, r7
 8001ad8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ada:	bf00      	nop
 8001adc:	0800272c 	.word	0x0800272c
 8001ae0:	0800274c 	.word	0x0800274c
 8001ae4:	0800270c 	.word	0x0800270c

08001ae8 <__swsetup_r>:
 8001ae8:	4b32      	ldr	r3, [pc, #200]	; (8001bb4 <__swsetup_r+0xcc>)
 8001aea:	b570      	push	{r4, r5, r6, lr}
 8001aec:	681d      	ldr	r5, [r3, #0]
 8001aee:	4606      	mov	r6, r0
 8001af0:	460c      	mov	r4, r1
 8001af2:	b125      	cbz	r5, 8001afe <__swsetup_r+0x16>
 8001af4:	69ab      	ldr	r3, [r5, #24]
 8001af6:	b913      	cbnz	r3, 8001afe <__swsetup_r+0x16>
 8001af8:	4628      	mov	r0, r5
 8001afa:	f000 f953 	bl	8001da4 <__sinit>
 8001afe:	4b2e      	ldr	r3, [pc, #184]	; (8001bb8 <__swsetup_r+0xd0>)
 8001b00:	429c      	cmp	r4, r3
 8001b02:	d10f      	bne.n	8001b24 <__swsetup_r+0x3c>
 8001b04:	686c      	ldr	r4, [r5, #4]
 8001b06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001b0a:	b29a      	uxth	r2, r3
 8001b0c:	0715      	lsls	r5, r2, #28
 8001b0e:	d42c      	bmi.n	8001b6a <__swsetup_r+0x82>
 8001b10:	06d0      	lsls	r0, r2, #27
 8001b12:	d411      	bmi.n	8001b38 <__swsetup_r+0x50>
 8001b14:	2209      	movs	r2, #9
 8001b16:	6032      	str	r2, [r6, #0]
 8001b18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b1c:	81a3      	strh	r3, [r4, #12]
 8001b1e:	f04f 30ff 	mov.w	r0, #4294967295
 8001b22:	e03e      	b.n	8001ba2 <__swsetup_r+0xba>
 8001b24:	4b25      	ldr	r3, [pc, #148]	; (8001bbc <__swsetup_r+0xd4>)
 8001b26:	429c      	cmp	r4, r3
 8001b28:	d101      	bne.n	8001b2e <__swsetup_r+0x46>
 8001b2a:	68ac      	ldr	r4, [r5, #8]
 8001b2c:	e7eb      	b.n	8001b06 <__swsetup_r+0x1e>
 8001b2e:	4b24      	ldr	r3, [pc, #144]	; (8001bc0 <__swsetup_r+0xd8>)
 8001b30:	429c      	cmp	r4, r3
 8001b32:	bf08      	it	eq
 8001b34:	68ec      	ldreq	r4, [r5, #12]
 8001b36:	e7e6      	b.n	8001b06 <__swsetup_r+0x1e>
 8001b38:	0751      	lsls	r1, r2, #29
 8001b3a:	d512      	bpl.n	8001b62 <__swsetup_r+0x7a>
 8001b3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001b3e:	b141      	cbz	r1, 8001b52 <__swsetup_r+0x6a>
 8001b40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001b44:	4299      	cmp	r1, r3
 8001b46:	d002      	beq.n	8001b4e <__swsetup_r+0x66>
 8001b48:	4630      	mov	r0, r6
 8001b4a:	f000 fa19 	bl	8001f80 <_free_r>
 8001b4e:	2300      	movs	r3, #0
 8001b50:	6363      	str	r3, [r4, #52]	; 0x34
 8001b52:	89a3      	ldrh	r3, [r4, #12]
 8001b54:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001b58:	81a3      	strh	r3, [r4, #12]
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	6063      	str	r3, [r4, #4]
 8001b5e:	6923      	ldr	r3, [r4, #16]
 8001b60:	6023      	str	r3, [r4, #0]
 8001b62:	89a3      	ldrh	r3, [r4, #12]
 8001b64:	f043 0308 	orr.w	r3, r3, #8
 8001b68:	81a3      	strh	r3, [r4, #12]
 8001b6a:	6923      	ldr	r3, [r4, #16]
 8001b6c:	b94b      	cbnz	r3, 8001b82 <__swsetup_r+0x9a>
 8001b6e:	89a3      	ldrh	r3, [r4, #12]
 8001b70:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001b74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b78:	d003      	beq.n	8001b82 <__swsetup_r+0x9a>
 8001b7a:	4621      	mov	r1, r4
 8001b7c:	4630      	mov	r0, r6
 8001b7e:	f000 f9bf 	bl	8001f00 <__smakebuf_r>
 8001b82:	89a2      	ldrh	r2, [r4, #12]
 8001b84:	f012 0301 	ands.w	r3, r2, #1
 8001b88:	d00c      	beq.n	8001ba4 <__swsetup_r+0xbc>
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	60a3      	str	r3, [r4, #8]
 8001b8e:	6963      	ldr	r3, [r4, #20]
 8001b90:	425b      	negs	r3, r3
 8001b92:	61a3      	str	r3, [r4, #24]
 8001b94:	6923      	ldr	r3, [r4, #16]
 8001b96:	b953      	cbnz	r3, 8001bae <__swsetup_r+0xc6>
 8001b98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001b9c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8001ba0:	d1ba      	bne.n	8001b18 <__swsetup_r+0x30>
 8001ba2:	bd70      	pop	{r4, r5, r6, pc}
 8001ba4:	0792      	lsls	r2, r2, #30
 8001ba6:	bf58      	it	pl
 8001ba8:	6963      	ldrpl	r3, [r4, #20]
 8001baa:	60a3      	str	r3, [r4, #8]
 8001bac:	e7f2      	b.n	8001b94 <__swsetup_r+0xac>
 8001bae:	2000      	movs	r0, #0
 8001bb0:	e7f7      	b.n	8001ba2 <__swsetup_r+0xba>
 8001bb2:	bf00      	nop
 8001bb4:	2000001c 	.word	0x2000001c
 8001bb8:	0800272c 	.word	0x0800272c
 8001bbc:	0800274c 	.word	0x0800274c
 8001bc0:	0800270c 	.word	0x0800270c

08001bc4 <__sflush_r>:
 8001bc4:	898a      	ldrh	r2, [r1, #12]
 8001bc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001bca:	4605      	mov	r5, r0
 8001bcc:	0710      	lsls	r0, r2, #28
 8001bce:	460c      	mov	r4, r1
 8001bd0:	d458      	bmi.n	8001c84 <__sflush_r+0xc0>
 8001bd2:	684b      	ldr	r3, [r1, #4]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	dc05      	bgt.n	8001be4 <__sflush_r+0x20>
 8001bd8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	dc02      	bgt.n	8001be4 <__sflush_r+0x20>
 8001bde:	2000      	movs	r0, #0
 8001be0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001be4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001be6:	2e00      	cmp	r6, #0
 8001be8:	d0f9      	beq.n	8001bde <__sflush_r+0x1a>
 8001bea:	2300      	movs	r3, #0
 8001bec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001bf0:	682f      	ldr	r7, [r5, #0]
 8001bf2:	6a21      	ldr	r1, [r4, #32]
 8001bf4:	602b      	str	r3, [r5, #0]
 8001bf6:	d032      	beq.n	8001c5e <__sflush_r+0x9a>
 8001bf8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001bfa:	89a3      	ldrh	r3, [r4, #12]
 8001bfc:	075a      	lsls	r2, r3, #29
 8001bfe:	d505      	bpl.n	8001c0c <__sflush_r+0x48>
 8001c00:	6863      	ldr	r3, [r4, #4]
 8001c02:	1ac0      	subs	r0, r0, r3
 8001c04:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001c06:	b10b      	cbz	r3, 8001c0c <__sflush_r+0x48>
 8001c08:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001c0a:	1ac0      	subs	r0, r0, r3
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	4602      	mov	r2, r0
 8001c10:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001c12:	6a21      	ldr	r1, [r4, #32]
 8001c14:	4628      	mov	r0, r5
 8001c16:	47b0      	blx	r6
 8001c18:	1c43      	adds	r3, r0, #1
 8001c1a:	89a3      	ldrh	r3, [r4, #12]
 8001c1c:	d106      	bne.n	8001c2c <__sflush_r+0x68>
 8001c1e:	6829      	ldr	r1, [r5, #0]
 8001c20:	291d      	cmp	r1, #29
 8001c22:	d848      	bhi.n	8001cb6 <__sflush_r+0xf2>
 8001c24:	4a29      	ldr	r2, [pc, #164]	; (8001ccc <__sflush_r+0x108>)
 8001c26:	40ca      	lsrs	r2, r1
 8001c28:	07d6      	lsls	r6, r2, #31
 8001c2a:	d544      	bpl.n	8001cb6 <__sflush_r+0xf2>
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	6062      	str	r2, [r4, #4]
 8001c30:	04d9      	lsls	r1, r3, #19
 8001c32:	6922      	ldr	r2, [r4, #16]
 8001c34:	6022      	str	r2, [r4, #0]
 8001c36:	d504      	bpl.n	8001c42 <__sflush_r+0x7e>
 8001c38:	1c42      	adds	r2, r0, #1
 8001c3a:	d101      	bne.n	8001c40 <__sflush_r+0x7c>
 8001c3c:	682b      	ldr	r3, [r5, #0]
 8001c3e:	b903      	cbnz	r3, 8001c42 <__sflush_r+0x7e>
 8001c40:	6560      	str	r0, [r4, #84]	; 0x54
 8001c42:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001c44:	602f      	str	r7, [r5, #0]
 8001c46:	2900      	cmp	r1, #0
 8001c48:	d0c9      	beq.n	8001bde <__sflush_r+0x1a>
 8001c4a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001c4e:	4299      	cmp	r1, r3
 8001c50:	d002      	beq.n	8001c58 <__sflush_r+0x94>
 8001c52:	4628      	mov	r0, r5
 8001c54:	f000 f994 	bl	8001f80 <_free_r>
 8001c58:	2000      	movs	r0, #0
 8001c5a:	6360      	str	r0, [r4, #52]	; 0x34
 8001c5c:	e7c0      	b.n	8001be0 <__sflush_r+0x1c>
 8001c5e:	2301      	movs	r3, #1
 8001c60:	4628      	mov	r0, r5
 8001c62:	47b0      	blx	r6
 8001c64:	1c41      	adds	r1, r0, #1
 8001c66:	d1c8      	bne.n	8001bfa <__sflush_r+0x36>
 8001c68:	682b      	ldr	r3, [r5, #0]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d0c5      	beq.n	8001bfa <__sflush_r+0x36>
 8001c6e:	2b1d      	cmp	r3, #29
 8001c70:	d001      	beq.n	8001c76 <__sflush_r+0xb2>
 8001c72:	2b16      	cmp	r3, #22
 8001c74:	d101      	bne.n	8001c7a <__sflush_r+0xb6>
 8001c76:	602f      	str	r7, [r5, #0]
 8001c78:	e7b1      	b.n	8001bde <__sflush_r+0x1a>
 8001c7a:	89a3      	ldrh	r3, [r4, #12]
 8001c7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c80:	81a3      	strh	r3, [r4, #12]
 8001c82:	e7ad      	b.n	8001be0 <__sflush_r+0x1c>
 8001c84:	690f      	ldr	r7, [r1, #16]
 8001c86:	2f00      	cmp	r7, #0
 8001c88:	d0a9      	beq.n	8001bde <__sflush_r+0x1a>
 8001c8a:	0793      	lsls	r3, r2, #30
 8001c8c:	680e      	ldr	r6, [r1, #0]
 8001c8e:	bf08      	it	eq
 8001c90:	694b      	ldreq	r3, [r1, #20]
 8001c92:	600f      	str	r7, [r1, #0]
 8001c94:	bf18      	it	ne
 8001c96:	2300      	movne	r3, #0
 8001c98:	eba6 0807 	sub.w	r8, r6, r7
 8001c9c:	608b      	str	r3, [r1, #8]
 8001c9e:	f1b8 0f00 	cmp.w	r8, #0
 8001ca2:	dd9c      	ble.n	8001bde <__sflush_r+0x1a>
 8001ca4:	4643      	mov	r3, r8
 8001ca6:	463a      	mov	r2, r7
 8001ca8:	6a21      	ldr	r1, [r4, #32]
 8001caa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001cac:	4628      	mov	r0, r5
 8001cae:	47b0      	blx	r6
 8001cb0:	2800      	cmp	r0, #0
 8001cb2:	dc06      	bgt.n	8001cc2 <__sflush_r+0xfe>
 8001cb4:	89a3      	ldrh	r3, [r4, #12]
 8001cb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001cba:	81a3      	strh	r3, [r4, #12]
 8001cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8001cc0:	e78e      	b.n	8001be0 <__sflush_r+0x1c>
 8001cc2:	4407      	add	r7, r0
 8001cc4:	eba8 0800 	sub.w	r8, r8, r0
 8001cc8:	e7e9      	b.n	8001c9e <__sflush_r+0xda>
 8001cca:	bf00      	nop
 8001ccc:	20400001 	.word	0x20400001

08001cd0 <_fflush_r>:
 8001cd0:	b538      	push	{r3, r4, r5, lr}
 8001cd2:	690b      	ldr	r3, [r1, #16]
 8001cd4:	4605      	mov	r5, r0
 8001cd6:	460c      	mov	r4, r1
 8001cd8:	b1db      	cbz	r3, 8001d12 <_fflush_r+0x42>
 8001cda:	b118      	cbz	r0, 8001ce4 <_fflush_r+0x14>
 8001cdc:	6983      	ldr	r3, [r0, #24]
 8001cde:	b90b      	cbnz	r3, 8001ce4 <_fflush_r+0x14>
 8001ce0:	f000 f860 	bl	8001da4 <__sinit>
 8001ce4:	4b0c      	ldr	r3, [pc, #48]	; (8001d18 <_fflush_r+0x48>)
 8001ce6:	429c      	cmp	r4, r3
 8001ce8:	d109      	bne.n	8001cfe <_fflush_r+0x2e>
 8001cea:	686c      	ldr	r4, [r5, #4]
 8001cec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001cf0:	b17b      	cbz	r3, 8001d12 <_fflush_r+0x42>
 8001cf2:	4621      	mov	r1, r4
 8001cf4:	4628      	mov	r0, r5
 8001cf6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001cfa:	f7ff bf63 	b.w	8001bc4 <__sflush_r>
 8001cfe:	4b07      	ldr	r3, [pc, #28]	; (8001d1c <_fflush_r+0x4c>)
 8001d00:	429c      	cmp	r4, r3
 8001d02:	d101      	bne.n	8001d08 <_fflush_r+0x38>
 8001d04:	68ac      	ldr	r4, [r5, #8]
 8001d06:	e7f1      	b.n	8001cec <_fflush_r+0x1c>
 8001d08:	4b05      	ldr	r3, [pc, #20]	; (8001d20 <_fflush_r+0x50>)
 8001d0a:	429c      	cmp	r4, r3
 8001d0c:	bf08      	it	eq
 8001d0e:	68ec      	ldreq	r4, [r5, #12]
 8001d10:	e7ec      	b.n	8001cec <_fflush_r+0x1c>
 8001d12:	2000      	movs	r0, #0
 8001d14:	bd38      	pop	{r3, r4, r5, pc}
 8001d16:	bf00      	nop
 8001d18:	0800272c 	.word	0x0800272c
 8001d1c:	0800274c 	.word	0x0800274c
 8001d20:	0800270c 	.word	0x0800270c

08001d24 <std>:
 8001d24:	2300      	movs	r3, #0
 8001d26:	b510      	push	{r4, lr}
 8001d28:	4604      	mov	r4, r0
 8001d2a:	e9c0 3300 	strd	r3, r3, [r0]
 8001d2e:	6083      	str	r3, [r0, #8]
 8001d30:	8181      	strh	r1, [r0, #12]
 8001d32:	6643      	str	r3, [r0, #100]	; 0x64
 8001d34:	81c2      	strh	r2, [r0, #14]
 8001d36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001d3a:	6183      	str	r3, [r0, #24]
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	2208      	movs	r2, #8
 8001d40:	305c      	adds	r0, #92	; 0x5c
 8001d42:	f7ff fb15 	bl	8001370 <memset>
 8001d46:	4b05      	ldr	r3, [pc, #20]	; (8001d5c <std+0x38>)
 8001d48:	6263      	str	r3, [r4, #36]	; 0x24
 8001d4a:	4b05      	ldr	r3, [pc, #20]	; (8001d60 <std+0x3c>)
 8001d4c:	62a3      	str	r3, [r4, #40]	; 0x28
 8001d4e:	4b05      	ldr	r3, [pc, #20]	; (8001d64 <std+0x40>)
 8001d50:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001d52:	4b05      	ldr	r3, [pc, #20]	; (8001d68 <std+0x44>)
 8001d54:	6224      	str	r4, [r4, #32]
 8001d56:	6323      	str	r3, [r4, #48]	; 0x30
 8001d58:	bd10      	pop	{r4, pc}
 8001d5a:	bf00      	nop
 8001d5c:	0800215d 	.word	0x0800215d
 8001d60:	0800217f 	.word	0x0800217f
 8001d64:	080021b7 	.word	0x080021b7
 8001d68:	080021db 	.word	0x080021db

08001d6c <_cleanup_r>:
 8001d6c:	4901      	ldr	r1, [pc, #4]	; (8001d74 <_cleanup_r+0x8>)
 8001d6e:	f000 b885 	b.w	8001e7c <_fwalk_reent>
 8001d72:	bf00      	nop
 8001d74:	08001cd1 	.word	0x08001cd1

08001d78 <__sfmoreglue>:
 8001d78:	b570      	push	{r4, r5, r6, lr}
 8001d7a:	1e4a      	subs	r2, r1, #1
 8001d7c:	2568      	movs	r5, #104	; 0x68
 8001d7e:	4355      	muls	r5, r2
 8001d80:	460e      	mov	r6, r1
 8001d82:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001d86:	f000 f949 	bl	800201c <_malloc_r>
 8001d8a:	4604      	mov	r4, r0
 8001d8c:	b140      	cbz	r0, 8001da0 <__sfmoreglue+0x28>
 8001d8e:	2100      	movs	r1, #0
 8001d90:	e9c0 1600 	strd	r1, r6, [r0]
 8001d94:	300c      	adds	r0, #12
 8001d96:	60a0      	str	r0, [r4, #8]
 8001d98:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001d9c:	f7ff fae8 	bl	8001370 <memset>
 8001da0:	4620      	mov	r0, r4
 8001da2:	bd70      	pop	{r4, r5, r6, pc}

08001da4 <__sinit>:
 8001da4:	6983      	ldr	r3, [r0, #24]
 8001da6:	b510      	push	{r4, lr}
 8001da8:	4604      	mov	r4, r0
 8001daa:	bb33      	cbnz	r3, 8001dfa <__sinit+0x56>
 8001dac:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8001db0:	6503      	str	r3, [r0, #80]	; 0x50
 8001db2:	4b12      	ldr	r3, [pc, #72]	; (8001dfc <__sinit+0x58>)
 8001db4:	4a12      	ldr	r2, [pc, #72]	; (8001e00 <__sinit+0x5c>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	6282      	str	r2, [r0, #40]	; 0x28
 8001dba:	4298      	cmp	r0, r3
 8001dbc:	bf04      	itt	eq
 8001dbe:	2301      	moveq	r3, #1
 8001dc0:	6183      	streq	r3, [r0, #24]
 8001dc2:	f000 f81f 	bl	8001e04 <__sfp>
 8001dc6:	6060      	str	r0, [r4, #4]
 8001dc8:	4620      	mov	r0, r4
 8001dca:	f000 f81b 	bl	8001e04 <__sfp>
 8001dce:	60a0      	str	r0, [r4, #8]
 8001dd0:	4620      	mov	r0, r4
 8001dd2:	f000 f817 	bl	8001e04 <__sfp>
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	60e0      	str	r0, [r4, #12]
 8001dda:	2104      	movs	r1, #4
 8001ddc:	6860      	ldr	r0, [r4, #4]
 8001dde:	f7ff ffa1 	bl	8001d24 <std>
 8001de2:	2201      	movs	r2, #1
 8001de4:	2109      	movs	r1, #9
 8001de6:	68a0      	ldr	r0, [r4, #8]
 8001de8:	f7ff ff9c 	bl	8001d24 <std>
 8001dec:	2202      	movs	r2, #2
 8001dee:	2112      	movs	r1, #18
 8001df0:	68e0      	ldr	r0, [r4, #12]
 8001df2:	f7ff ff97 	bl	8001d24 <std>
 8001df6:	2301      	movs	r3, #1
 8001df8:	61a3      	str	r3, [r4, #24]
 8001dfa:	bd10      	pop	{r4, pc}
 8001dfc:	080026d4 	.word	0x080026d4
 8001e00:	08001d6d 	.word	0x08001d6d

08001e04 <__sfp>:
 8001e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e06:	4b1b      	ldr	r3, [pc, #108]	; (8001e74 <__sfp+0x70>)
 8001e08:	681e      	ldr	r6, [r3, #0]
 8001e0a:	69b3      	ldr	r3, [r6, #24]
 8001e0c:	4607      	mov	r7, r0
 8001e0e:	b913      	cbnz	r3, 8001e16 <__sfp+0x12>
 8001e10:	4630      	mov	r0, r6
 8001e12:	f7ff ffc7 	bl	8001da4 <__sinit>
 8001e16:	3648      	adds	r6, #72	; 0x48
 8001e18:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001e1c:	3b01      	subs	r3, #1
 8001e1e:	d503      	bpl.n	8001e28 <__sfp+0x24>
 8001e20:	6833      	ldr	r3, [r6, #0]
 8001e22:	b133      	cbz	r3, 8001e32 <__sfp+0x2e>
 8001e24:	6836      	ldr	r6, [r6, #0]
 8001e26:	e7f7      	b.n	8001e18 <__sfp+0x14>
 8001e28:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001e2c:	b16d      	cbz	r5, 8001e4a <__sfp+0x46>
 8001e2e:	3468      	adds	r4, #104	; 0x68
 8001e30:	e7f4      	b.n	8001e1c <__sfp+0x18>
 8001e32:	2104      	movs	r1, #4
 8001e34:	4638      	mov	r0, r7
 8001e36:	f7ff ff9f 	bl	8001d78 <__sfmoreglue>
 8001e3a:	6030      	str	r0, [r6, #0]
 8001e3c:	2800      	cmp	r0, #0
 8001e3e:	d1f1      	bne.n	8001e24 <__sfp+0x20>
 8001e40:	230c      	movs	r3, #12
 8001e42:	603b      	str	r3, [r7, #0]
 8001e44:	4604      	mov	r4, r0
 8001e46:	4620      	mov	r0, r4
 8001e48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001e4a:	4b0b      	ldr	r3, [pc, #44]	; (8001e78 <__sfp+0x74>)
 8001e4c:	6665      	str	r5, [r4, #100]	; 0x64
 8001e4e:	e9c4 5500 	strd	r5, r5, [r4]
 8001e52:	60a5      	str	r5, [r4, #8]
 8001e54:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8001e58:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8001e5c:	2208      	movs	r2, #8
 8001e5e:	4629      	mov	r1, r5
 8001e60:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001e64:	f7ff fa84 	bl	8001370 <memset>
 8001e68:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001e6c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001e70:	e7e9      	b.n	8001e46 <__sfp+0x42>
 8001e72:	bf00      	nop
 8001e74:	080026d4 	.word	0x080026d4
 8001e78:	ffff0001 	.word	0xffff0001

08001e7c <_fwalk_reent>:
 8001e7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001e80:	4680      	mov	r8, r0
 8001e82:	4689      	mov	r9, r1
 8001e84:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001e88:	2600      	movs	r6, #0
 8001e8a:	b914      	cbnz	r4, 8001e92 <_fwalk_reent+0x16>
 8001e8c:	4630      	mov	r0, r6
 8001e8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001e92:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8001e96:	3f01      	subs	r7, #1
 8001e98:	d501      	bpl.n	8001e9e <_fwalk_reent+0x22>
 8001e9a:	6824      	ldr	r4, [r4, #0]
 8001e9c:	e7f5      	b.n	8001e8a <_fwalk_reent+0xe>
 8001e9e:	89ab      	ldrh	r3, [r5, #12]
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d907      	bls.n	8001eb4 <_fwalk_reent+0x38>
 8001ea4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	d003      	beq.n	8001eb4 <_fwalk_reent+0x38>
 8001eac:	4629      	mov	r1, r5
 8001eae:	4640      	mov	r0, r8
 8001eb0:	47c8      	blx	r9
 8001eb2:	4306      	orrs	r6, r0
 8001eb4:	3568      	adds	r5, #104	; 0x68
 8001eb6:	e7ee      	b.n	8001e96 <_fwalk_reent+0x1a>

08001eb8 <__swhatbuf_r>:
 8001eb8:	b570      	push	{r4, r5, r6, lr}
 8001eba:	460e      	mov	r6, r1
 8001ebc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ec0:	2900      	cmp	r1, #0
 8001ec2:	b096      	sub	sp, #88	; 0x58
 8001ec4:	4614      	mov	r4, r2
 8001ec6:	461d      	mov	r5, r3
 8001ec8:	da07      	bge.n	8001eda <__swhatbuf_r+0x22>
 8001eca:	2300      	movs	r3, #0
 8001ecc:	602b      	str	r3, [r5, #0]
 8001ece:	89b3      	ldrh	r3, [r6, #12]
 8001ed0:	061a      	lsls	r2, r3, #24
 8001ed2:	d410      	bmi.n	8001ef6 <__swhatbuf_r+0x3e>
 8001ed4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ed8:	e00e      	b.n	8001ef8 <__swhatbuf_r+0x40>
 8001eda:	466a      	mov	r2, sp
 8001edc:	f000 f9a4 	bl	8002228 <_fstat_r>
 8001ee0:	2800      	cmp	r0, #0
 8001ee2:	dbf2      	blt.n	8001eca <__swhatbuf_r+0x12>
 8001ee4:	9a01      	ldr	r2, [sp, #4]
 8001ee6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001eea:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001eee:	425a      	negs	r2, r3
 8001ef0:	415a      	adcs	r2, r3
 8001ef2:	602a      	str	r2, [r5, #0]
 8001ef4:	e7ee      	b.n	8001ed4 <__swhatbuf_r+0x1c>
 8001ef6:	2340      	movs	r3, #64	; 0x40
 8001ef8:	2000      	movs	r0, #0
 8001efa:	6023      	str	r3, [r4, #0]
 8001efc:	b016      	add	sp, #88	; 0x58
 8001efe:	bd70      	pop	{r4, r5, r6, pc}

08001f00 <__smakebuf_r>:
 8001f00:	898b      	ldrh	r3, [r1, #12]
 8001f02:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001f04:	079d      	lsls	r5, r3, #30
 8001f06:	4606      	mov	r6, r0
 8001f08:	460c      	mov	r4, r1
 8001f0a:	d507      	bpl.n	8001f1c <__smakebuf_r+0x1c>
 8001f0c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001f10:	6023      	str	r3, [r4, #0]
 8001f12:	6123      	str	r3, [r4, #16]
 8001f14:	2301      	movs	r3, #1
 8001f16:	6163      	str	r3, [r4, #20]
 8001f18:	b002      	add	sp, #8
 8001f1a:	bd70      	pop	{r4, r5, r6, pc}
 8001f1c:	ab01      	add	r3, sp, #4
 8001f1e:	466a      	mov	r2, sp
 8001f20:	f7ff ffca 	bl	8001eb8 <__swhatbuf_r>
 8001f24:	9900      	ldr	r1, [sp, #0]
 8001f26:	4605      	mov	r5, r0
 8001f28:	4630      	mov	r0, r6
 8001f2a:	f000 f877 	bl	800201c <_malloc_r>
 8001f2e:	b948      	cbnz	r0, 8001f44 <__smakebuf_r+0x44>
 8001f30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001f34:	059a      	lsls	r2, r3, #22
 8001f36:	d4ef      	bmi.n	8001f18 <__smakebuf_r+0x18>
 8001f38:	f023 0303 	bic.w	r3, r3, #3
 8001f3c:	f043 0302 	orr.w	r3, r3, #2
 8001f40:	81a3      	strh	r3, [r4, #12]
 8001f42:	e7e3      	b.n	8001f0c <__smakebuf_r+0xc>
 8001f44:	4b0d      	ldr	r3, [pc, #52]	; (8001f7c <__smakebuf_r+0x7c>)
 8001f46:	62b3      	str	r3, [r6, #40]	; 0x28
 8001f48:	89a3      	ldrh	r3, [r4, #12]
 8001f4a:	6020      	str	r0, [r4, #0]
 8001f4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f50:	81a3      	strh	r3, [r4, #12]
 8001f52:	9b00      	ldr	r3, [sp, #0]
 8001f54:	6163      	str	r3, [r4, #20]
 8001f56:	9b01      	ldr	r3, [sp, #4]
 8001f58:	6120      	str	r0, [r4, #16]
 8001f5a:	b15b      	cbz	r3, 8001f74 <__smakebuf_r+0x74>
 8001f5c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001f60:	4630      	mov	r0, r6
 8001f62:	f000 f973 	bl	800224c <_isatty_r>
 8001f66:	b128      	cbz	r0, 8001f74 <__smakebuf_r+0x74>
 8001f68:	89a3      	ldrh	r3, [r4, #12]
 8001f6a:	f023 0303 	bic.w	r3, r3, #3
 8001f6e:	f043 0301 	orr.w	r3, r3, #1
 8001f72:	81a3      	strh	r3, [r4, #12]
 8001f74:	89a3      	ldrh	r3, [r4, #12]
 8001f76:	431d      	orrs	r5, r3
 8001f78:	81a5      	strh	r5, [r4, #12]
 8001f7a:	e7cd      	b.n	8001f18 <__smakebuf_r+0x18>
 8001f7c:	08001d6d 	.word	0x08001d6d

08001f80 <_free_r>:
 8001f80:	b538      	push	{r3, r4, r5, lr}
 8001f82:	4605      	mov	r5, r0
 8001f84:	2900      	cmp	r1, #0
 8001f86:	d045      	beq.n	8002014 <_free_r+0x94>
 8001f88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001f8c:	1f0c      	subs	r4, r1, #4
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	bfb8      	it	lt
 8001f92:	18e4      	addlt	r4, r4, r3
 8001f94:	f000 f97c 	bl	8002290 <__malloc_lock>
 8001f98:	4a1f      	ldr	r2, [pc, #124]	; (8002018 <_free_r+0x98>)
 8001f9a:	6813      	ldr	r3, [r2, #0]
 8001f9c:	4610      	mov	r0, r2
 8001f9e:	b933      	cbnz	r3, 8001fae <_free_r+0x2e>
 8001fa0:	6063      	str	r3, [r4, #4]
 8001fa2:	6014      	str	r4, [r2, #0]
 8001fa4:	4628      	mov	r0, r5
 8001fa6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001faa:	f000 b972 	b.w	8002292 <__malloc_unlock>
 8001fae:	42a3      	cmp	r3, r4
 8001fb0:	d90c      	bls.n	8001fcc <_free_r+0x4c>
 8001fb2:	6821      	ldr	r1, [r4, #0]
 8001fb4:	1862      	adds	r2, r4, r1
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	bf04      	itt	eq
 8001fba:	681a      	ldreq	r2, [r3, #0]
 8001fbc:	685b      	ldreq	r3, [r3, #4]
 8001fbe:	6063      	str	r3, [r4, #4]
 8001fc0:	bf04      	itt	eq
 8001fc2:	1852      	addeq	r2, r2, r1
 8001fc4:	6022      	streq	r2, [r4, #0]
 8001fc6:	6004      	str	r4, [r0, #0]
 8001fc8:	e7ec      	b.n	8001fa4 <_free_r+0x24>
 8001fca:	4613      	mov	r3, r2
 8001fcc:	685a      	ldr	r2, [r3, #4]
 8001fce:	b10a      	cbz	r2, 8001fd4 <_free_r+0x54>
 8001fd0:	42a2      	cmp	r2, r4
 8001fd2:	d9fa      	bls.n	8001fca <_free_r+0x4a>
 8001fd4:	6819      	ldr	r1, [r3, #0]
 8001fd6:	1858      	adds	r0, r3, r1
 8001fd8:	42a0      	cmp	r0, r4
 8001fda:	d10b      	bne.n	8001ff4 <_free_r+0x74>
 8001fdc:	6820      	ldr	r0, [r4, #0]
 8001fde:	4401      	add	r1, r0
 8001fe0:	1858      	adds	r0, r3, r1
 8001fe2:	4282      	cmp	r2, r0
 8001fe4:	6019      	str	r1, [r3, #0]
 8001fe6:	d1dd      	bne.n	8001fa4 <_free_r+0x24>
 8001fe8:	6810      	ldr	r0, [r2, #0]
 8001fea:	6852      	ldr	r2, [r2, #4]
 8001fec:	605a      	str	r2, [r3, #4]
 8001fee:	4401      	add	r1, r0
 8001ff0:	6019      	str	r1, [r3, #0]
 8001ff2:	e7d7      	b.n	8001fa4 <_free_r+0x24>
 8001ff4:	d902      	bls.n	8001ffc <_free_r+0x7c>
 8001ff6:	230c      	movs	r3, #12
 8001ff8:	602b      	str	r3, [r5, #0]
 8001ffa:	e7d3      	b.n	8001fa4 <_free_r+0x24>
 8001ffc:	6820      	ldr	r0, [r4, #0]
 8001ffe:	1821      	adds	r1, r4, r0
 8002000:	428a      	cmp	r2, r1
 8002002:	bf04      	itt	eq
 8002004:	6811      	ldreq	r1, [r2, #0]
 8002006:	6852      	ldreq	r2, [r2, #4]
 8002008:	6062      	str	r2, [r4, #4]
 800200a:	bf04      	itt	eq
 800200c:	1809      	addeq	r1, r1, r0
 800200e:	6021      	streq	r1, [r4, #0]
 8002010:	605c      	str	r4, [r3, #4]
 8002012:	e7c7      	b.n	8001fa4 <_free_r+0x24>
 8002014:	bd38      	pop	{r3, r4, r5, pc}
 8002016:	bf00      	nop
 8002018:	200000a0 	.word	0x200000a0

0800201c <_malloc_r>:
 800201c:	b570      	push	{r4, r5, r6, lr}
 800201e:	1ccd      	adds	r5, r1, #3
 8002020:	f025 0503 	bic.w	r5, r5, #3
 8002024:	3508      	adds	r5, #8
 8002026:	2d0c      	cmp	r5, #12
 8002028:	bf38      	it	cc
 800202a:	250c      	movcc	r5, #12
 800202c:	2d00      	cmp	r5, #0
 800202e:	4606      	mov	r6, r0
 8002030:	db01      	blt.n	8002036 <_malloc_r+0x1a>
 8002032:	42a9      	cmp	r1, r5
 8002034:	d903      	bls.n	800203e <_malloc_r+0x22>
 8002036:	230c      	movs	r3, #12
 8002038:	6033      	str	r3, [r6, #0]
 800203a:	2000      	movs	r0, #0
 800203c:	bd70      	pop	{r4, r5, r6, pc}
 800203e:	f000 f927 	bl	8002290 <__malloc_lock>
 8002042:	4a21      	ldr	r2, [pc, #132]	; (80020c8 <_malloc_r+0xac>)
 8002044:	6814      	ldr	r4, [r2, #0]
 8002046:	4621      	mov	r1, r4
 8002048:	b991      	cbnz	r1, 8002070 <_malloc_r+0x54>
 800204a:	4c20      	ldr	r4, [pc, #128]	; (80020cc <_malloc_r+0xb0>)
 800204c:	6823      	ldr	r3, [r4, #0]
 800204e:	b91b      	cbnz	r3, 8002058 <_malloc_r+0x3c>
 8002050:	4630      	mov	r0, r6
 8002052:	f000 f873 	bl	800213c <_sbrk_r>
 8002056:	6020      	str	r0, [r4, #0]
 8002058:	4629      	mov	r1, r5
 800205a:	4630      	mov	r0, r6
 800205c:	f000 f86e 	bl	800213c <_sbrk_r>
 8002060:	1c43      	adds	r3, r0, #1
 8002062:	d124      	bne.n	80020ae <_malloc_r+0x92>
 8002064:	230c      	movs	r3, #12
 8002066:	6033      	str	r3, [r6, #0]
 8002068:	4630      	mov	r0, r6
 800206a:	f000 f912 	bl	8002292 <__malloc_unlock>
 800206e:	e7e4      	b.n	800203a <_malloc_r+0x1e>
 8002070:	680b      	ldr	r3, [r1, #0]
 8002072:	1b5b      	subs	r3, r3, r5
 8002074:	d418      	bmi.n	80020a8 <_malloc_r+0x8c>
 8002076:	2b0b      	cmp	r3, #11
 8002078:	d90f      	bls.n	800209a <_malloc_r+0x7e>
 800207a:	600b      	str	r3, [r1, #0]
 800207c:	50cd      	str	r5, [r1, r3]
 800207e:	18cc      	adds	r4, r1, r3
 8002080:	4630      	mov	r0, r6
 8002082:	f000 f906 	bl	8002292 <__malloc_unlock>
 8002086:	f104 000b 	add.w	r0, r4, #11
 800208a:	1d23      	adds	r3, r4, #4
 800208c:	f020 0007 	bic.w	r0, r0, #7
 8002090:	1ac3      	subs	r3, r0, r3
 8002092:	d0d3      	beq.n	800203c <_malloc_r+0x20>
 8002094:	425a      	negs	r2, r3
 8002096:	50e2      	str	r2, [r4, r3]
 8002098:	e7d0      	b.n	800203c <_malloc_r+0x20>
 800209a:	428c      	cmp	r4, r1
 800209c:	684b      	ldr	r3, [r1, #4]
 800209e:	bf16      	itet	ne
 80020a0:	6063      	strne	r3, [r4, #4]
 80020a2:	6013      	streq	r3, [r2, #0]
 80020a4:	460c      	movne	r4, r1
 80020a6:	e7eb      	b.n	8002080 <_malloc_r+0x64>
 80020a8:	460c      	mov	r4, r1
 80020aa:	6849      	ldr	r1, [r1, #4]
 80020ac:	e7cc      	b.n	8002048 <_malloc_r+0x2c>
 80020ae:	1cc4      	adds	r4, r0, #3
 80020b0:	f024 0403 	bic.w	r4, r4, #3
 80020b4:	42a0      	cmp	r0, r4
 80020b6:	d005      	beq.n	80020c4 <_malloc_r+0xa8>
 80020b8:	1a21      	subs	r1, r4, r0
 80020ba:	4630      	mov	r0, r6
 80020bc:	f000 f83e 	bl	800213c <_sbrk_r>
 80020c0:	3001      	adds	r0, #1
 80020c2:	d0cf      	beq.n	8002064 <_malloc_r+0x48>
 80020c4:	6025      	str	r5, [r4, #0]
 80020c6:	e7db      	b.n	8002080 <_malloc_r+0x64>
 80020c8:	200000a0 	.word	0x200000a0
 80020cc:	200000a4 	.word	0x200000a4

080020d0 <_putc_r>:
 80020d0:	b570      	push	{r4, r5, r6, lr}
 80020d2:	460d      	mov	r5, r1
 80020d4:	4614      	mov	r4, r2
 80020d6:	4606      	mov	r6, r0
 80020d8:	b118      	cbz	r0, 80020e2 <_putc_r+0x12>
 80020da:	6983      	ldr	r3, [r0, #24]
 80020dc:	b90b      	cbnz	r3, 80020e2 <_putc_r+0x12>
 80020de:	f7ff fe61 	bl	8001da4 <__sinit>
 80020e2:	4b13      	ldr	r3, [pc, #76]	; (8002130 <_putc_r+0x60>)
 80020e4:	429c      	cmp	r4, r3
 80020e6:	d112      	bne.n	800210e <_putc_r+0x3e>
 80020e8:	6874      	ldr	r4, [r6, #4]
 80020ea:	68a3      	ldr	r3, [r4, #8]
 80020ec:	3b01      	subs	r3, #1
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	60a3      	str	r3, [r4, #8]
 80020f2:	da16      	bge.n	8002122 <_putc_r+0x52>
 80020f4:	69a2      	ldr	r2, [r4, #24]
 80020f6:	4293      	cmp	r3, r2
 80020f8:	db02      	blt.n	8002100 <_putc_r+0x30>
 80020fa:	b2eb      	uxtb	r3, r5
 80020fc:	2b0a      	cmp	r3, #10
 80020fe:	d110      	bne.n	8002122 <_putc_r+0x52>
 8002100:	4622      	mov	r2, r4
 8002102:	4629      	mov	r1, r5
 8002104:	4630      	mov	r0, r6
 8002106:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800210a:	f7ff bc9b 	b.w	8001a44 <__swbuf_r>
 800210e:	4b09      	ldr	r3, [pc, #36]	; (8002134 <_putc_r+0x64>)
 8002110:	429c      	cmp	r4, r3
 8002112:	d101      	bne.n	8002118 <_putc_r+0x48>
 8002114:	68b4      	ldr	r4, [r6, #8]
 8002116:	e7e8      	b.n	80020ea <_putc_r+0x1a>
 8002118:	4b07      	ldr	r3, [pc, #28]	; (8002138 <_putc_r+0x68>)
 800211a:	429c      	cmp	r4, r3
 800211c:	bf08      	it	eq
 800211e:	68f4      	ldreq	r4, [r6, #12]
 8002120:	e7e3      	b.n	80020ea <_putc_r+0x1a>
 8002122:	6823      	ldr	r3, [r4, #0]
 8002124:	1c5a      	adds	r2, r3, #1
 8002126:	6022      	str	r2, [r4, #0]
 8002128:	701d      	strb	r5, [r3, #0]
 800212a:	b2e8      	uxtb	r0, r5
 800212c:	bd70      	pop	{r4, r5, r6, pc}
 800212e:	bf00      	nop
 8002130:	0800272c 	.word	0x0800272c
 8002134:	0800274c 	.word	0x0800274c
 8002138:	0800270c 	.word	0x0800270c

0800213c <_sbrk_r>:
 800213c:	b538      	push	{r3, r4, r5, lr}
 800213e:	4c06      	ldr	r4, [pc, #24]	; (8002158 <_sbrk_r+0x1c>)
 8002140:	2300      	movs	r3, #0
 8002142:	4605      	mov	r5, r0
 8002144:	4608      	mov	r0, r1
 8002146:	6023      	str	r3, [r4, #0]
 8002148:	f000 f8de 	bl	8002308 <_sbrk>
 800214c:	1c43      	adds	r3, r0, #1
 800214e:	d102      	bne.n	8002156 <_sbrk_r+0x1a>
 8002150:	6823      	ldr	r3, [r4, #0]
 8002152:	b103      	cbz	r3, 8002156 <_sbrk_r+0x1a>
 8002154:	602b      	str	r3, [r5, #0]
 8002156:	bd38      	pop	{r3, r4, r5, pc}
 8002158:	200000e0 	.word	0x200000e0

0800215c <__sread>:
 800215c:	b510      	push	{r4, lr}
 800215e:	460c      	mov	r4, r1
 8002160:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002164:	f000 f896 	bl	8002294 <_read_r>
 8002168:	2800      	cmp	r0, #0
 800216a:	bfab      	itete	ge
 800216c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800216e:	89a3      	ldrhlt	r3, [r4, #12]
 8002170:	181b      	addge	r3, r3, r0
 8002172:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002176:	bfac      	ite	ge
 8002178:	6563      	strge	r3, [r4, #84]	; 0x54
 800217a:	81a3      	strhlt	r3, [r4, #12]
 800217c:	bd10      	pop	{r4, pc}

0800217e <__swrite>:
 800217e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002182:	461f      	mov	r7, r3
 8002184:	898b      	ldrh	r3, [r1, #12]
 8002186:	05db      	lsls	r3, r3, #23
 8002188:	4605      	mov	r5, r0
 800218a:	460c      	mov	r4, r1
 800218c:	4616      	mov	r6, r2
 800218e:	d505      	bpl.n	800219c <__swrite+0x1e>
 8002190:	2302      	movs	r3, #2
 8002192:	2200      	movs	r2, #0
 8002194:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002198:	f000 f868 	bl	800226c <_lseek_r>
 800219c:	89a3      	ldrh	r3, [r4, #12]
 800219e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80021a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80021a6:	81a3      	strh	r3, [r4, #12]
 80021a8:	4632      	mov	r2, r6
 80021aa:	463b      	mov	r3, r7
 80021ac:	4628      	mov	r0, r5
 80021ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80021b2:	f000 b817 	b.w	80021e4 <_write_r>

080021b6 <__sseek>:
 80021b6:	b510      	push	{r4, lr}
 80021b8:	460c      	mov	r4, r1
 80021ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80021be:	f000 f855 	bl	800226c <_lseek_r>
 80021c2:	1c43      	adds	r3, r0, #1
 80021c4:	89a3      	ldrh	r3, [r4, #12]
 80021c6:	bf15      	itete	ne
 80021c8:	6560      	strne	r0, [r4, #84]	; 0x54
 80021ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80021ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80021d2:	81a3      	strheq	r3, [r4, #12]
 80021d4:	bf18      	it	ne
 80021d6:	81a3      	strhne	r3, [r4, #12]
 80021d8:	bd10      	pop	{r4, pc}

080021da <__sclose>:
 80021da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80021de:	f000 b813 	b.w	8002208 <_close_r>
	...

080021e4 <_write_r>:
 80021e4:	b538      	push	{r3, r4, r5, lr}
 80021e6:	4c07      	ldr	r4, [pc, #28]	; (8002204 <_write_r+0x20>)
 80021e8:	4605      	mov	r5, r0
 80021ea:	4608      	mov	r0, r1
 80021ec:	4611      	mov	r1, r2
 80021ee:	2200      	movs	r2, #0
 80021f0:	6022      	str	r2, [r4, #0]
 80021f2:	461a      	mov	r2, r3
 80021f4:	f7fe ff11 	bl	800101a <_write>
 80021f8:	1c43      	adds	r3, r0, #1
 80021fa:	d102      	bne.n	8002202 <_write_r+0x1e>
 80021fc:	6823      	ldr	r3, [r4, #0]
 80021fe:	b103      	cbz	r3, 8002202 <_write_r+0x1e>
 8002200:	602b      	str	r3, [r5, #0]
 8002202:	bd38      	pop	{r3, r4, r5, pc}
 8002204:	200000e0 	.word	0x200000e0

08002208 <_close_r>:
 8002208:	b538      	push	{r3, r4, r5, lr}
 800220a:	4c06      	ldr	r4, [pc, #24]	; (8002224 <_close_r+0x1c>)
 800220c:	2300      	movs	r3, #0
 800220e:	4605      	mov	r5, r0
 8002210:	4608      	mov	r0, r1
 8002212:	6023      	str	r3, [r4, #0]
 8002214:	f000 f850 	bl	80022b8 <_close>
 8002218:	1c43      	adds	r3, r0, #1
 800221a:	d102      	bne.n	8002222 <_close_r+0x1a>
 800221c:	6823      	ldr	r3, [r4, #0]
 800221e:	b103      	cbz	r3, 8002222 <_close_r+0x1a>
 8002220:	602b      	str	r3, [r5, #0]
 8002222:	bd38      	pop	{r3, r4, r5, pc}
 8002224:	200000e0 	.word	0x200000e0

08002228 <_fstat_r>:
 8002228:	b538      	push	{r3, r4, r5, lr}
 800222a:	4c07      	ldr	r4, [pc, #28]	; (8002248 <_fstat_r+0x20>)
 800222c:	2300      	movs	r3, #0
 800222e:	4605      	mov	r5, r0
 8002230:	4608      	mov	r0, r1
 8002232:	4611      	mov	r1, r2
 8002234:	6023      	str	r3, [r4, #0]
 8002236:	f000 f847 	bl	80022c8 <_fstat>
 800223a:	1c43      	adds	r3, r0, #1
 800223c:	d102      	bne.n	8002244 <_fstat_r+0x1c>
 800223e:	6823      	ldr	r3, [r4, #0]
 8002240:	b103      	cbz	r3, 8002244 <_fstat_r+0x1c>
 8002242:	602b      	str	r3, [r5, #0]
 8002244:	bd38      	pop	{r3, r4, r5, pc}
 8002246:	bf00      	nop
 8002248:	200000e0 	.word	0x200000e0

0800224c <_isatty_r>:
 800224c:	b538      	push	{r3, r4, r5, lr}
 800224e:	4c06      	ldr	r4, [pc, #24]	; (8002268 <_isatty_r+0x1c>)
 8002250:	2300      	movs	r3, #0
 8002252:	4605      	mov	r5, r0
 8002254:	4608      	mov	r0, r1
 8002256:	6023      	str	r3, [r4, #0]
 8002258:	f000 f83e 	bl	80022d8 <_isatty>
 800225c:	1c43      	adds	r3, r0, #1
 800225e:	d102      	bne.n	8002266 <_isatty_r+0x1a>
 8002260:	6823      	ldr	r3, [r4, #0]
 8002262:	b103      	cbz	r3, 8002266 <_isatty_r+0x1a>
 8002264:	602b      	str	r3, [r5, #0]
 8002266:	bd38      	pop	{r3, r4, r5, pc}
 8002268:	200000e0 	.word	0x200000e0

0800226c <_lseek_r>:
 800226c:	b538      	push	{r3, r4, r5, lr}
 800226e:	4c07      	ldr	r4, [pc, #28]	; (800228c <_lseek_r+0x20>)
 8002270:	4605      	mov	r5, r0
 8002272:	4608      	mov	r0, r1
 8002274:	4611      	mov	r1, r2
 8002276:	2200      	movs	r2, #0
 8002278:	6022      	str	r2, [r4, #0]
 800227a:	461a      	mov	r2, r3
 800227c:	f000 f834 	bl	80022e8 <_lseek>
 8002280:	1c43      	adds	r3, r0, #1
 8002282:	d102      	bne.n	800228a <_lseek_r+0x1e>
 8002284:	6823      	ldr	r3, [r4, #0]
 8002286:	b103      	cbz	r3, 800228a <_lseek_r+0x1e>
 8002288:	602b      	str	r3, [r5, #0]
 800228a:	bd38      	pop	{r3, r4, r5, pc}
 800228c:	200000e0 	.word	0x200000e0

08002290 <__malloc_lock>:
 8002290:	4770      	bx	lr

08002292 <__malloc_unlock>:
 8002292:	4770      	bx	lr

08002294 <_read_r>:
 8002294:	b538      	push	{r3, r4, r5, lr}
 8002296:	4c07      	ldr	r4, [pc, #28]	; (80022b4 <_read_r+0x20>)
 8002298:	4605      	mov	r5, r0
 800229a:	4608      	mov	r0, r1
 800229c:	4611      	mov	r1, r2
 800229e:	2200      	movs	r2, #0
 80022a0:	6022      	str	r2, [r4, #0]
 80022a2:	461a      	mov	r2, r3
 80022a4:	f000 f828 	bl	80022f8 <_read>
 80022a8:	1c43      	adds	r3, r0, #1
 80022aa:	d102      	bne.n	80022b2 <_read_r+0x1e>
 80022ac:	6823      	ldr	r3, [r4, #0]
 80022ae:	b103      	cbz	r3, 80022b2 <_read_r+0x1e>
 80022b0:	602b      	str	r3, [r5, #0]
 80022b2:	bd38      	pop	{r3, r4, r5, pc}
 80022b4:	200000e0 	.word	0x200000e0

080022b8 <_close>:
 80022b8:	4b02      	ldr	r3, [pc, #8]	; (80022c4 <_close+0xc>)
 80022ba:	2258      	movs	r2, #88	; 0x58
 80022bc:	601a      	str	r2, [r3, #0]
 80022be:	f04f 30ff 	mov.w	r0, #4294967295
 80022c2:	4770      	bx	lr
 80022c4:	200000e0 	.word	0x200000e0

080022c8 <_fstat>:
 80022c8:	4b02      	ldr	r3, [pc, #8]	; (80022d4 <_fstat+0xc>)
 80022ca:	2258      	movs	r2, #88	; 0x58
 80022cc:	601a      	str	r2, [r3, #0]
 80022ce:	f04f 30ff 	mov.w	r0, #4294967295
 80022d2:	4770      	bx	lr
 80022d4:	200000e0 	.word	0x200000e0

080022d8 <_isatty>:
 80022d8:	4b02      	ldr	r3, [pc, #8]	; (80022e4 <_isatty+0xc>)
 80022da:	2258      	movs	r2, #88	; 0x58
 80022dc:	601a      	str	r2, [r3, #0]
 80022de:	2000      	movs	r0, #0
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	200000e0 	.word	0x200000e0

080022e8 <_lseek>:
 80022e8:	4b02      	ldr	r3, [pc, #8]	; (80022f4 <_lseek+0xc>)
 80022ea:	2258      	movs	r2, #88	; 0x58
 80022ec:	601a      	str	r2, [r3, #0]
 80022ee:	f04f 30ff 	mov.w	r0, #4294967295
 80022f2:	4770      	bx	lr
 80022f4:	200000e0 	.word	0x200000e0

080022f8 <_read>:
 80022f8:	4b02      	ldr	r3, [pc, #8]	; (8002304 <_read+0xc>)
 80022fa:	2258      	movs	r2, #88	; 0x58
 80022fc:	601a      	str	r2, [r3, #0]
 80022fe:	f04f 30ff 	mov.w	r0, #4294967295
 8002302:	4770      	bx	lr
 8002304:	200000e0 	.word	0x200000e0

08002308 <_sbrk>:
 8002308:	4b04      	ldr	r3, [pc, #16]	; (800231c <_sbrk+0x14>)
 800230a:	6819      	ldr	r1, [r3, #0]
 800230c:	4602      	mov	r2, r0
 800230e:	b909      	cbnz	r1, 8002314 <_sbrk+0xc>
 8002310:	4903      	ldr	r1, [pc, #12]	; (8002320 <_sbrk+0x18>)
 8002312:	6019      	str	r1, [r3, #0]
 8002314:	6818      	ldr	r0, [r3, #0]
 8002316:	4402      	add	r2, r0
 8002318:	601a      	str	r2, [r3, #0]
 800231a:	4770      	bx	lr
 800231c:	200000a8 	.word	0x200000a8
 8002320:	200000e8 	.word	0x200000e8

08002324 <_init>:
 8002324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002326:	bf00      	nop
 8002328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800232a:	bc08      	pop	{r3}
 800232c:	469e      	mov	lr, r3
 800232e:	4770      	bx	lr

08002330 <_fini>:
 8002330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002332:	bf00      	nop
 8002334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002336:	bc08      	pop	{r3}
 8002338:	469e      	mov	lr, r3
 800233a:	4770      	bx	lr
